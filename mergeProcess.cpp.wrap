#include <Rcpp.h>
#include <iostream>
#include <exception>
#include <string>
#include <exception>
#include <cstring>
#include <fstream>
#include <vector>
#include <math.h>

#include "/home/lisa/rDia/lib/csv.h"

using namespace Rcpp;
using namespace io;
using namespace std;

// Enable C++11
// [[Rcpp::plugins("cpp11")]]

// debug
//const bool check = 1;
const bool check = 0;

string FILENAME = "sew.dat";
string CSVFILE  = "sew.csv";

// number of variables in packet
const int packetLen = 20;

// packet
struct PacketStr {
  int    frameNumber;
	double frameTimeRel;
	double frameTimeDelta;
	int    frameLen;
	char   ipProto;
	char   ipVersion;
	string ipSrc;
	string ethSrc;
	string ipDst;
	string ethDst;
	string modbusUnitId;
	string tcpSrcPort;
	string tcpDstPort;
	char   mbtcpProtId;
	int    mbtcpTransId;
	int    mbtcpLen;
	string modbusFunctionCode;
	string modbusRefNum;
	int    modbusWordCnt;
	string modbusData;
} packet, prevPacket;

// merged mbtcp transaction
struct MbtcpTransStr {
  int    frameNumber;
  double frameTimeRel;
  double frameTimeDelta;
  int    frameLen;
  char   ipProto;
  char   ipVersion;
  string ipSrc;
  string ethSrc;
  string ipDst;
  string ethDst;
  string modbusUnitId;
  string tcpSrcPort;
  string tcpDstPort;
	char   mbtcpProtId;
	int    mbtcpTransId;
	int    mbtcpLen;
	string modbusFunctionCode;
	string modbusRefNum;
	int    modbusWordCnt;
	int    frameSecond;
	int    respFrameNumber;
	double respTimeRel;
	double respTimeDelta;
	int    respLen;
	string respIpSrc;
	string respEthSrc;
	string respIpDest;
	string respEthDest;
	string respUnitId;
	string respSrcport;
	string respDstPort;
	char   respProtId;
	int    respTransId;
	int    respMbtcpLen;
	string respFuncCode;
	string modbusData;
	int    respSecond;
	int    d;
} mbtcpTrans;

// all merged mbtcp transactions
vector<MbtcpTransStr> mergedTrans;

// ********************* FUNCTIONS ********************* 

// convert hexadecimal string to decimal
int hexToDec(string str) {

  string decS;
	char delim[] = ":";
	char *token = strtok( &str[0], delim );

	while (token != NULL ) {

		decS += token;
		token = strtok( NULL, delim );
	}

	return strtol( decS.c_str(), NULL, 16 );
}
// merge transactions from pcap file
int mergeTrans(string file) {
  
  try {

		//CSVReader<packetLen, trim_chars<' '>, no_quote_escape<'|'> > in( FILENAME.c_str() );
		CSVReader<packetLen> in( file.c_str() );
		while( in.read_row(
				   packet.frameNumber, packet.frameTimeRel, packet.frameTimeDelta,
				   packet.frameLen, packet.ipProto, packet.ipVersion, packet.ipSrc, packet.ethSrc,
				   packet.ipDst, packet.ethDst, packet.modbusUnitId, packet.tcpSrcPort,
				   packet.tcpDstPort, packet.mbtcpProtId, packet.mbtcpTransId, 
				   packet.mbtcpLen, packet.modbusFunctionCode, packet.modbusRefNum, 
				   packet.modbusWordCnt, packet.modbusData 
				   ) ) {

			// merge request and response packets
			if( packet.mbtcpTransId == prevPacket.mbtcpTransId ) {
				
				// request packet has destination port 502
				if( prevPacket.tcpDstPort == "502" ) {
          
  				mbtcpTrans.frameNumber  = prevPacket.frameNumber;
					mbtcpTrans.frameTimeRel = prevPacket.frameTimeRel;
					mbtcpTrans.frameTimeDelta= prevPacket.frameTimeDelta;
					mbtcpTrans.frameLen     = prevPacket.frameLen;
					mbtcpTrans.ipProto      = prevPacket.ipProto;
					mbtcpTrans.ipVersion    = prevPacket.ipVersion;
					mbtcpTrans.ipSrc        = prevPacket.ipSrc;
					mbtcpTrans.ethSrc       = prevPacket.ethSrc;
					mbtcpTrans.ipDst        = prevPacket.ipDst;
					mbtcpTrans.ethDst       = prevPacket.ethDst;
					mbtcpTrans.modbusUnitId = prevPacket.modbusUnitId;
					mbtcpTrans.tcpSrcPort   = prevPacket.tcpSrcPort;
					mbtcpTrans.tcpDstPort   = prevPacket.tcpDstPort;
					mbtcpTrans.mbtcpProtId  = prevPacket.mbtcpProtId;
					mbtcpTrans.mbtcpTransId = prevPacket.mbtcpTransId;
					mbtcpTrans.mbtcpLen     = prevPacket.mbtcpLen;
					mbtcpTrans.modbusFunctionCode = prevPacket.modbusFunctionCode;
					mbtcpTrans.modbusRefNum   = prevPacket.modbusRefNum;
					mbtcpTrans.modbusWordCnt  = prevPacket.modbusWordCnt;
					mbtcpTrans.frameSecond  = floor(prevPacket.frameTimeRel);;
          
				} // if dstport=502
				
				// response packet has source port 502
				if( packet.tcpSrcPort == "502" ) {
          
  				mbtcpTrans.respFrameNumber  = packet.frameNumber;
					mbtcpTrans.respTimeRel   = packet.frameTimeRel;
					mbtcpTrans.respTimeDelta = packet.frameTimeDelta;
					mbtcpTrans.respLen       = packet.frameLen;
					mbtcpTrans.respIpSrc     = packet.ipSrc;
					mbtcpTrans.respEthSrc    = packet.ethSrc;
					mbtcpTrans.respIpDest    = packet.ipDst;
					mbtcpTrans.respEthDest   = packet.ethDst;
					mbtcpTrans.respUnitId    = packet.modbusUnitId;
					mbtcpTrans.respSrcport   = packet.tcpSrcPort;
					mbtcpTrans.respDstPort   = packet.tcpDstPort;
					mbtcpTrans.respProtId    = packet.mbtcpProtId;
					mbtcpTrans.respTransId   = packet.mbtcpTransId;
					mbtcpTrans.respMbtcpLen  = packet.mbtcpLen;
					mbtcpTrans.respFuncCode  = packet.modbusFunctionCode;
					mbtcpTrans.modbusData = packet.modbusData; 
					mbtcpTrans.respSecond    = floor(packet.frameTimeRel);
					mbtcpTrans.d = hexToDec(packet.modbusData); 

					// add to all merged transactions
					mergedTrans.push_back(mbtcpTrans);
					
					// re-initialize transaction
					mbtcpTrans = (const struct MbtcpTransStr){ 0 };
          
  			} // if srcport=502

			} // current and previous transid equal
			
			prevPacket = packet;
      
		} // end while read_row

  } catch (std::exception & e) {

		cout << "Exception mergeTrans() :\n" << endl;
		cout << e.what() << "\n" << endl;

	} // end try/catch

	return 0;

}

// [[Rcpp::export]]
RObject mergeProcess(DataFrame df, string file, string csv) {
  
  mergeTrans(file);
/*  
  DataFrame dfOut = DataFrame::create(Named("frameNumber")=frNum,
									  Named("frameTimeRel")=frameTimeRel,
									  Named("frameTimeDelta")=frameTimeDelta,
									  Named("frameLen")=frameLen,
									  Named("ipProto")=ipProto,
									  Named("ipVersion")=ipVersion,
									  Named("ipSrc")=ipSrc,
									  Named("ethSrc")=ethSrc,
									  Named("ipDst")=ipDst,
									  Named("ethDst")=ethDst,
									  Named("modbusUnitId")=modbusUnitId,
									  Named("tcpSrcPort")=tcpSrcPort,
									  Named("tcpDstPort")=tcpDstPort,
									  Named("mbtcpProtId")=mbtcpProtId,
									  Named("mbtcpTransId")=mbtcpTransId,
									  Named("mbtcpLen")=mbtcpLen,
									  Named("modbusFunctionCode")=modbusFunctionCode,
									  Named("modbusRefNum")=modbusRefNum,
									  Named("modbusWordCnt")=modbusWordCnt,
									  Named("frameSecond")=frameSecond,
                    Named("respFrameNumber")=respFrameNumber,
                    Named("frameTimeRel")=frameTimeRel,
                    Named("frameTimeDelta")=frameTimeDelta,
                    Named("respLen")=respLen,
                    Named("respIpSrc")=respIpSrc,
                    Named("respEthSrc")=respEthSrc,
                    Named("respIpDst")=respIpDst,
                    Named("respEthDst")=respEthDst,
                    Named("respUnitId")=respUnitId,
                    Named("respSrcPort")=respSrcPort,
                    Named("respDstPort")=respDstPort,
                    Named("respProtId")=respProtId,
                    Named("respTransId")=respTransId
                    );
    
                    return DataFrame::create(Named("frameNumber")=respFrameNumber,
                                             Named("mbtcpTransId")=respTransId);
                    cout << frNum.size() << endl;
                    cout << respFrameNumber.size() << endl;

  DataFrame dfOut = DataFrame::create(Named("frameNumber") = frNum,
                    Named("frameTimeRel")=frameTimeRel,
									  Named("frameTimeDelta")=frameTimeDelta,
									  Named("frameLen")=frameLen,
									  Named("ipProto")=ipProto,
									  Named("ipVersion")=ipVersion,
									  Named("ipSrc")=ipSrc,
									  Named("ethSrc")=ethSrc,
									  Named("ipDst")=ipDst,
									  Named("ethDst")=ethDst,
									  Named("modbusUnitId")=modbusUnitId,
									  Named("tcpSrcPort")=tcpSrcPort,
									  Named("tcpDstPort")=tcpDstPort,
									  Named("mbtcpProtId")=mbtcpProtId,
                    Named("mbtcpTransId")=mbtcpTransId,
									  Named("mbtcpLen")=mbtcpLen,
									  Named("modbusFunctionCode")=modbusFunctionCode,
									  Named("modbusRefNum")=modbusRefNum,
									  Named("frameSecond")=frameSecond,
                    Named("respFrameNumber")=respFrameNumber,
                    Named("respTransId")=respTransId);
                                        */

  RObject out = wrap(mergedTrans);
  return out;

}

/*** R
library(microbenchmark)
library(data.table)


# call mergeProcess to merge transactions from pcap file and returns as DF

FILENAME <- "/home/lisa/scada/sew.data.1"
CSVFILE  <- "sew.csv"

out <- mergeProcess(sewModbusDT, FILENAME, CSVFILE)

*/
