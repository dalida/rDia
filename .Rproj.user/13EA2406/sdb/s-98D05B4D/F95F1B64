{
    "contents" : "#### ####\n#### Install packages ####\n\ninstall.packages(\"data.table\")\ninstall.packages(\"lattice.extra\")\ninstall.packages(\"plyr\")\ninstall.packages(\"dplyr\")\n\nlibrary(data.table)\nlibrary(lattice)\nlibrary(latticeExtra)\n\n#### Read in data - entire pcap file ####\nscadaDT <- as.data.table(read.csv(\"~/Bureau/data/scadaCops/SCADA_20150429_csv\", stringsAsFactors=TRUE))\n\n\n#### Describe data ####\nstr(scadaDT)\n> str(scadaDT)\n# Classes ‘data.table’ and 'data.frame':  3566892 obs. of  7 variables:\n#   $ No.        : int  1 2 3 4 5 6 7 8 9 10 ...\n# $ Time       : num  0 1 1.76 1.76 2 ...\n# $ Source     : Factor w/ 41 levels \"0e:10:ff:b7:dc:26\",..: 33 33 12 12 33 12 12 6 12 9 ...\n# $ Destination: Factor w/ 37 levels \"192.168.100.2\",..: 32 32 18 18 32 18 18 7 19 14 ...\n# $ Protocol   : Factor w/ 28 levels \"ARP\",\"BROWSER\",..: 16 16 25 25 16 25 25 28 5 7 ...\n# $ Length     : int  56 56 62 62 56 62 62 82 76 104 ...\n# $ Info       : Factor w/ 2398392 levels \"0 > asa-appl-proto [<None>] Seq=174781686 Win=512 Len=0\",..: 1217902 1217903 1387261 1387261 1217904 1387261 1387261 1450729 1453023 1428177 ...\n# - attr(*, \".internal.selfref\")=<externalptr> \nsummary(scadaDT)\n# > summary(scadaDT)\n# No.               Time                     Source                Destination            Protocol           Length       \n# Min.   :      1   Min.   :    0   192.168.12.51    :2004927   192.168.12.253:1882254   TCP       :1692588   Min.   :  42.00  \n# 1st Qu.: 891724   1st Qu.: 7250   AdeptTec_5c:74:1e: 743837   Broadcast     : 746874   Modbus/TCP: 825521   1st Qu.:  54.00  \n# Median :1783446   Median :14018   192.168.12.253   : 412802   192.168.12.51 : 680298   ARP       : 751226   Median :  54.00  \n# Mean   :1783446   Mean   :11400   192.168.12.252   : 277302   192.168.12.252: 143086   T.125     : 277283   Mean   :  60.05  \n# 3rd Qu.:2675169   3rd Qu.:14102   192.168.50.50    :  76642   83.133.119.197:  66226   HTTP      :  11275   3rd Qu.:  65.00  \n# Max.   :3566892   Max.   :16616   192.168.12.90    :  22641   192.168.12.128:  15201   DNS       :   2525   Max.   :1514.00  \n# (Other)          :  28741   (Other)       :  32953   (Other)   :   6474                    \n# Info        \n# detachUserRequest                                                 : 277276  \n# Continuation or non-HTTP traffic                                  :   5635  \n# [TCP Retransmission] Continuation or non-HTTP traffic             :   4970  \n# query: trans:     0; unit:   1, func:   4: Read input registers:   1568  \n# query: trans:   100; unit:   1, func:   4: Read input registers:   1568  \n# query: trans:   101; unit:   1, func:   4: Read input registers:   1568  \n# (Other):3274307\n\n\n###########  EXPLORATORY  ###########\n\n### PROTOCOLS\n\n# ptm <- proc.time()\n# protocols <- as.table(sort(table(scadaDT[,Protocol]), decreasing=TRUE)) # protocols sorted from greatest\n# proc.time() - ptm\n# protocolsDT <- as.data.table(protocols)\n\nprotocols <- sort(table(scadaDT$Protocol),decreasing=TRUE)\nprotocols\n# as.matrix(protocols)\n# > protocols <- sort(table(scadaDT$Protocol),decreasing=TRUE)\n# > #proc.time() - ptm\n# > protocols\n# \n# TCP   Modbus/TCP          ARP        T.125         HTTP          DNS          SMB          UDP         IMAP \n# 1692588       825521       751226       277283        11275         2525         1007          861          849 \n# TLSv1         SMTP         ICMP         NBNS       PN-DCP       DHCPv6       Syslog      BROWSER         SSDP \n# 575          533          526          491          364          273          246          181          168 \n# LLMNR       LANMAN         NBSS         MDNS       DCERPC RELOAD Frame       REMACT       SRVSVC          IMF \n# 128          108           80           28           21           14            6            6            5 \n# TPKT \n# 4\nrm(protocols)\n\n# pie chart\n# plot.new()\n# lbls <- paste(names(protocols), \"\\n\", protocols, sep=\"\")\n# par(mfrow=c(1,1))\n# pie(protocols, labels=lbls, main=\"Distribution by Protocols\")\n\n\n# camembert\nprotocol <- scadaDT$Protocol\ncamembert(protocol)\nrm(protocol)\n\n# stacked\nsbar <- ggplot(scadaDT, aes(x=Source, fill=Protocol)) + geom_bar()\nsbar <- sbar + ggtitle(\"Frequency of Packets by Source/Protocol) + ylab(\"Frequency\")\nsbar + theme(axis.text.x = element_text(angle=90))\nrm(sbar)\n\n#### Plots ####\nscadaDT[,(plot(Protocol, main=\"Number of Packets by Protocol\", xlab=\"Protocol\", ylab=\"Frequency\"))]\n\n### LENGTH\n\nsummary(scadaDT[,Length])\n# > summary(scadaDT[,Length])\n# Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n# 42.00   54.00   54.00   60.05   65.00 1514.00\n#scadaDT[,(plot(Length, main=\"Length\"))]\nscadaDT[,(boxplot(Length~Protocol, main=\"Packet Length by Protocol\", xlab=\"Protocol\", ylab=\"Bytes\"))]\n\nboxplot(scadaDT[Protocol==\"Modbus/TCP\"]$Length, main=\"Boxplot of Length for Modbus/TCP Packets\", ylab=\"bytes\")\nboxplot(scadaDT[Protocol==\"TCP\"]$Length, main=\"Boxplot of Length for TCP Packets\", ylab=\"bytes\")\nboxplot(scadaDT[Protocol==\"ARP\"]$Length, main=\"Boxplot of Length for ARP Packets\", ylab=\"bytes\")\n\n\n# Number of Packets by Destination\nscadaDT[, .(Count=.N) ,by=Source]\n# scadaDT[,(plot(Source, main=\"Frequency by Source\", xlab=\"Source\", ylab=\"Frequency\"))]\n\nhp <- ggplot(scadaDT, aes(x=Source)) + geom_histogram()\nhp <- hp + ggtitle(\"Histogram of Packets by Source\") + ylab(\"Count\")\nhp + theme(axis.text.x = element_text(angle=90))\nrm(hp)\n\n# > scadaDT[, .(Count=.N) ,by=Source]\n#                       Source   Count\n# 1:          Siemens_45:5c:e4     643\n# 2:             192.168.50.50   76642\n# 3:             192.168.12.51 2004927\n# 4:              192.168.50.1     361\n# 5:         Spectrum_18:78:cd     777\n# 6:            Intel_03:5f:5b    1305\n# 7:            192.168.12.252  277302\n# 8:            Intel_af:1c:7d     969\n# 9:             192.168.50.11    1905\n# 10:           Vmware_73:7a:76     403\n# 11:              Nsi_1e:00:6e     638\n# 12:            Intel_bb:66:28    1014\n# 13:            192.168.12.250    9636\n# 14:            192.168.12.128    7126\n# 15:            192.168.12.253  412802\n# 16:         Veritech_37:9b:5b    1783\n# 17:         Telemeca_0f:35:aa      80\n# 18: fe80::c8fd:ac99:e724:26e9     421\n# 19:            83.133.119.197    1251\n# 20:         DlgAutom_56:ec:6d      81\n# 21:             192.168.12.90   22641\n# 22:            Intel_f7:82:bc      42\n# 23:             192.168.50.18     216\n# 24:         AdeptTec_5c:74:1e  743837\n# 25:  fe80::250:b6ff:fe4f:d6c0       4\n# 26: fe80::488e:75ff:fea0:2422       4\n# 27: fe80::7cca:f2ff:fe61:5a77       4\n# 28: fe80::88d0:fcff:fec2:77b3       4\n# 29: fe80::58aa:15ff:febb:a322       4\n# 30:  fe80::e88b:eff:fe6b:bfc5       4\n# 31: fe80::b4cf:74ff:feba:c2cd       4\n# 32:             192.168.12.80      44\n# 33:         0e:10:ff:b7:dc:26       2\n# 34:         26:73:f5:ee:88:a8       2\n# 35:         2e:8e:45:86:ec:5a       2\n# 36:         GoodWayI_4f:d6:c0       2\n# 37:           Vmware_c0:00:00       2\n# 38:           Vmware_c0:00:06       2\n# 39:         2a:84:83:48:30:2b       2\n# 40:           Vmware_c0:00:02       2\n# 41:           Vmware_c0:00:01       2\n\n# Number of Packets by Destination\nscadaDT[, .(Count=.N) ,by=Destination]\n# scadaDT[,(plot(Destination, main=\"Frequency by Destination\", xlab=\"Destination\", ylab=\"Frequency\"))]\n\nhp <- ggplot(scadaDT, aes(x=Destination)) + geom_histogram()\nhp <- hp + ggtitle(\"Histogram of Packets by Destination\") + ylab(\"Count\")\nhp + theme(axis.text.x = element_text(angle=90))\nrm(hp)\n\n# > scadaDT[, .(Count=.N) ,by=Destination]\n#          Destination   Count\n# 1:    PN-MC_00:00:00     364\n# 2:    83.133.119.197   66226\n# 3:    192.168.12.255     673\n# 4:           8.8.8.8     620\n# 5:     192.168.50.50     365\n# 6:    Intel_03:5f:5b    1304\n# 7: Spectrum_18:78:cd     763\n# 8:     192.168.12.51  680298\n# 9:    192.168.12.252  143086\n# 10:    Intel_af:1c:7d     716\n# 11:     192.168.100.2    1905\n# 12:         Broadcast  746874\n# 13:   Vmware_73:7a:76     366\n# 14:   255.255.255.255     430\n# 15:     192.168.50.11    2281\n# 16:    192.168.50.255     376\n# 17:    192.168.12.128   15201\n# 18:      Nsi_1e:00:6e     505\n# 19:    192.168.12.250    8342\n# 20: Veritech_37:9b:5b     304\n# 21:    192.168.12.253 1882254\n# 22:         ff02::1:2     273\n# 23: DlgAutom_56:ec:6d      63\n# 24:     192.168.12.90   11237\n# 25:           ff02::c      84\n# 26:   239.255.255.250      84\n# 27:    Intel_f7:82:bc      38\n# 28:     192.168.12.16     197\n# 29:     192.168.50.18    1168\n# 30:    Intel_bb:66:28     233\n# 31: Telemeca_0f:35:aa      24\n# 32:          ff02::fb      28\n# 33:         ff02::1:3      64\n# 34:       224.0.0.252      64\n# 35:  Siemens_45:5c:e4       1\n# 36: AdeptTec_5c:74:1e      35\n# 37:     192.168.12.80      46\n\n# Number of Packets by Source/Protocol\nscadaDT[, .(Count=.N) , by=.(Source,Protocol)]\n# > scadaDT[, .(Count=.N) , by=.(Source,Protocol)]\n#                       Source     Protocol   Count\n# 1:          Siemens_45:5c:e4       PN-DCP     364\n# 2:             192.168.50.50          TCP   63000\n# 3:             192.168.12.51          UDP     861\n# 4:             192.168.50.50          DNS     620\n# 5:              192.168.50.1         ICMP     361\n# 6:         Spectrum_18:78:cd          ARP     777\n# 7:            Intel_03:5f:5b          ARP    1305\n# 8:            192.168.12.252          TCP  138664\n# 9:             192.168.12.51          TCP 1463781\n# 10:            Intel_af:1c:7d          ARP     969\n# 11:             192.168.50.11          DNS    1905\n# 12:          Siemens_45:5c:e4          ARP     279\n# 13:           Vmware_73:7a:76          ARP     403\n# 14:             192.168.50.50         IMAP     334\n# 15:             192.168.50.50      BROWSER      94\n# 16:             192.168.50.50         ICMP       4\n# 17:              Nsi_1e:00:6e          ARP     638\n# 18:            Intel_bb:66:28          ARP    1014\n# 19:            192.168.12.250         ICMP     129\n# 20:            192.168.12.128         ICMP       8\n# 21:             192.168.50.50         NBNS     282\n# 22:            192.168.12.253          TCP     178\n# 23:         Veritech_37:9b:5b          ARP    1783\n# 24:         Telemeca_0f:35:aa          ARP      80\n# 25: fe80::c8fd:ac99:e724:26e9       DHCPv6     273\n# 26:            192.168.12.128      BROWSER      23\n# 27:            192.168.12.128         NBNS      23\n# 28:             192.168.12.51         NBNS      59\n# 29:            192.168.12.128          TCP    6534\n# 30:            192.168.12.128         NBSS      49\n# 31:             192.168.12.51         NBSS      31\n# 32:            192.168.12.128          SMB     426\n# 33:             192.168.12.51          SMB     301\n# 34:            192.168.12.128       LANMAN      54\n# 35:             192.168.12.51       LANMAN      54\n# 36:            83.133.119.197          TCP     198\n# 37:            83.133.119.197         IMAP     515\n# 38:             192.168.12.51      BROWSER      41\n# 39:         DlgAutom_56:ec:6d          ARP      81\n# 40:             192.168.12.90       Syslog      49\n# 41: fe80::c8fd:ac99:e724:26e9         SSDP      84\n# 42:             192.168.12.90         SSDP      84\n# 43:             192.168.12.90      BROWSER      23\n# 44:            192.168.12.250          TCP    9035\n# 45:             192.168.12.51         TPKT       2\n# 46:            192.168.12.252         TPKT       2\n# 47:             192.168.12.51   Modbus/TCP  401150\n# 48:             192.168.12.51        T.125  138647\n# 49:            192.168.12.253   Modbus/TCP  412604\n# 50:            192.168.12.252        T.125  138636\n# 51:            Intel_f7:82:bc          ARP      42\n# 52:             192.168.50.18         NBNS      19\n# 53:            192.168.12.250         NBNS      12\n# 54:             192.168.50.18       Syslog     197\n# 55:            192.168.12.253         ICMP      20\n# 56:            83.133.119.197         SMTP     533\n# 57:            83.133.119.197          IMF       5\n# 58:             192.168.50.50         HTTP   11275\n# 59:            192.168.12.250          SMB     140\n# 60:             192.168.50.50          SMB     140\n# 61:            192.168.12.250       DCERPC       6\n# 62:            192.168.12.128       DCERPC       9\n# 63:             192.168.50.50       DCERPC       6\n# 64:            192.168.12.250       REMACT       3\n# 65:             192.168.50.50       REMACT       3\n# 66:            192.168.12.250       SRVSVC       3\n# 67:             192.168.50.50       SRVSVC       3\n# 68:            192.168.12.250 RELOAD Frame       8\n# 69:             192.168.50.50 RELOAD Frame       6\n# 70:         AdeptTec_5c:74:1e          ARP  743837\n# 71:             192.168.12.90          TCP   11162\n# 72:             192.168.12.90   Modbus/TCP   11163\n# 73:            192.168.12.250   Modbus/TCP     300\n# 74:             192.168.50.50   Modbus/TCP     300\n# 75:  fe80::250:b6ff:fe4f:d6c0         MDNS       4\n# 76: fe80::488e:75ff:fea0:2422         MDNS       4\n# 77: fe80::7cca:f2ff:fe61:5a77         MDNS       4\n# 78: fe80::88d0:fcff:fec2:77b3         MDNS       4\n# 79: fe80::58aa:15ff:febb:a322         MDNS       4\n# 80:  fe80::e88b:eff:fe6b:bfc5         MDNS       4\n# 81: fe80::b4cf:74ff:feba:c2cd         MDNS       4\n# 82: fe80::c8fd:ac99:e724:26e9        LLMNR      64\n# 83:             192.168.12.90        LLMNR      64\n# 84:             192.168.12.90         NBNS      96\n# 85:             192.168.50.50        TLSv1     575\n# 86:             192.168.12.80          TCP      36\n# 87:             192.168.12.80   Modbus/TCP       4\n# 88:             192.168.12.80         ICMP       4\n# 89:         0e:10:ff:b7:dc:26          ARP       2\n# 90:         26:73:f5:ee:88:a8          ARP       2\n# 91:         2e:8e:45:86:ec:5a          ARP       2\n# 92:         GoodWayI_4f:d6:c0          ARP       2\n# 93:           Vmware_c0:00:00          ARP       2\n# 94:           Vmware_c0:00:06          ARP       2\n# 95:         2a:84:83:48:30:2b          ARP       2\n# 96:           Vmware_c0:00:02          ARP       2\n# 97:           Vmware_c0:00:01          ARP       2\n\n# Number of Packets by Destination/Protocol\nscadaDT[, .(Count=.N) , by=.(Destination,Protocol)]\n# > scadaDT[, .(Count=.N) , by=.(Destination,Protocol)]\n#          Destination     Protocol   Count\n# 1:    PN-MC_00:00:00       PN-DCP     364\n# 2:    83.133.119.197          TCP   54951\n# 3:    192.168.12.255          UDP     431\n# 4:           8.8.8.8          DNS     620\n# 5:     192.168.50.50         ICMP     365\n# 6:    Intel_03:5f:5b          ARP    1304\n# 7: Spectrum_18:78:cd          ARP     763\n# 8:     192.168.12.51          TCP  140133\n# 9:    192.168.12.252          TCP    4437\n# 10:    Intel_af:1c:7d          ARP     716\n# 11:     192.168.100.2          DNS    1905\n# 12:         Broadcast          ARP  746874\n# 13:   Vmware_73:7a:76          ARP     366\n# 14:   255.255.255.255          UDP     430\n# 15:     192.168.50.11          TCP     894\n# 16:     192.168.50.11         IMAP     849\n# 17:    192.168.50.255      BROWSER      94\n# 18:    192.168.12.128         ICMP       8\n# 19:      Nsi_1e:00:6e          ARP     505\n# 20:    192.168.12.250         ICMP      16\n# 21:    192.168.50.255         NBNS     282\n# 22: Veritech_37:9b:5b          ARP     304\n# 23:    192.168.12.253          TCP 1469317\n# 24:         ff02::1:2       DHCPv6     273\n# 25:    192.168.12.255      BROWSER      87\n# 26:    192.168.12.255         NBNS     155\n# 27:    192.168.12.128         NBNS      23\n# 28:    192.168.12.128          TCP   14466\n# 29:     192.168.12.51         NBSS      31\n# 30:    192.168.12.128         NBSS      31\n# 31:     192.168.12.51          SMB     301\n# 32:    192.168.12.128          SMB     581\n# 33:     192.168.12.51       LANMAN      54\n# 34:    192.168.12.128       LANMAN      54\n# 35: DlgAutom_56:ec:6d          ARP      63\n# 36:    192.168.12.250       Syslog      49\n# 37:     192.168.12.90         ICMP      49\n# 38:           ff02::c         SSDP      84\n# 39:   239.255.255.250         SSDP      84\n# 40:    192.168.12.250          TCP    7818\n# 41:    192.168.12.252         TPKT       2\n# 42:     192.168.12.51         TPKT       2\n# 43:    192.168.12.253   Modbus/TCP  412917\n# 44:    192.168.12.252        T.125  138647\n# 45:     192.168.12.51   Modbus/TCP  401141\n# 46:     192.168.12.51        T.125  138636\n# 47:    Intel_f7:82:bc          ARP      38\n# 48:    192.168.12.253         NBNS      20\n# 49:     192.168.12.16       Syslog     197\n# 50:     192.168.50.18         ICMP      88\n# 51:     192.168.50.11         SMTP     533\n# 52:     192.168.50.11          IMF       5\n# 53:    83.133.119.197         HTTP   11275\n# 54:    192.168.12.250          SMB     125\n# 55:    192.168.12.250         NBSS      18\n# 56:    192.168.12.250         NBNS       7\n# 57:    Intel_bb:66:28          ARP     233\n# 58:    192.168.12.128       DCERPC      12\n# 59:    192.168.12.250       DCERPC       9\n# 60:    192.168.12.128       REMACT       6\n# 61:    192.168.12.128       SRVSVC       6\n# 62:    192.168.12.128 RELOAD Frame      14\n# 63:     192.168.12.90          TCP      29\n# 64:     192.168.12.90   Modbus/TCP   11159\n# 65:    192.168.12.250   Modbus/TCP     300\n# 66: Telemeca_0f:35:aa          ARP      24\n# 67:          ff02::fb         MDNS      28\n# 68:         ff02::1:3        LLMNR      64\n# 69:       224.0.0.252        LLMNR      64\n# 70:  Siemens_45:5c:e4          ARP       1\n# 71:     192.168.50.18          TCP     505\n# 72:     192.168.50.18        TLSv1     575\n# 73: AdeptTec_5c:74:1e          ARP      35\n# 74:     192.168.12.80          TCP      38\n# 75:     192.168.12.80   Modbus/TCP       4\n# 76:     192.168.12.80         NBNS       4\n\n### MODBUS PACKETS\n\nsummary(scadaDT[Protocol==\"Modbus/TCP\"])\n# > summary(scadaDT[Protocol==\"Modbus/TCP\"])\n# No.               Time                    Source               Destination           Protocol          Length     \n# Min.   :   2408   Min.   :  706.3   192.168.12.253:412604   192.168.12.253:412917   Modbus/TCP:825521   Min.   : 64.0  \n# 1st Qu.: 579452   1st Qu.: 3838.2   192.168.12.51 :401150   192.168.12.51 :401141   ARP       :     0   1st Qu.: 65.0  \n# Median : 921409   Median : 7648.8   192.168.12.90 : 11163   192.168.12.90 : 11159   BROWSER   :     0   Median : 66.0  \n# Mean   :1058519   Mean   : 7753.9   192.168.12.250:   300   192.168.12.250:   300   DCERPC    :     0   Mean   : 65.7  \n# 3rd Qu.:1149872   3rd Qu.:10759.7   192.168.50.50 :   300   192.168.12.80 :     4   DHCPv6    :     0   3rd Qu.: 66.0  \n# Max.   :3566858   Max.   :16616.4   192.168.12.80 :     4   192.168.100.2 :     0   DNS       :     0   Max.   :315.0  \n# (Other)       :     0   (Other)       :     0   (Other)   :     0                  \n# Info       \n# query: trans:     0; unit:   1, func:   4: Read input registers:  1568  \n# query: trans:   100; unit:   1, func:   4: Read input registers:  1568  \n# query: trans:   101; unit:   1, func:   4: Read input registers:  1568  \n# query: trans:   102; unit:   1, func:   4: Read input registers:  1568  \n# query: trans:   103; unit:   1, func:   4: Read input registers:  1568  \n# query: trans:   104; unit:   1, func:   4: Read input registers:  1568  \n# (Other)                                                          :816113  \n\n# Number of Modbus/TCP packets per Source\nscadaDT[Protocol==\"Modbus/TCP\", .(Count=.N), by=.(Source, Protocol)]\n# > scadaDT[Protocol==\"Modbus/TCP\", .(Count=.N), by=.(Source, Protocol)]\n#            Source   Protocol  Count\n# 1: 192.168.12.253 Modbus/TCP 412604\n# 2:  192.168.12.51 Modbus/TCP 401150\n# 3:  192.168.12.90 Modbus/TCP  11163\n# 4: 192.168.12.250 Modbus/TCP    300\n# 5:  192.168.50.50 Modbus/TCP    300\n# 6:  192.168.12.80 Modbus/TCP      4\n\n# Number of Modbus/TCP packets per destination\nscadaDT[Protocol==\"Modbus/TCP\", .(Count=.N), by=.(Destination, Protocol)]\n# > scadaDT[Protocol==\"Modbus/TCP\", .(Count=.N), by=.(Destination,Protocol)]\n#       Destination   Protocol  Count\n# 1: 192.168.12.250 Modbus/TCP    300\n# 2: 192.168.12.253 Modbus/TCP 412917\n# 3:  192.168.12.51 Modbus/TCP 401141\n# 4:  192.168.12.80 Modbus/TCP      4\n# 5:  192.168.12.90 Modbus/TCP  11159\n\n\nsummary(scadaDT[Protocol==\"Modbus/TCP\"]$Length)\n# > summary(scadaDT[Protocol==\"Modbus/TCP\"]$Length)\n# Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n# 64.0    65.0    66.0    65.7    66.0   315.0\n\nscadaDT[,(plot(Protocol,main=\"Number of Packets by Protocol\", xlab=\"Protocol\", ylab=\"Frequency\"))]\n\n# boxplots\nrequire(lattice)\nplot.new()\nboxLatModbusLengthSource <- \n  bwplot(~Length | Source, data=scadaDT[Protocol==\"Modbus/TCP\"], as.table=TRUE,\n         scales=\"free\", main=\"Boxplot of Modbus/TCP Packet Lengths by Source\",\n         xlab=\"Packet Length\", layout=c(2,3))\nprint(boxLatModbusLengthSource, more=TRUE)\nrm(boxLatModbusLengthSource)\n\nplot.new()\nboxLatModbusLengthDestination <- \n  bwplot(~Length | Destination, data=scadaDT[Protocol==\"Modbus/TCP\"], as.table=TRUE,\n         scales=\"free\", main=\"Boxplot of Modbus/TCP Packet Lengths by Destination\",\n         xlab=\"Packet Length\", layout=c(2,3))\nprint(boxLatModbusLengthDestination, more=TRUE)\nrm(boxLatModbusLengthDestination)\n\nplot.new()\nboxLatLengthProtocol <- \n  bwplot(~Length | Protocol, data=scadaDT, as.table=TRUE,\n         scales=\"free\", main=\"Boxplots Packet Lengths by Protocol\",\n         xlab=\"bytes\", layout=c(4,7))\nprint(boxLatLengthProtocol, more=TRUE)\nrm(boxLatLengthProtocol)\n\n# Pie charts\nnewplot()\nsetkey(scadaDT, Protocol, Source)\np = ggplot(\n  count(scadaDT[.(\"Modbus/TCP\")], vars=\"Source\"),\n  aes(x=\"\", y=freq, fill=Source))\np = p + geom_bar(width=1, stat=\"identity\")\np = p + coord_polar(theta=\"y\")\np = p + xlab('') + ylab('')\np = p + ggtitle(\"Modbus/TCP Packets by Source\")\np\nrm(p)\n\nnewplot()\nsetkey(scadaDT, Protocol, Destination)\np = ggplot(\n  count(scadaDT[.(\"Modbus/TCP\")], vars=\"Destination\"),\n  aes(x=\"\", y=freq, fill=Destination))\np = p + geom_bar(width=1, stat=\"identity\")\np = p + coord_polar(theta=\"y\")\np = p + xlab('') + ylab('')\np = p + ggtitle(\"Modbus/TCP Packets by Destination\")\np\nrm(p)\n\nrm(scadaDT)\n\n\n\n#### Read in data - TCP Endpoints pcap file ####\nscadaEndPtsDT <- as.data.table(read.csv(\"~/Bureau/data/scadaCops/SCADA_Security_042915_TCP_Endpoints.csv\"))\n\nsetkey(scadaEndPtsDT, Address, Port)\nstr(scadaEndPtsDT)\n# > str(scadaEndPtsDT)\n# Classes ‘data.table’ and 'data.frame':  70220 obs. of  10 variables:\n#   $ Address   : Factor w/ 11 levels \"192.168.12.128\",..: 1 1 1 1 1 1 1 1 1 1 ...\n# $ Port      : int  21 22 23 25 42 49 69 80 81 102 ...\n# $ Packets   : int  510 27 27 27 27 27 27 27 27 2 ...\n# $ Bytes     : int  30260 1602 1602 1602 1602 1602 1602 1602 1602 128 ...\n# $ Tx.Packets: int  170 9 9 9 9 9 9 9 9 1 ...\n# $ Tx.Bytes  : int  9180 486 486 486 486 486 486 486 486 54 ...\n# $ Rx.Packets: int  340 18 18 18 18 18 18 18 18 1 ...\n# $ Rx.Bytes  : int  21080 1116 1116 1116 1116 1116 1116 1116 1116 74 ...\n# $ Latitude  : Factor w/ 1 level \"-\": 1 1 1 1 1 1 1 1 1 1 ...\n# $ Longitude : Factor w/ 1 level \"-\": 1 1 1 1 1 1 1 1 1 1 ...\n# - attr(*, \".internal.selfref\")=<externalptr> \n#   - attr(*, \"sorted\")= chr  \"Address\" \"Port\"\n\nsummary(scadaEndPtsDT)\n# > summary(scadaEndPtsDT)\n# Address           Port          Packets            Bytes            Tx.Packets        Tx.Bytes       \n# 192.168.12.51 :65536   Min.   :    0   Min.   :      1   Min.   :6.20e+01   Min.   :     0   Min.   :       0  \n# 192.168.50.50 : 2996   1st Qu.:12970   1st Qu.:     22   1st Qu.:1.19e+03   1st Qu.:    22   1st Qu.:    1188  \n# 192.168.12.250: 1361   Median :30472   Median :     22   Median :1.19e+03   Median :    22   Median :    1188  \n# 192.168.12.128:  286   Mean   :30795   Mean   :     80   Mean   :5.18e+03   Mean   :    40   Mean   :    2590  \n# 192.168.12.80 :   14   3rd Qu.:48004   3rd Qu.:     22   3rd Qu.:1.19e+03   3rd Qu.:    22   3rd Qu.:    1188  \n# 83.133.119.197:   14   Max.   :65535   Max.   :2295012   Max.   :1.34e+08   Max.   :412780   Max.   :26981315  \n# (Other)       :   13                                                                                           \n# Rx.Packets         Rx.Bytes        Latitude  Longitude\n# Min.   :      0   Min.   :0.00e+00   -:70220   -:70220  \n# 1st Qu.:      0   1st Qu.:0.00e+00                      \n# Median :      0   Median :0.00e+00                      \n# Mean   :     40   Mean   :2.59e+03                      \n# 3rd Qu.:      0   3rd Qu.:0.00e+00                      \n# Max.   :1882232   Max.   :1.07e+08 \n\nscadaEndPtsDT[,.(NumberOfPorts=(.N)), by=Address]\n# > scadaEndPtsDT[,.(NumberOfPorts=(.N)), by=Address]\n#           Address NumberOfPorts\n# 1: 192.168.12.128           286\n# 2: 192.168.12.250          1361\n# 3: 192.168.12.252             1\n# 4: 192.168.12.253             2\n# 5:  192.168.12.51         65536\n# 6:  192.168.12.80            14\n# 7:  192.168.12.90             7\n# 8:  192.168.50.11             2\n# 9:  192.168.50.18             1\n# 10:  192.168.50.50          2996\n# 11: 83.133.119.197            14\n\nqplot(scadaEndPtsDT[,Address], geom=\"histogram\", binwidth = 0.5, main = \"Number of Ports Per Address\",\n      xlab = \"Address\", ylab = \"Number of Ports\", fill = I(\"blue\"), alpha = I(\".2\"), col = I(\"red\")) +\n      theme(axis.text.x = element_text(angle=90))\n\nsetkey(scadaEndPtsDT, Address, Port, Packets)\nscadaEndPtsDT[.(Address, Port, Packets), .(TotalPackets=sum(Packets)), by = .(Address)]\n# > scadaEndPtsDT[.(Address, Port, Packets), .(TotalPackets=sum(Packets)), by = .(Address)]\n#           Address TotalPackets\n# 1: 192.168.12.128        22242\n# 2: 192.168.12.250        17765\n# 3: 192.168.12.252       420388\n# 4: 192.168.12.253      2295016\n# 5:  192.168.12.51      2684264\n# 6:  192.168.12.80           82\n# 7:  192.168.12.90        33513\n# 8:  192.168.50.11         2281\n# 9:  192.168.50.18         1080\n# 10:  192.168.50.50        75840\n# 11: 83.133.119.197        67675\n\n# Bar plots\n# bp <- ggplot(scadaEndPtsDT[,Address, by=Packets], aes(x=Address, y=Packets, fill=Address)) + geom_bar(stat=\"identity\") +\n#   scale_fill_brewer(palette=\"Setl\")\n# bp  + ggtitle(\"Number of Packets Per Address\")\n# rm(bp)\n\nhp <- ggplot(scadaEndPtsDT[,Address, by=Packets], aes(x=Address, y=Packets/1e3, fill=Address)) + geom_bar(stat=\"identity\")\n  + scale_fill_brewer(palette=1)\nhp <- hp + ggtitle(\"Number of Packets Per Address\") + ylab(\"Packets (x 1e3)\")\nhp + theme(axis.text.x = element_text(angle=90), legend.position=\"none\")\nrm(hp)\n\nsetkey(scadaEndPtsDT, Address, Port, Bytes)\nscadaEndPtsDT[.(Address, Port, Bytes), .(TotalBytes=sum(Bytes)), by = .(Address)]\n# > scadaEndPtsDT[.(Address, Port, Bytes), .(TotalBytes=sum(Bytes)), by = .(Address)]\n#           Address TotalBytes\n# 1: 192.168.12.128    7924237\n# 2: 192.168.12.250    5023679\n# 3: 192.168.12.252   30620524\n# 4: 192.168.12.253  133587888\n# 5:  192.168.12.51  162198756\n# 6:  192.168.12.80       4976\n# 7:  192.168.12.90    2191339\n# 8:  192.168.50.11    1160812\n# 9:  192.168.50.18     337679\n# 10:  192.168.50.50   11494014\n# 11: 83.133.119.197    9168886\n\n# bp <- ggplot(scadaEndPtsDT[,Address, by=Bytes], aes(x=Address, y=Bytes, fill=Address)) + geom_bar(stat=\"identity\") +\n#   scale_fill_brewer()\n# bp  + ggtitle(\"Number of Bytes Per Address\")\n# rm(bp)\n\nbp <- ggplot(scadaEndPtsDT[,Address, by=Bytes], aes(x=Address, y=Bytes/1e6, fill=Address)) + geom_bar(stat=\"identity\") +\n  scale_fill_brewer()\nbp <- bp  + ggtitle(\"Number of Bytes Per Address\") + ylab(\"MBytes\")\nbp +  theme(axis.text.x = element_text(angle=90), legend.position=\"none\")\nrm(bp)\n\nrm(scadaEndPtsDT)\n\n\n#### Read in data - TCP Endpoints pcap file ####\n#scadaTCPConvDT <- as.data.table(read.csv(\"~/Bureau/data/scadaCops/SCADA_Security_042915_TCP_Conversations.csv\"))\nscadaTCPConvDT <- as.data.table(read.csv(\"~/Bureau/data/scadaCops/SCADA_Security_042915_TCP_Conversations.csv\", header=TRUE,\n                                         na.strings=\"NA\", quote=\"\\\"\", dec=\",\", colClass=c(Port.A=\"factor\", Port.B=\"factor\")))\n\n\nstr(scadaTCPConvDT)\n# > str(scadaTCPConvDT)\n# Classes ‘data.table’ and 'data.frame':  76485 obs. of  14 variables:\n# $ Address.A    : Factor w/ 8 levels \"192.168.12.128\",..: 8 8 8 8 8 8 8 4 8 8 ...\n# $ Port.A       : Factor w/ 65034 levels \"1000\",\"10000\",..: 20758 20758 20758 20758 20758 20758 20758 11221 20758 20758 ...\n# $ Address.B    : Factor w/ 9 levels \"192.168.12.128\",..: 8 8 8 8 8 8 8 3 8 8 ...\n# $ Port.B       : Factor w/ 2009 levels \"0\",\"1\",\"10\",\"100\",..: 9 9 9 9 9 10 10 7 10 10 ...\n# $ Packets      : int  6 6 6 6 6 6 6 45 6 6 ...\n# $ Bytes        : int  372 372 372 372 372 372 372 2430 372 372 ...\n# $ Packets.A.B  : int  0 0 0 0 0 0 0 23 0 0 ...\n# $ Bytes.A.B    : int  0 0 0 0 0 0 0 1242 0 0 ...\n# $ Packets.A.B.1: int  6 6 6 6 6 6 6 22 6 6 ...\n# $ Bytes.A.B.1  : int  372 372 372 372 372 372 372 1188 372 372 ...\n# $ Rel.Start    : num  1.76 2.72 3.7 4.8 5.89 ...\n# $ Duration     : num  0.96 0.983 1.092 1.094 0.983 ...\n# $ bps.A.B      : num  NA NA NA NA NA ...\n# $ bps.A.B.1    : num  3099 3026 2724 2721 3028 ...\n# - attr(*, \".internal.selfref\")=<externalptr> \n\nsummary(scadaTCPConvDT)\n# > summary(scadaTCPConvDT)\n# Address.A         Port.A               Address.B         Port.B         Packets             Bytes           Packets.A.B          Bytes.A.B       \n# 192.168.12.51 :65495   2887   : 2170   192.168.12.253:65087   502    :65527   Min.   :     1.0   Min.   :      62   Min.   :     0.00   Min.   :       0  \n# 192.168.50.50 : 5906   502    :  503   83.133.119.197: 5498   2887   : 5494   1st Qu.:    21.0   1st Qu.:    1134   1st Qu.:    21.00   1st Qu.:    1134  \n# 192.168.12.128: 2159   14846  :  135   192.168.50.50 : 3159   21     :  133   Median :    22.0   Median :    1188   Median :    22.00   Median :    1188  \n# 83.133.119.197: 2107   15810  :   75   192.168.12.250: 1505   443    :  108   Mean   :    36.7   Mean   :    2378   Mean   :    27.22   Mean   :    1674  \n# 192.168.12.253:  502   20589  :   75   192.168.12.128:  556   139    :   74   3rd Qu.:    22.0   3rd Qu.:    1188   3rd Qu.:    22.00   3rd Qu.:    1188  \n# 192.168.12.250:  295   3695   :   62   192.168.12.51 :  535   445    :   49   Max.   :476770.0   Max.   :31071169   Max.   :245207.00   Max.   :16019750  \n# (Other)       :   21   (Other):73465   (Other)       :  145   (Other): 5100                                                                               \n# Packets.A.B.1        Bytes.A.B.1         Rel.Start            Duration          bps.A.B          bps.A.B.1        \n# Min.   :     0.00   Min.   :       0   Min.   :    1.759   Min.   :    0.0   Min.   :      1   Min.   :      0.2  \n# 1st Qu.:     0.00   1st Qu.:       0   1st Qu.:13967.350   1st Qu.:  131.8   1st Qu.:     72   1st Qu.:   1397.2  \n# Median :     0.00   Median :       0   Median :13969.123   Median :  131.9   Median :     72   Median :   1571.4  \n# Mean   :     9.53   Mean   :     703   Mean   :12981.764   Mean   :  114.5   Mean   :   1691   Mean   :  15064.7  \n# 3rd Qu.:     0.00   3rd Qu.:       0   3rd Qu.:13970.987   3rd Qu.:  131.9   3rd Qu.:     72   3rd Qu.:   2724.6  \n# Max.   :235628.00   Max.   :15800911   Max.   :16616.189   Max.   :15558.1   Max.   :5604520   Max.   :2708835.0  \n# NA's   :3685      NA's   :70984  \n\n# Scatter plots\n# xyp <- ggplot(scadaTCPConvDT, aes(x=Rel.Start, y=Port.A)) + geom_point(shape=1)\n# xyp + facet_grid(. ~ Address.A)\n\n# Scatter plots\nxyp <- ggplot(scadaTCPConvDT, aes(x=Rel.Start, y=Port.A)) + geom_point(shape=1, col=\"red\", alpha=0.5)\nxyp <- xyp + facet_wrap( ~ Address.A, ncol=3, scales=\"free\")\nxyp <- xyp + theme(axis.ticks = element_blank(), axis.text.y = element_blank(),\n                   panel.border = element_rect(fill=NA, size=0.25), legend.position=\"none\")\nxyp <- xyp + labs(title=\"Scatter Plot of Source and Start Time by Address\", y=\"Source Port\", x=\"Start Time\")\nxyp\nrm(xyp)\n\nxyp <- ggplot(scadaTCPConvDT, aes(x=Rel.Start, y=Port.B)) + geom_point(shape=1, colour=\"blue\", alpha=0.5)\nxyp <- xyp + facet_wrap( ~ Address.B, ncol=3, scales=\"free\")\nxyp <- xyp + theme(axis.ticks = element_blank(), axis.text.y = element_blank(),\n                   panel.border = element_rect(fill=NA, size=0.25), legend.position=\"none\")\nxyp <- xyp + labs(title=\"Scatter Plot of Destination and Start Time by Address\", y=\"Destination Port\", x=\"Start Time\")\nxyp\nrm(xyp)\n\n\nbxp <- ggplot(scadaTCPConvDT, aes(Address.A, Duration))\nbxp + geom_boxplot()\n\nbxp <- ggplot(scadaTCPConvDT, aes(Port.A, Duration)) + geom_boxplot()\nbxp\n\n# bxp <- ggplot(scadaTCPConvDT, aes(Port.A, Duration)) +  geom_boxplot()\n# bxp <- bxp + facet_grid(. ~ Address.A)\n# bxp\n# \n# scadaTCPConvDT[,bwplot(Port.A~Duration | Address.A, main=\"Boxplot of Duration Size by Source Port/Address\",\n#                        scales = list(y=list(relation=\"free\")\n#                        ))]\n\n\n# old scatter plots\n# plot.new()\n# scadaTCPConvDT[,xyplot(Port.A~Rel.Start | Address.A, main=\"Scatter Plot of Source and Start Time by Address\",\n#                        xlab=\"Start Time\", ylab=\"Source Port\", layout=c(3,3), col=\"red\",\n#                        scales = list(y=list(relation=\"free\", tick.number=4, limits=c(0,60000))\n#                        ))]\n# \n# \n# plot.new()\n# scadaTCPConvDT[,xyplot(Port.B~Rel.Start | Address.B, main=\"Scatter Plot of Destination and Start Time by Address\",\n#                        xlab=\"Start Time\", ylab=\"Destination Port\", col=\"blue\", layout=c(3,3),\n#                        scales = list(y=list(relation=\"free\", tick.number=5, limits=c(0,2000))\n#                        ))]\n\n# Box plots\nplot.new()\nscadaTCPConvDT[,bwplot(~Bytes/1e6 | Address.A, main=\"Boxplot of Source and Packet Size by Address\",\n                       xlab=\"MBytes\", col=\"red\", layout=c(3,3), \n                       scales = list(y=list(relation=\"free\")\n                       ))]\n\nplot.new()\nscadaTCPConvDT[,bwplot(~Bytes/1e6 | Address.B, main=\"Boxplot of Destination and Packet Size by Address\",\n                       xlab=\"MBytes\", layout=c(3,3),\n                       scales = list(y=list(relation=\"free\")\n                       ))]\n\n\n## Histogram of number of packets by Destination/Source\nx <- scadaTCPConvDT[,Packets]\nbw <- diff(range(x)) / (2 * IQR(x) / length(x)^(1/3))\nhp <- ggplot(scadaTCPConvDT, aes(x=Packets)) + geom_histogram(binwidth=bw)\nhp <- hp + facet_grid(Address.B ~ Address.A, scales=\"free_y\")\nhp <- hp + ggtitle(\"Histogram of Packet per Destination/Source\") + ylab(\"Count\")\nhp + theme(axis.ticks.x = element_blank(), axis.text.x = element_blank(), strip.text.y = element_text(angle=0))\nrm(x, bw, hp)\n\n\n# qplot(scadaEndPtsDT[,Address], geom=\"histogram\", binwidth = 0.5, main = \"Number of Ports Per Address\",\n#       xlab = \"Address\", ylab = \"Number of Ports\", fill = I(\"blue\"), alpha = I(\".2\"), col = I(\"red\"))\n\nbreaks <- c(0, 1800, 3600, 5400, 7200, 9000, 10800, 12600, 14400, 16200, 18000, 19800)\n## all protocols\n# acast to convert Source to variables on y and Time on x\ntSource <- acast(scadaDT[, .(Count=.N),\n                 by=.(Time=cut(Time, breaks=breaks, labels=breaks[1:11]),\n                      Source)][order(Time, Source)]\n                     , Source~Time, value.var=\"Count\")\n\n# replace NA->0\ntSource[is.na(tSource)] <- 0\n\n# heatmap\ntSourceH <- heatmap(tSource, Rowv=NA, Colv=NA, margins=c(6,11), col=cm.colors(256),\n                       main=\"Heatmap of Packet Frequency by Source\",\n                       xlab=\"Start Time\", ylab=\"Source Address\")\n\n\n## Modbus\n# acast to convert Source to variables on y and Time on x\ntModSource <- acast( scadaDT[Protocol==\"Modbus/TCP\", .(Count=.N),\n                             by=.(Time=cut(Time, breaks=breaks[1:11], labels=breaks[1:10]),\n                                  Source)][order(Time, Source)]\n                     , Source~Time, value.var=\"Count\")\n# replace NA->0\ntModSource[is.na(tModSource)] <- 0\n\n# heatmap\nhmcol <- brewer.pal(11,\"GnBu\")\npar(cex.main=.8)\ntModSourceH <- heatmap(tModSource, Rowv=NA, Colv=NA, margins=c(5,8), col=hmcol, cexRow=1, cexCol=1,\n                       main=\"Heatmap of Modbus/TCP Packet Frequency by Source\", cellnote,\n                       xlab=\"Start Time\", ylab=\"Source Address\", scale=c(\"row\"))\n\n## Add Souce and Destination by concatenating address and port\n# paste(as.character(scadaTCPConvDT[,Address.A]), as.character(scadaTCPConvDT[,Port.A]), sep=\":\")\n# paste(as.character(scadaTCPConvDT[,Address.B]), as.character(scadaTCPConvDT[,Port.B]), sep=\":\")\nscadaTCPConvDT[,Source:=NULL][,Destination:=NULL]\nhead(scadaTCPConvDT[, PointA:= paste(as.character(Address.A), as.character(Port.A), sep=\":\")]\n     [, PointB:= paste(as.character(Address.B), as.character(Port.B), sep=\":\")])\n\n# PointA, PointB, Packets, Bytes, Duration\n# g <- graph.data.frame(scadaTCPConvDT[,.(PointA, PointB, Packets, Bytes, Duration)])\n# head(scadaTCPConvDT[,.(PointA, PointB, Packets, Bytes, Duration)])\nhead(scadaTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)])\n#g <- graph.data.frame(scadaTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)])\ng <- graph.data.frame(scadaTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)], directed=FALSE)\n# head(degree(g))\nV(g)$size = degree(g)\nplot.igraph(g)\n\n# adjacency mtx\ngAdjMtx <- get.adjacency(g)\ngAdj <- graph.adjacency(gAdjMtx, weighted=TRUE, mode=\"undirected\")\nV(gAdj)$size = degree(gAdj)*3  # node size by degree of centrality\nplot.igraph(gAdj, main=\"Graph of Network\", edge.width=E(gAdj)$weight/max(E(gAdj)$weight)*5)\n\neW <- ceiling(E(gAdj)$weight/max(E(gAdj)$weight)*50) # weighted edges\neW[eW>10] <- 10 \nplot.igraph(gAdj, main=\"Graph of SCADA Network\", edge.width=eW)\n\n\ntSource[is.na(tSource)] \n\nrm(breaks, tModSource, hmcol, tModSourceH, tSource, tSourceH)\n\n#### EXAMPLES\n\n# remove variables from DT\n# scadaTCPConvDT[,Source:=NULL][,Destination:=NULL]\n\n# array/faster\n#ptm <- proc.time() \n#proc.time() - ptm\n\n# df <- data.frame(\n#   group = c(\"Male\", \"Female\", \"Child\"),\n#   value = c(25, 25, 50)\n# )\n# \n# bp<- ggplot(df, aes(x=\"\", y=value, fill=group))+\n#   geom_bar(width = 1, stat = \"identity\")\n# bp\n\n# hp <- ggplot(scadaTCPConvDT[Address.A==\"83.133.119.197\", ], aes(y=Bytes/1e3, x=Packets)\n# ) + geom_histogram(stat=\"identity\", binwidth=2)\n# hp <- hp + facet_grid(. ~ Address.A)\n# hp <- hp + ylab(\"KBytes\") + ggtitle(\"Histogram of Bytes per Packet by Address\")\n# # hp <- hp + coord_cartesian(ylim=c(0, 800)) + \n# #   scale_y_continuous(breaks=seq(0, 800, 400))\n# hp\n\n# scadaDT[3:5,] # select rows 3-5\n# scadaDT[3:10, .(Source,Protocol)]\n\n# head(scadaDT[Protocol==\"Modbus/TCP\"])\n# (subset(scadaDT, Protocol==\"Modbus/TCP\"))\n\n# Pie Chart from data frame with Appended Sample Sizes\n# mytable <- table(iris$Species)\n# lbls <- paste(names(mytable), \"\\n\", mytable, sep=\"\")\n# pie(mytable, labels = lbls, \n#     main=\"Pie Chart of Species\\n (with sample sizes)\")\n# \n# \n# a <- rep(c(NA, 1/0:3), 10)\n# table(a)\n# table(a, exclude = NULL)\n# b <- factor(rep(c(\"A\",\"B\",\"C\"), 10))\n# table(b)\n# table(b, exclude = \"B\")\n# d <- factor(rep(c(\"A\",\"B\",\"C\"), 10), levels = c(\"A\",\"B\",\"C\",\"D\",\"E\"))\n# table(d, exclude = \"B\")\n# print(table(b, d), zero.print = \".\")",
    "created" : 1432130055537.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3195426525",
    "id" : "F95F1B64",
    "lastKnownWriteTime" : 1432719814,
    "path" : "~/rDia/scada.R",
    "project_path" : "scada.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}