,.(IP_SRC_MAC_ADDR = paste(ip.src, eth.src, sep="/"),
ip.src,
eth.src)]
sfunc <- attackModbusDT[,.(IP_SRC_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_SRC_MOD_FUNC, ip.src,
mbtcp.modbus.func_code)]
attackReqs <- attackModbusDT[mbtcp.modbus.reference_num != '']
sfuncRef <- attackReqs[,.(IP_SRC_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_SRC_MOD_FUNC_REF,
ip.src,
mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)][order(mbtcp.modbus.reference_num)]
srcs  <- unique(sewModbusDT, by=c("ip.src"))[,.(ip.src)]
# Destinations
dst <- unique(sewModbusDT, by=c("ip.dst"))[,.(ip.dst)]
# Destination / UnitID
du <- unique(sewModbusDT,
by=c("ip.dst",
"mbtcp.modbus.unit_id"))[
,.(IP_DST_MODBUS_UNIT_ID = paste(ip.dst,
mbtcp.modbus.unit_id, sep="/"),
ip.dst,
mbtcp.modbus.unit_id)]
# Source / MAC Address
smac <- unique(sewModbusDT,
by=c("ip.src", "eth.src"))[
,.(IP_SRC_MAC_ADDR = paste(ip.src, eth.src, sep="/"),
ip.src,
eth.src)]
# Source / Function Code
sfunc <- sewModbusDT[,.(IP_SRC_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_SRC_MOD_FUNC, ip.src,
mbtcp.modbus.func_code)]
#############################################################################################################
reqs <- sewModbusDT[mbtcp.modbus.reference_num != '']
resp <- sewModbusDT[is.na(mbtcp.modbus.reference_num)]
#############################################################################################################
# Source / Function Code
sfuncRef <- reqs[,.(IP_SRC_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_SRC_MOD_FUNC_REF,
ip.src,
mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)][order(mbtcp.modbus.reference_num)]
#rm(txt1, txt2, txt3, txt4, txt5, txt6, srcs, dst, du, smac, sfunc, sfuncRef, whitelist)
# Packet Analysis
# STATS
# Average frequency of packets per second
avgPkt <- sewModbusDT[,.(frequency=.N),by=frame.second][,mean(frequency)]
# Frequency per second, per source/dest ip and function code
srcFuncFreq <- sewModbusDT[,.(frequency=.N),
by =.(ip.src, ip.dst, mbtcp.modbus.func_code,
frame.second)][
order(ip.src, ip.dst, mbtcp.modbus.func_code,
frame.second)][,.(avgFrequencySec=mean(frequency)),
by=.(ip.src, ip.dst, mbtcp.modbus.func_code)]
# Frequency per second, per source/dest ip, function code, and reference num
srcFuncRefFreq <- reqs[,.(frequency=.N),
by =.(ip.src, ip.dst, mbtcp.modbus.func_code, mbtcp.modbus.reference_num,
frame.second)][
order(ip.src, ip.dst, mbtcp.modbus.func_code, mbtcp.modbus.reference_num,
frame.second)][,.(avgFrequncySec=mean(frequency)),
by=.(ip.src, ip.dst, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)]
attackModbusDT$frame.second <- floor(attackModbusDT$frame.time_relative)
attackSrcs  <- unique(attackModbusDT, by=c("ip.src"))[,.(ip.src)]
attackDst <- unique(attackModbusDT, by=c("ip.dst"))[,.(ip.dst)]
attackDu <- unique(attackModbusDT,
by=c("ip.dst",
"mbtcp.modbus.unit_id"))[
,.(IP_DST_MODBUS_UNIT_ID = paste(ip.dst,
mbtcp.modbus.unit_id, sep="/"),
ip.dst,
mbtcp.modbus.unit_id)]
attackSmac <- unique(attackModbusDT,
by=c("ip.src", "eth.src"))[
,.(IP_SRC_MAC_ADDR = paste(ip.src, eth.src, sep="/"),
ip.src,
eth.src)]
attackSfunc <- attackModbusDT[,.(IP_SRC_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_SRC_MOD_FUNC, ip.src,
mbtcp.modbus.func_code)]
#############################################################################################################
attackReqs <- attackModbusDT[mbtcp.modbus.reference_num != '']
attackResp <- attackModbusDT[is.na(mbtcp.modbus.reference_num)]
#############################################################################################################
attackSfuncRef <- attackReqs[,.(IP_SRC_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_SRC_MOD_FUNC_REF,
ip.src,
mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)][order(mbtcp.modbus.reference_num)]
avgAttackPkt <- attackModbusDT[,.(frequency=.N),by=frame.second][,mean(frequency)]
# Frequency per second, per source/dest ip and function code
attackSrcFuncFreq <- attackModbusDT[,.(frequency=.N),
by =.(ip.src, ip.dst, mbtcp.modbus.func_code,
frame.second)][
order(ip.src, ip.dst, mbtcp.modbus.func_code,
frame.second)][,.(avgFrequencySec=mean(frequency)),
by=.(ip.src, ip.dst, mbtcp.modbus.func_code)]
# Frequency per second, per source/dest ip, function code, and reference num
attackSrcFuncRefFreq <- attackReqs[,.(frequency=.N),
by =.(ip.src, ip.dst, mbtcp.modbus.func_code, mbtcp.modbus.reference_num,
frame.second)][
order(ip.src, ip.dst, mbtcp.modbus.func_code, mbtcp.modbus.reference_num,
frame.second)][,.(avgFrequncySec=mean(frequency)),
by=.(ip.src, ip.dst, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)]
View(attackSrcs)
View(srcs)
View(attackDst)
View(attackDu)
View(srcFuncRefFreq)
View(srcFuncFreq)
View(attackSrcFuncFreq)
View(srcFuncRefFreq)
View(attackSrcFuncRefFreq)
View(attackSrcFuncFreq)
View(attackReqs)
View(attackSfunc)
View(attackSfuncRef)
View(attackSfunc)
View(attackSmac)
View(attackSrcFuncFreq)
View(attackSrcFuncRefFreq)
View(attackSrcs)
?kable
require(knitr)
install.packages("knitr")
install.packages("knitr")
require(knitr)
library(knitr)
?kable
kable(head(iris), format = "latex")
View(sewModbusDT)
?kable
install.packages("xtable")
library(xtable)
requests<-sewModbusDT[tcp.dstport=="502"]
tab <- xtable(summary(requests))
summary(requests)
requests<-sewModbusDT[tcp.dstport=="502"]
summary(requests)
requests
sewModbusDT
req<-sewModbusDT[1]
req
req<-sewModbusDT[1:]
req<-sewModbusDT[1,]
req
req<-sewModbusDT[1:1000,]
req<-sewModbusDT[1:1000,][tcp.dstport=="502"]
req
req<-sewModbusDT[1:1000,]
View(req)
srcs
attackSrcs
subset(srcs, (ip.src %not in% attackSrcs$ip.src))
subset(srcs, (ip.src %in% attackSrcs$ip.src))
?c
str(srcs)
str(srcs$ip.src)
str(as.list(srcs$ip.src))
subset(srcs, (ip.src %in% as.list(attackSrcs$ip.src)))
setkey(srcs, ip.src)
require(data.table)
setkey(srcs, ip.src)
srcs(!attackSrcs)
srcs
srcs[!attackSrcs]
srcs
attackSrcs
setkey(attackSrcs, ip.src)
attackSrcs[srcs]
attackSrcs[!srcs]
badSrcs <- attackSrcs[!srcs]
badSrcs
datafile <- "~/scada/normal.data"
normalModbusDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=T,
colClass=c(ip.proto="factor", ip.version="factor", ip.src="factor",
ip.dst="factor", eth.src="factor", eth.dst="factor",
mbtcp.modbus.unit_id="factor",
tcp.srcport="factor", tcp.dstport="factor",
mbtcp.modbus.func_code="factor",
mbtcp.modbus.reference_num="factor",
mbtcp.prot_id="factor")))
normalModbusDT <- normalModbusDT[!(is.na(frame.number))]
normalModbusDT <- normalModbusDT[!(is.na(mbtcp.modbus.unit_id))]
normalModbusDT <- normalModbusDT[!(is.na(mbtcp.trans_id))]
normalModbusDT <- normalModbusDT[!(is.na(mbtcp.modbus.reference_num))]
save(normalModbusDT, file="normal.Rda")
load("notmsl.Rda")
normalModbusDT$frame.second <- floor(normalModbusDT$frame.time_relative)
srcs  <- unique(normalModbusDT, by=c("ip.src"))[,.(ip.src)]
dst <- unique(normalModbusDT, by=c("ip.dst"))[,.(ip.dst)]
du <- unique(normalModbusDT,
by=c("ip.dst",
"mbtcp.modbus.unit_id"))[
,.(IP_DST_MODBUS_UNIT_ID = paste(ip.dst,
mbtcp.modbus.unit_id, sep="/"),
ip.dst,
mbtcp.modbus.unit_id)]
smac <- unique(normalModbusDT,
by=c("ip.src", "eth.src"))[
,.(IP_SRC_MAC_ADDR = paste(ip.src, eth.src, sep="/"),
ip.src,
eth.src)]
sfunc <- normalModbusDT[,.(IP_SRC_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_SRC_MOD_FUNC, ip.src,
mbtcp.modbus.func_code)]
reqs <- normalModbusDT[mbtcp.modbus.reference_num != '']
resp <- normalModbusDT[is.na(mbtcp.modbus.reference_num)]
sfuncRef <- reqs[,.(IP_SRC_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_SRC_MOD_FUNC_REF,
ip.src,
mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)][order(mbtcp.modbus.reference_num)]
avgPkt <- normalModbusDT[,.(frequency=.N),by=frame.second][,mean(frequency)]
srcFuncFreq <- normalModbusDT[,.(frequency=.N),
by =.(ip.src, ip.dst, mbtcp.modbus.func_code,
frame.second)][
order(ip.src, ip.dst, mbtcp.modbus.func_code,
frame.second)][,.(avgFrequencySec=mean(frequency)),
by=.(ip.src, ip.dst, mbtcp.modbus.func_code)]
srcFuncRefFreq <- reqs[,.(frequency=.N),
by =.(ip.src, ip.dst, mbtcp.modbus.func_code, mbtcp.modbus.reference_num,
frame.second)][
order(ip.src, ip.dst, mbtcp.modbus.func_code, mbtcp.modbus.reference_num,
frame.second)][,.(avgFrequncySec=mean(frequency)),
by=.(ip.src, ip.dst, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)]
setkey(attackSrcs, ip.src)
badSrcs <- attackSrcs[!srcs]
badSrcs
setkey(attackSrcs, ip.src)
badDsts <- attackDst[!dst]
setkey(attackDst, ip.dst)
badDsts <- attackDst[!dst]
badDsts
setkey(attackDu, ip.dst, mbtcp.modbus.unit_id)
badDus <- attackDu[!du]
badDu
badDus
du
attackDu
setkey(attackDu, IP_DST_MODBUS_UNIT_ID)
badDus <- attackDu[!du]
badDus
setkey(attackSfunc, IP_SRC_MOD_FUNC)
badSmac <- attackSmac[!smac]
setkey(attackSmac, IP_SRC_MAC_ADDR)
badSmac <- attackSmac[!smac]
setkey(attackSfunc, IP_SRC_MOD_FUNC)
badSfunc <- attackSfunc[!sfunc]
badSfunc
badSfunc
sfunc
attackSfunc
setkey(attackSfuncRef, IP_SRC_MOD_FUNC_REF)
badSfuncRef <- attackSfuncRef[!sfuncRef]
badSfuncRef
attackSfuncRef
attackSfuncRef
attackAvgPkt <- attackModbusDT[,.(frequency=.N),by=frame.second][,mean(frequency)]
avgPkt
attackAvgPkt
avgPkt - attackAvgPkt
srcFuncFreq
srcFuncFreq
attackSrcFuncFreq
setkey(attackSrcFuncFreq, ip.src, ip.dst, mbtcp.modbus.func_code)
badSrcFuncFreq[!attackSrcFuncFreq]
badSrcFuncFreq <- attackSrcFuncFreq[!srcFuncFreq]]
badSrcFuncFreq <- attackSrcFuncFreq[!srcFuncFreq]
badSrcFuncFreq
?merge
attackSrcFuncFreq
srcFuncFreq
d1 <- data.table(a=rep(1:2,each=3), b=1:6, key="a,b")
d2 <- data.table(a=0:1, bb=10:11, key="a")
d3 <- data.table(a=0:1, key="a")
d4 <- data.table(a=0:1, b=0:1, key="a,b")
merge(d1, d4, by="a", suffixes=c(".d1", ".d4"))
d1
d2
d4
clear
d1
d4
merge(srcFuncFreq,attackSrcFuncFreq, by=.(ip.src,ip.dst,mbtcp.modbus.func_code,suffixes=c(".n", ".a")))
merge(srcFuncFreq,attackSrcFuncFreq, by=.(ip.src,ip.dst,mbtcp.modbus.func_code),suffixes=c(".n", ".a")))
merge(srcFuncFreq,attackSrcFuncFreq, by=.("ip.src,ip.dst","mbtcp.modbus.func_code"),suffixes=c(".n", ".a")))
merge(srcFuncFreq,attackSrcFuncFreq, by=.("ip.src,ip.dst","mbtcp.modbus.func_code"),suffixes=c(".n", ".a"))
merge(srcFuncFreq,attackSrcFuncFreq, by=c("ip.src,ip.dst","mbtcp.modbus.func_code"),suffixes=c(".n", ".a"))
merge(srcFuncFreq,attackSrcFuncFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code"),suffixes=c(".n", ".a"))
merge(srcFuncFreq,attackSrcFuncFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code"),suffixes=c(".n", ".a"))[avgFrequencySec.n-avgFrequencySec.a]
mergedSrcFuncFreq <- merge(srcFuncFreq,attackSrcFuncFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code"),suffixes=c(".n", ".a"))
mergedSrcFuncFreq
mergedSrcFuncFreq[avgFrequencySec.n - avgFrequencySec.a]
mergedSrcFuncFreq[avgFrequencySec.n - avgFrequencySec.a]
mergedSrcFuncFreq
mergedSrcFuncFreq[avgFrequencySec.n - avgFrequencySec.a,]
mergedSrcFuncFreq$avgFrequencySec.n - mergedSrcFuncFreq$avgFrequencySec.a
mergedSrcFuncFreq$avgFrequencySec.n - mergedSrcFuncFreq$avgFrequencySec.a
srcFuncRefFreq
attackSrcFuncRefFreq
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code"),suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq,
by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq[avgFrequencySec.n - avgFrequencySec.a,]
mergedSrcFuncRefFreq
mergedSrcFuncRefFreq[avgFrequencySec.n - avgFrequencySec.a,]
mergedSrcFuncRefFreq
mergedSrcFuncRefFreq$avgFrequncySec.n
srcFuncFreq
attackSrcFuncFreq
mergedSrcFuncRefFreq$avgFrequencySec.n - mergedSrcFuncFreq$avgFrequencySec.a
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq[avgFrequencySec.n - avgFrequencySec.a,]
mergedSrcFuncRefFreq
mergedSrcFuncRefFreq[avgFrequncySec.n - avgFrequncySec.a,]
mergedSrcFuncRefFreq$avgFrequencySec.n - mergedSrcFuncFreq$avgFrequencySec.a
mergedSrcFuncRefFreq$avgFrequencySec.n - mergedSrcFuncFreq$avgFrequencySec.a
mergedSrcFuncFreq[avgFrequencySec.n - avgFrequencySec.a,]
require(knitr)
require(data.table)
#install.packages("xtable")
require(xtable)
srcFuncRefFreq <- reqs[,.(frequency=.N),
by =.(ip.src, ip.dst, mbtcp.modbus.func_code, mbtcp.modbus.reference_num,
frame.second)][
order(ip.src, ip.dst, mbtcp.modbus.func_code, mbtcp.modbus.reference_num,
frame.second)][,.(avgFrequncySec=mean(frequency)),
by=.(ip.src, ip.dst, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)]
load("attack.Rda")
attackModbusDT$frame.second <- floor(attackModbusDT$frame.time_relative)
attackSrcFuncRefFreq
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq[avgFrequencySec.n - avgFrequencySec.a,]
attackSrcFuncRefFreq
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq[avgFrequencySec.n - avgFrequencySec.a,]
mergedSrcFuncRefFreq
mergedSrcFuncRefFreq[avgFrequncySec.n - avgFrequncySec.a,]
?print
tab <- xtable(attackSrcs[!srcs])
print(tab)
mergedSrcFuncRefFreq
mergedSrcFuncRefFreq$avgFrequncySec.n - mergedSrcFuncRefFreq$avgFrequncySec.a
?kable
kable(attackSrcs[!srcs], caption='Detected Sources')
setkey(attackSfuncRef, IP_SRC_MOD_FUNC_REF)
attackSfuncRef[!sfuncRef]
mergedSrcFuncRefFreq$avgFrequncySec.n - mergedSrcFuncRefFreq$avgFrequncySec.a
mergedSrcFuncRefFreq$avgFrequncySec.n - mergedSrcFuncRefFreq$avgFrequncySec.a
mergedSrcFuncRefFreq[avgFrequncySec,]
mergedSrcFuncRefFreq[avgFrequncySec.n,]
mergedSrcFuncRefFreq
mergedSrcFuncRefFreq[avgFrequncySec.n]
mergedSrcFuncRefFreq[avgFrequncySec.n,]
str(mergedSrcFuncRefFreq)
mergedSrcFuncRefFreq
kable(attackSfuncRef[!sfuncRef], caption='Anomalous Source / MODBUS Function Code / Reference Number')
kable(attackSfunc[!sfunc], caption='Anomalous Source / MODBUS Function Code Pairs')
smac
attackSmac
mergedSrcFuncFreq[avgFrequencySec.n - avgFrequencySec.a,]
kable(mergedSrcFuncFreq[avgFrequencySec.n - avgFrequencySec.a,])
attackSfuncRef[!sfuncRef]
kable(attackSfunc[!sfunc], caption='Anomalous Source / MODBUS Function Code Pairs')
kable(avgPkt - attackAvgPkt, caption='Difference in Packet Averages')
setkey(attackSrcs, ip.src)
kable(attackSrcs[!srcs], caption='Anomalous Sources', format='latex')
?print
?xtable
print(summary(reqs), floating.env="sidewaystable", comment=FALSE)
print(xtable(summary(reqs)), floating.env="sidewaystable", comment=FALSE)
str(reqs)
reqs[,1:11]
reqs[1:11]
reqs[1:11,]
reqs[,1]
reqs[,.(1)]
reqs[,.(frame.number)]
summary(reqs)[,.(frame.number)]
summary(reqs)
str(summary(reqs))
?table
as.data.table(summary(reqs))
as.data.table(summary(reqs))[,.(V1)]
as.data.table(summary(reqs))[,.(V2)]
as.data.table(summary(reqs))[,.(V2,V3)]
str(summary(reqs))
reqs
summary(reqs)
rdt<-as.data.table(summary(reqs))
rdt
rdf<-as.data.frame(summary(reqs))
rdf
summary(reqs)
str(summary(reqs))
?table
summary(reqs)[c(,1:10)]
summary(reqs)[c(1,1:10)]
summary(reqs)[c(1:,1:10)]
summary(reqs)[c(1:10,1:10)]
summary(reqs)[c(1:nrow(reqs),1:10)]
nrow(summary(reqs))
summary(reqs)
summary(reqs)[c(1:7,1:10)]
summary(reqs)[c(0:7,1:10)]
summary(reqs)
tab<-summary(reqs)[c(1:7,1:10)]
xtable(tab)
tab<-as.table(summary(reqs)[c(1:7,1:10)])
tab<-as.matrix(summary(reqs)[c(1:7,1:10)])
tab
?as.matrix
tab<-as.matrix(summary(reqs)[c(1:7,1:10)], nrow=7, ncol=10)
tab
print(xtable(tab))
summary(reqs)
reqs
reqs[,1:10]
reqs[,.(frame.number)]
reqs[,.(frame.number, frame.time_relative, frame.time_delta, frame.len,ip.proto)]
reqs[,.(frame.number, frame.time_relative, frame.time_delta, frame.len,ip.proto, ip.version,ip.src,etch.src,ip.dst,eth.dst)]
reqs[,.(frame.number, frame.time_relative, frame.time_delta, frame.len,ip.proto, ip.version,ip.src,eth.src,ip.dst,eth.dst)]
summary(reqs[,.(frame.number, frame.time_relative, frame.time_delta, frame.len,ip.proto, ip.version,ip.src,eth.src,ip.dst,eth.dst)])
?kable
View(requests)
requests<-sewModbusDT[tcp.dstport=="502"]
View(requests)
summary(responses)
responses
responses<-sewModbusDT[tcp.srcport=="502"]
requests<-sewModbusDT[tcp.dstport=="502"]
req5<-summary(requests[,.(mbtcp.modbus.data, frame.second)])
rep5<-summary(responses[,.(mbtcp.modbus.data, frame.second)])
req5<-summary(requests[,.(mbtcp.modbus.data, frame.second)])
req5
req5<-summary(requests[,.(mbtcp.modbus.data, frame.second)])
req5
save(attackModbusDT, file="attack.Rda")
View(sewModbusDT)
save(sewModbusDT, file="sew.Rda")
mergedSewDT
load("/home/lisa/rDia/sewMerged.Rda")
summary(mergedSewDT)
rep1<-summary(mergedSewDT[,.(frame.number, frame.time_relative, frame.time_delta, frame.len)])
rep1
rep2<-summary(mergedSewDT[,.(ip.src, eth.src, ip.dst, eth.dst)])
rep3<-summary(mergedSewDT[,.(mbtcp.modbus.unit_id, tcp.srcport, tcp.dstport)])
rep4<-summary(mergedSewDT[,.(mbtcp.prot_id, mbtcp.trans_id, mbtcp.len, mbtcp.modbus.func_code, )])
rep5<-summary(mergedSewDT[,.(mbtcp.modbus.word_cnt, frame.second, mbtcp.modbus.reference_num)])
normalModbusDT
save(normalModbusDT, file="normal.Rda")
attackModbusD
attackModbusDT
save(attackModbusDT, file="attack.Rda")
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),suffixes=c(".n", ".a"))
kable(mergedSrcFuncRefFreq$avgFrequncySec.n - mergedSrcFuncRefFreq$avgFrequncySec.a, caption='Differences in Frequency \nof Source/Function Code/Reference Number')
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq
mergedSrcFuncRefFreq$avgFrequencySec.diff <- mergedSrcFuncRefFreq$avgFrequncySec.n - mergedSrcFuncRefFreq$avgFrequncySec.a
kable(mergedSrcFuncRefFreq, caption='Differences in Frequency \nof Source/Function Code/Reference Number')
mergedSrcFuncFreq <- merge(srcFuncFreq,attackSrcFuncFreq,
by=c("ip.src","ip.dst","mbtcp.modbus.func_code"),
suffixes=c(".n", ".a"))
mergedSrcFuncFreq
mergedSrcFuncFreq$avgFrequencySec.diff <- mergedSrcFuncFreq$avgFrequncySec.n - mergedSrcFuncFreq$avgFrequncySec.a
mergedSrcFuncFreq$avgFrequencySec.n - mergedSrcFuncFreq$avgFrequencySec.a
mergedSrcFuncFreq$avgFrequencySec.diff <- mergedSrcFuncFreq$avgFrequencySec.n - mergedSrcFuncFreq$avgFrequencySec.a
kable(mergedSrcFuncFreq, caption='Differences in Frequency \nof Source/Function Code')
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq,
by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),
suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq$avgFrequencySec.diff <- mergedSrcFuncRefFreq$avgFrequncySec.n - mergedSrcFuncRefFreq$avgFrequncySec.a
kable(mergedSrcFuncRefFreq, caption='Differences in Frequency \nof Source/Function Code/Reference Number')
m1 <- mergedSrcFuncRefFreq[,.(ip.src, ip.dst, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)]
mergedSrcFuncRefFreq
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq,
by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),
suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq,
by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),
suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq,
by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),
suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq$avgFrequencySec.diff <- mergedSrcFuncRefFreq$avgFrequncySec.n - mergedSrcFuncRefFreq$avgFrequncySec.a
mergeSrcFuncRefFreq
mergedSrcFuncRefFreq
m3 <- mergedSrcFuncRefFreq[,.(ip.src, ip.dst, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)]
kable(m3, caption='Differences in Frequency \nof Source/Function Code/Reference Number')
m4 <- mergedSrcFuncRefFreq[,.(avgFrequencySec.n, avgFrequencySec.a, avgFrequencySec.diff)]
m4 <- mergedSrcFuncRefFreq[,.(avgFrequncySec.n avgFrequncySec.a avgFrequencySec.diff)]
m4 <- mergedSrcFuncRefFreq[,.(avgFrequncySec.n, avgFrequncySec.a, avgFrequencySec.diff)]
kable(m4, caption=NULL)
