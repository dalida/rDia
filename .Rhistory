bp <- ggplot(scadaEndPtsDT[,Address, by=Bytes], aes(x=Address, y=Bytes/1e6, fill=Address)) + geom_bar(stat="identity") +
scale_fill_brewer()
bp <- bp  + ggtitle("Number of Bytes Per Address") + ylab("MBytes")
bp +  theme(axis.text.x = element_text(angle=90), legend.position="none")
rm(bp)
bp <- ggplot(scadaEndPtsDT[,Address, by=Packets], aes(x=Address, y=Packets/1e6, fill=Address)) + geom_bar(stat="identity")
+ scale_fill_brewer(palette="Setl")
bp <- bp + ggtitle("Number of Packets Per Address") + ylab("Packets (x 1e6)")
bp + theme(axis.text.x = element_text(angle=90), legend.position="none")
bp <- ggplot(scadaEndPtsDT[,Address, by=Packets], aes(x=Address, y=Packets/1e6, fill=Address)) + geom_bar(stat="identity")
+ scale_fill_brewer(palette="Greens")
bp <- bp + ggtitle("Number of Packets Per Address") + ylab("Packets (x 1e6)")
bp + theme(axis.text.x = element_text(angle=90), legend.position="none")
rm(bp)
bp <- ggplot(scadaEndPtsDT[,Address, by=Packets], aes(x=Address, y=Packets/1e6, fill=Address)) + geom_bar(stat="identity")
+ scale_fill_brewer(palette="Greens")
bp <- bp + ggtitle("Number of Packets Per Address") + ylab("Packets (x 1e6)")
bp + theme(axis.text.x = element_text(angle=90), legend.position="none")
scadaDT[,(plot(Protocol, main="Number of Packets by Protocol", xlab="Protocol", ylab="Frequency"))]
boxplot(scadaDT[Protocol=="UDP"]$Length, main="Boxplot of Length for ARP Packets", ylab="bytes")
boxplot(scadaDT[Protocol=="ARP"]$Length, main="Boxplot of Length for ARP Packets", ylab="bytes")
boxplot(scadaDT[Protocol=="TCP"]$Length, main="Boxplot of Length for TCP Packets", ylab="bytes")
x <- scadaDT[Protocol=="TCP", .(Count=.N) ,by=Packets]
x <- scadaDT[Protocol=="TCP", .(Count=.N) ,by=Destination]
x
bw <- diff(range(x)) / (2 * IQR(x) / length(x)^(1/3))
hp <- ggplot(scadaDT, aes(x=Destination, )) + geom_histogram()
hp <- hp + facet_grid(. ~ Destination, scales="free_y")
hp <- hp + ggtitle("Histogram of Packets by Destination")
hp
hp <- ggplot(scadaDT, aes(x=Destination, )) + geom_histogram()
hp
rm(x, bw, hp)
hp <- ggplot(scadaDT, aes(x=Destination, )) + geom_histogram()
hp <- hp + ggtitle("Histogram of Packets by Destination")
hp
rm(x, bw, hp)
hp <- ggplot(scadaDT, aes(x=Destination, )) + geom_histogram()
hp <- hp + ggtitle("Histogram of Packets by Destination") + ylab("Count")
hp + theme(axis.text.x = element_text(angle=90)
)
hp <- ggplot(scadaDT, aes(x=Source)) + geom_histogram()
hp <- hp + ggtitle("Histogram of Packets by Source") + ylab("Count")
hp + theme(axis.text.x = element_text(angle=90))
rm(hp)
hp <- ggplot(scadaDT, aes(x=Destination)) + geom_histogram()
hp <- hp + ggtitle("Histogram of Packets by Destination") + ylab("Count")
hp + theme(axis.text.x = element_text(angle=90))
rm(hp)
rm(breaks, tModSorce, hmcol, tModSourceH, tSource, tSourceH)
rm(breaks, tModSource, hmcol, tModSourceH, tSource, tSourceH)
rm(tmp)
rm(xyp)
rm(bp)
head(scadaDT[.(Length>0, Protocol=="Modbus/TCP")])
scadaDT[,(plot(Protocol,main="Number of Packets by Protocol", xlab="Protocol", ylab="Frequency"))]
scadaDT[Protocol=="Modbus/TCP",
plot(x=Length, y=Source)]
plot.new()
boxLatModbusLengthSource <-
bwplot(~Length | Source, data=scadaDT[Protocol=="Modbus/TCP"], as.table=TRUE,
scales="free", main="Boxplot of Modbus/TCP Packet Lengths by Source",
xlab="Packet Length", layout=c(2,3))
print(boxLatModbusLengthSource, more=TRUE)
rm(boxLatModbusLengthSource)
plot.new()
boxLatModbusLengthSource <-
bwplot(~Length | Source, data=scadaDT[Protocol=="Modbus/TCP"], as.table=TRUE,
scales="free", main="Boxplot of Modbus/TCP Packet Lengths by Source",
xlab="Packet Length", layout=c(2,3))
print(boxLatModbusLengthSource, more=TRUE)
rm(boxLatModbusLengthSource)
plot.new()
boxLatModbusLengthDestination <-
bwplot(~Length | Destination, data=scadaDT[Protocol=="Modbus/TCP"], as.table=TRUE,
scales="free", main="Boxplot of Modbus/TCP Packet Lengths by Destination",
xlab="Packet Length", layout=c(2,3))
print(boxLatModbusLengthDestination, more=TRUE)
rm(boxLatModbusLengthDestination)
plot.new()
boxLatLengthProtocol <-
bwplot(~Length | Protocol, data=scadaDT, as.table=TRUE,
scales="free", main="Boxplots Packet Lengths by Protocol",
xlab="bytes", layout=c(4,7))
print(boxLatLengthProtocol, more=TRUE)
rm(boxLatLengthProtocol)
?qplot
qplot(scadaEndPtsDT[,Address], geom="histogram", binwidth = 0.5, main = "Number of Ports Per Address",
xlab = "Address", ylab = "Number of Ports", fill = I("blue"), alpha = I(".2"), col = I("red"),
axis.text.x = element_text(angle=90))
qplot(scadaEndPtsDT[,Address], geom="histogram", binwidth = 0.5, main = "Number of Ports Per Address",
xlab = "Address", ylab = "Number of Ports", fill = I("blue"), alpha = I(".2"), col = I("red"),
axis.text.x = angle=90)
qplot(scadaEndPtsDT[,Address], geom="histogram", binwidth = 0.5, main = "Number of Ports Per Address",
xlab = "Address", ylab = "Number of Ports", fill = I("blue"), alpha = I(".2"), col = I("red"),
axis.text.x = angle.90)
qplot(scadaEndPtsDT[,Address], geom="histogram", binwidth = 0.5, main = "Number of Ports Per Address",
xlab = "Address", ylab = "Number of Ports", fill = I("blue"), alpha = I(".2"), col = I("red"),
axis.text.x = angle.90.text)
qplot(scadaEndPtsDT[,Address], geom="histogram", binwidth = 0.5, main = "Number of Ports Per Address",
xlab = "Address", ylab = "Number of Ports", fill = I("blue"), alpha = I(".2"), col = I("red"),
axis.text.x = element_text(angle=90))
qplot(scadaEndPtsDT[,Address], geom="histogram", binwidth = 0.5, main = "Number of Ports Per Address",
xlab = "Address", ylab = "Number of Ports", fill = I("blue"), alpha = I(".2"), col = I("red")) +
theme(axis.text.x = element_text(angle=90))
bp <- ggplot(scadaEndPtsDT[,Address, by=Packets], aes(x=Address, y=Packets/1e6, fill=Address)) + geom_bar(stat="identity")
+ scale_fill_brewer(palette="Setl")
bp <- bp + ggtitle("Number of Packets Per Address") + ylab("Packets (x 1e6)")
bp + theme(axis.text.x = element_text(angle=90), legend.position="none")
rm(bp)
bp <- ggplot(scadaEndPtsDT[,Address, by=Bytes], aes(x=Address, y=Bytes/1e6, fill=Address)) + geom_bar(stat="identity") +
scale_fill_brewer()
bp <- bp  + ggtitle("Number of Bytes Per Address") + ylab("MBytes")
bp +  theme(axis.text.x = element_text(angle=90), legend.position="none")
rm(bp)
hp <- ggplot(scadaEndPtsDT[,Address, by=Packets], aes(x=Address, y=Packets/1e3, fill=Address)) + geom_bar(stat="identity")
+ scale_fill_brewer(palette="Setl")
hp <- bp + ggtitle("Number of Packets Per Address") + ylab("Packets (x 1e3)")
hp + theme(axis.text.x = element_text(angle=90), legend.position="none")
rm(hp)
hp <- ggplot(scadaEndPtsDT[,Address, by=Packets], aes(x=Address, y=Packets/1e3, fill=Address)) + geom_bar(stat="identity")
+ scale_fill_brewer(palette="Setl")
hp <- bp + ggtitle("Number of Packets Per Address") + ylab("Packets (x 1e3)")
hp + theme(axis.text.x = element_text(angle=90), legend.position="none")
rm(hp)
hp <- ggplot(scadaEndPtsDT[,Address, by=Packets], aes(x=Address, y=Packets/1e3, fill=Address)) + geom_bar(stat="identity")
+ scale_fill_brewer(palette="Setl")
hp <- hp + ggtitle("Number of Packets Per Address") + ylab("Packets (x 1e3)")
hp + theme(axis.text.x = element_text(angle=90), legend.position="none")
rm(hp)
hp <- ggplot(scadaEndPtsDT[,Address, by=Packets], aes(x=Address, y=Packets/1e3, fill=Address)) + geom_bar(stat="identity")
+ scale_fill_brewer(palette=1)
hp <- hp + ggtitle("Number of Packets Per Address") + ylab("Packets (x 1e3)")
hp + theme(axis.text.x = element_text(angle=90), legend.position="none")
rm(hp)
scadaTCPConvDT[,bwplot(~Bytes/1e6 | Address.A, main="Boxplot of Source and Packet Size by Address",
xlab="MBytes", col="red", layout=c(3,3),
scales = list(y=list(relation="free")
))]
scadaTCPConvDT[,bwplot(~Bytes/1e6 | Address.A, main="Boxplot of Source and Packet Size by Address",
xlab="MBytes", col="red", layout=c(3,3),
scales = list(y=list(relation="free")
))]
plot.new()
scadaTCPConvDT[,bwplot(~Bytes/1e6 | Address.B, main="Boxplot of Destination and Packet Size by Address",
xlab="MBytes", layout=c(3,3),
scales = list(y=list(relation="free")
))]
x <- scadaTCPConvDT[,Packets]
bw <- diff(range(x)) / (2 * IQR(x) / length(x)^(1/3))
hp <- ggplot(scadaTCPConvDT, aes(x=Packets, )) + geom_histogram(binwidth=bw,)
hp <- hp + facet_grid(Address.B ~ Address.A, scales="free_y")
hp <- hp + ggtitle("Histogram of Bytes per Packet by Address")
hp + theme(axis.text.x = element_text(angle=90)
rm(x, bw, hp)
x <- scadaTCPConvDT[,Packets]
bw <- diff(range(x)) / (2 * IQR(x) / length(x)^(1/3))
hp <- ggplot(scadaTCPConvDT, aes(x=Packets, )) + geom_histogram(binwidth=bw,)
hp <- hp + facet_grid(Address.B ~ Address.A, scales="free_y")
hp <- hp + ggtitle("Histogram of Bytes per Packet by Address")
hp + theme(axis.text.x = element_text(angle=90))
rm(x, bw, hp)
x <- scadaTCPConvDT[,Packets]
bw <- diff(range(x)) / (2 * IQR(x) / length(x)^(1/3))
hp <- ggplot(scadaTCPConvDT, aes(x=Packets, )) + geom_histogram(binwidth=bw,)
hp <- hp + facet_grid(Address.B ~ Address.A, scales="free_y")
hp <- hp + ggtitle("Histogram of Packet per Destination/Source") + ylab("Count")
hp + theme(axis.text.x = element_text(angle=90))
rm(x, bw, hp)
x <- scadaTCPConvDT[,Packets]
bw <- diff(range(x)) / (2 * IQR(x) / length(x)^(1/3))
hp <- ggplot(scadaTCPConvDT, aes(x=Packets, )) + geom_histogram(binwidth=bw,)
hp <- hp + facet_grid(Address.B ~ Address.A, scales="free_y")
hp <- hp + ggtitle("Histogram of Packet per Destination/Source") + ylab("Count")
hp + theme(strip.text.x = element_text(angle=90))
rm(x, bw, hp)
x <- scadaTCPConvDT[,Packets]
bw <- diff(range(x)) / (2 * IQR(x) / length(x)^(1/3))
hp <- ggplot(scadaTCPConvDT, aes(x=Packets, )) + geom_histogram(binwidth=bw,)
hp <- hp + facet_grid(Address.B ~ Address.A, scales="free_y")
hp <- hp + ggtitle("Histogram of Packet per Destination/Source") + ylab("Count")
hp + theme(axis.text.x = element_text(angle=90), strip.text.y = element_text(angle=90))
rm(x, bw, hp)
x <- scadaTCPConvDT[,Packets]
bw <- diff(range(x)) / (2 * IQR(x) / length(x)^(1/3))
hp <- ggplot(scadaTCPConvDT, aes(x=Packets/1e6 )) + geom_histogram(binwidth=bw)
hp <- hp + facet_grid(Address.B ~ Address.A, scales="free_y")
hp <- hp + ggtitle("Histogram of Packet per Destination/Source") + ylab("Count")
hp + theme(axis.text.x = element_text(angle=90))
rm(x, bw, hp)
x <- scadaTCPConvDT[,Packets]
bw <- diff(range(x)) / (2 * IQR(x) / length(x)^(1/3))
hp <- ggplot(scadaTCPConvDT, aes(x=Packets)) + geom_histogram(binwidth=bw)
hp <- hp + facet_grid(Address.B ~ Address.A, scales="free_y")
hp <- hp + ggtitle("Histogram of Packet per Destination/Source") + ylab("Count")
hp + theme(axis.text.x = element_text(angle=90), strip.text.y = element_text(angle=-90))
rm(x, bw, hp)
x <- scadaTCPConvDT[,Packets]
bw <- diff(range(x)) / (2 * IQR(x) / length(x)^(1/3))
hp <- ggplot(scadaTCPConvDT, aes(x=Packets)) + geom_histogram(binwidth=bw)
hp <- hp + facet_grid(Address.B ~ Address.A, scales="free_y")
hp <- hp + ggtitle("Histogram of Packet per Destination/Source") + ylab("Count")
hp + theme(axis.text.x = element_text(angle=90), strip.text.y = element_text(angle=270))
rm(x, bw, hp)
x <- scadaTCPConvDT[,Packets]
bw <- diff(range(x)) / (2 * IQR(x) / length(x)^(1/3))
hp <- ggplot(scadaTCPConvDT, aes(x=Packets)) + geom_histogram(binwidth=bw)
hp <- hp + facet_grid(Address.B ~ Address.A, scales="free_y")
hp <- hp + ggtitle("Histogram of Packet per Destination/Source") + ylab("Count")
hp + theme(axis.text.x = element_text(angle=90), strip.text.y = element_text(angle=0))
rm(x, bw, hp)
hp <- ggplot(scadaTCPConvDT, aes(x=Packets)) + geom_histogram(binwidth=bw)
x <- scadaTCPConvDT[,Packets]
bw <- diff(range(x)) / (2 * IQR(x) / length(x)^(1/3))
hp <- ggplot(scadaTCPConvDT, aes(x=Packets)) + geom_histogram(binwidth=bw)
hp
hp <- ggplot(scadaTCPConvDT, aes(x=Packets)) + geom_histogram()
hp
hp <- ggplot(scadaTCPConvDT)+geom_histogram()
hp
x <- scadaTCPConvDT[,Packets]
bw <- diff(range(x)) / (2 * IQR(x) / length(x)^(1/3))
hp <- ggplot(scadaTCPConvDT, aes(x=Packets)) + geom_histogram(binwidth=bw)
hp <- hp + facet_grid(Address.B ~ Address.A, scales="free_y")
hp <- hp + ggtitle("Histogram of Packet per Destination/Source") + ylab("Count")
hp + theme(axis.text.x = element_blank(), strip.text.y = element_text(angle=0), )
rm(x, bw, hp)
x <- scadaTCPConvDT[,Packets]
bw <- diff(range(x)) / (2 * IQR(x) / length(x)^(1/3))
hp <- ggplot(scadaTCPConvDT, aes(x=Packets)) + geom_histogram(binwidth=bw)
hp <- hp + facet_grid(Address.B ~ Address.A, scales="free_y")
hp <- hp + ggtitle("Histogram of Packet per Destination/Source") + ylab("Count")
hp + theme(axis.text.x = element_blank(), strip.text.y = element_text(angle=0))
rm(x, bw, hp)
x <- scadaTCPConvDT[,Packets]
bw <- diff(range(x)) / (2 * IQR(x) / length(x)^(1/3))
hp <- ggplot(scadaTCPConvDT, aes(x=Packets)) + geom_histogram(binwidth=bw)
hp <- hp + facet_grid(Address.B ~ Address.A, scales="free_y")
hp <- hp + ggtitle("Histogram of Packet per Destination/Source") + ylab("Count")
hp + theme(axis.ticks.x = element_blank(), axis.text.x = element_blank(), strip.text.y = element_text(angle=0))
rm(x, bw, hp)
tModSource <- acast( scadaDT[Protocol=="Modbus/TCP", .(Count=.N),
by=.(Time=cut(Time, breaks=breaks[1:11], labels=breaks[1:10]),
Source)][order(Time, Source)]
, Source~Time, value.var="Count")
# replace NA->0
tModSource[is.na(tModSource)] <- 0
# heatmap
hmcol <- brewer.pal(11,"GnBu")
par(cex.main=1)
tModSourceH <- heatmap(tModSource, Rowv=NA, Colv=NA, margins=c(8,13), col=hmcol, cexRow=1,
main="Heatmap of Modbus/TCP Packet Frequency by Source", cellnote,
xlab="Start Time", ylab="Source Address", scale=c("row"))
breaks <- c(0, 1800, 3600, 5400, 7200, 9000, 10800, 12600, 14400, 16200, 18000, 19800)
## all protocols
# acast to convert Source to variables on y and Time on x
tSource <- acast(scadaDT[, .(Count=.N),
by=.(Time=cut(Time, breaks=breaks, labels=breaks[1:11]),
Source)][order(Time, Source)]
, Source~Time, value.var="Count")
# replace NA->0
tSource[is.na(tSource)] <- 0
# heatmap
tSourceH <- heatmap(tSource, Rowv=NA, Colv=NA, margins=c(8,13), col=cm.colors(256),
main="Heatmap of Packet Frequency by Source",
xlab="Start Time", ylab="Source Address")
rm(breaks, tModSource, hmcol, tModSourceH, tSource, tSourceH)
tSourceH <- heatmap(tSource, Rowv=NA, Colv=NA, margins=c(8,13, 5), col=cm.colors(256),
main="Heatmap of Packet Frequency by Source",
xlab="Start Time", ylab="Source Address")
rm(breaks, tModSource, hmcol, tModSourceH, tSource, tSourceH)
tSourceH <- heatmap(tSource, Rowv=NA, Colv=NA, margins=c(8,13), col=cm.colors(256),
main="Heatmap of Packet Frequency by Source",
xlab="Start Time", ylab="Source Address")
rm(breaks, tModSource, hmcol, tModSourceH, tSource, tSourceH)
breaks <- c(0, 1800, 3600, 5400, 7200, 9000, 10800, 12600, 14400, 16200, 18000, 19800)
## all protocols
# acast to convert Source to variables on y and Time on x
tSource <- acast(scadaDT[, .(Count=.N),
by=.(Time=cut(Time, breaks=breaks, labels=breaks[1:11]),
Source)][order(Time, Source)]
, Source~Time, value.var="Count")
# replace NA->0
tSource[is.na(tSource)] <- 0
# heatmap
tSourceH <- heatmap(tSource, Rowv=NA, Colv=NA, margins=c(8,13), col=cm.colors(256),
main="Heatmap of Packet Frequency by Source",
xlab="Start Time", ylab="Source Address")
rm(breaks, tModSource, hmcol, tModSourceH, tSource, tSourceH)
breaks <- c(0, 1800, 3600, 5400, 7200, 9000, 10800, 12600, 14400, 16200, 18000, 19800)
## all protocols
# acast to convert Source to variables on y and Time on x
tSource <- acast(scadaDT[, .(Count=.N),
by=.(Time=cut(Time, breaks=breaks, labels=breaks[1:11]),
Source)][order(Time, Source)]
, Source~Time, value.var="Count")
# replace NA->0
tSource[is.na(tSource)] <- 0
# heatmap
tSourceH <- heatmap(tSource, Rowv=NA, Colv=NA, margins=c(7,13), col=cm.colors(256),
main="Heatmap of Packet Frequency by Source",
xlab="Start Time", ylab="Source Address")
tSourceH <- heatmap(tSource, Rowv=NA, Colv=NA, margins=c(6,13), col=cm.colors(256),
main="Heatmap of Packet Frequency by Source",
xlab="Start Time", ylab="Source Address")
tSourceH <- heatmap(tSource, Rowv=NA, Colv=NA, margins=c(6,11), col=cm.colors(256),
main="Heatmap of Packet Frequency by Source",
xlab="Start Time", ylab="Source Address")
tModSource <- acast( scadaDT[Protocol=="Modbus/TCP", .(Count=.N),
by=.(Time=cut(Time, breaks=breaks[1:11], labels=breaks[1:10]),
Source)][order(Time, Source)]
, Source~Time, value.var="Count")
# replace NA->0
tModSource[is.na(tModSource)] <- 0
# heatmap
hmcol <- brewer.pal(11,"GnBu")
par(cex.main=1)
tModSourceH <- heatmap(tModSource, Rowv=NA, Colv=NA, margins=c(8,13), col=hmcol, cexRow=1,
main="Heatmap of Modbus/TCP Packet Frequency by Source", cellnote,
xlab="Start Time", ylab="Source Address", scale=c("row"))
tModSource <- acast( scadaDT[Protocol=="Modbus/TCP", .(Count=.N),
by=.(Time=cut(Time, breaks=breaks[1:11], labels=breaks[1:10]),
Source)][order(Time, Source)]
, Source~Time, value.var="Count")
# replace NA->0
tModSource[is.na(tModSource)] <- 0
# heatmap
hmcol <- brewer.pal(11,"GnBu")
par(cex.main=1)
tModSourceH <- heatmap(tModSource, Rowv=NA, Colv=NA, margins=c(5,10), col=hmcol, cexRow=1,
main="Heatmap of Modbus/TCP Packet Frequency by Source", cellnote,
xlab="Start Time", ylab="Source Address", scale=c("row"))
tModSourceH <- heatmap(tModSource, Rowv=NA, Colv=NA, margins=c(5,10), col=hmcol, cexRow=1, cexCol=1,
main="Heatmap of Modbus/TCP Packet Frequency by Source", cellnote,
xlab="Start Time", ylab="Source Address", scale=c("row"))
par(cex.main=.5)
tModSourceH <- heatmap(tModSource, Rowv=NA, Colv=NA, margins=c(5,10), col=hmcol, cexRow=1, cexCol=1,
main="Heatmap of Modbus/TCP Packet Frequency by Source", cellnote,
xlab="Start Time", ylab="Source Address", scale=c("row"))
par(cex.main=.8)
tModSourceH <- heatmap(tModSource, Rowv=NA, Colv=NA, margins=c(5,7), col=hmcol, cexRow=1, cexCol=1,
main="Heatmap of Modbus/TCP Packet Frequency by Source", cellnote,
xlab="Start Time", ylab="Source Address", scale=c("row"))
tModSourceH <- heatmap(tModSource, Rowv=NA, Colv=NA, margins=c(5,8), col=hmcol, cexRow=1, cexCol=1,
main="Heatmap of Modbus/TCP Packet Frequency by Source", cellnote,
xlab="Start Time", ylab="Source Address", scale=c("row"))
library(data.table)
library(lattice)
library(ggplot2)
library(plyr)
library(dplyr)
library(reshape2)
library(RColorBrewer)
rm(breaks, tModSource, hmcol, tModSourceH, tSource, tSourceH)
?load
?save.image
save.image()
str(scadaDT)
head(scadaDT)
head(scadaEndPtsDT)
install.packages("devtools")
devtools::install_github("twitter/AnomalyDetection")
install.packages("RCurl")
install.packages("RCurl")
devtools::install_github("twitter/AnomalyDetection")
install.packages("devtools")
devtools::install_github("twitter/AnomalyDetection")
devtools::install_github("twitter/AnomalyDetection")
install.packages("devtools", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
View(scadaTCPConvDT)
library(devtools)
devtools::install_github("twitter/AnomalyDetection")
View(scadaDT)
protocols <- sort(table(scadaDT$Protocol),decreasing=TRUE)
protocols
table(protocols)
as.data.table(protocols)
library(data.table)
library(lattice)
library(ggplot2)
library(plyr)
library(dplyr)
library(reshape2)
library(RColorBrewer)
as.data.table(protocols)
protocols
class(protocols)
str(protocols)
as.matrix(protocols)
str(scadaEndPtsDT)
head(scadaEndPtsDT)
head(scadaTCPConvDT)
install.packages("rgl")
install.packages("rgl")
install.packages("ape")
demo(package="igraph")
igraphdemo()
library(igraph)
igraphdemo()
demo(centrality, package="igraph")
demo(crashR, package="igraph", ask=FALSE)
demo(smallworld, package="igraph", ask=FALSE)
demo(community, package="igraph")
rm(M,M2,coords,lay,pref.mat,ws.result,A, survey,A,AS.model,G,a,age,char.vec,char_vec,colbar,communities,countries,g,g2,g3,g4,i,karate)
rm(b,cent,ebc,fc,fcountries,labprop,l,l2,lec,memb,mod,newe,ord,ord1,ord2.2,perfect)
rm(wt,ws2,ws1,tr,t3,t2,t1,sc2.2,sc1,sc)
rm(rr.pl.0.1,ring.size,ring.pl,ring,rg,rewire.prob,res,random.pl)
rm(ws.paper,ry.rr,pl,try.ring.pl,try.random.pl,plotG,pause,myimage,clique.community)
rm(try.rr.pl)
save.image()
protocols
rm(protocols)
scadaTCPConvDT[,bwplot(~Duration, groups=Address.A, main="Boxplot of Duraton by Address/Port",
scales = list(y=list(relation="free")
))]
library(data.table)
library(lattice)
library(ggplot2)
library(plyr)
library(dplyr)
library(reshape2)
library(RColorBrewer)
scadaTCPConvDT[,bwplot(~Duration, groups=Address.A, main="Boxplot of Duraton by Address/Port",
scales = list(y=list(relation="free")
))]
scadaTCPConvDT[,bwplot(~Duration | Address.A, main="Boxplot of Duraton by Address/Port",
scales = list(y=list(relation="free")
))]
scadaTCPConvDT[,bwplot(~Duration | Port.A + Address.A, main="Boxplot of Duraton by Address/Port",
scales = list(y=list(relation="free")
))]
protocols <- sort(table(scadaDT$Protocol),decreasing=TRUE)
camembert(protocols)
install.packages("TRSbook")
?library.packages
libarary(TRSbook)
library(TRSbook)
protocols <- sort(table(scadaDT$Protocol),decreasing=TRUE)
camembert(protocols)
?camembert
View(scadaEndPtsDT)
?levels
rm(protocols)
rm(cor.test.2.sample)
save.image()
library()
library(igraph)
library(igraph)
library(data.table)
library(lattice)
library(ggplot2)
library(plyr)
library(dplyr)
library(reshape2)
library(RColorBrewer)
library(igraph)
g <- graph.data.frame(scadaTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)], directed=FALSE)
V(g)$size = degree(g)
plot.igraph(g)
g <- graph.data.frame(scadaTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)])
V(g)$size = degree(g)
plot.igraph(g)
head(scadaTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)])
g <- graph.data.frame(scadaTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)])
V(g)$size = degree(g)
head(V(g)$size)
str(V(g))
length(V(g))
V(g)
length(E(g))
str(g)
head(scadaTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)])
par()
?plot.igraph
?graph.data.frame
g <- graph.data.frame(scadaTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)], directed=FALSE)
plot.igraph(g)
?graph.adjacency
?tkplot
tkplot(g)
gAdjMtx <- get.adjacency(g)
?get.adjacency
library(data.table)
library(lattice)
library(ggplot2)
library(plyr)
library(dplyr)
library(reshape2)
library(RColorBrewer)
library(igraph)
eW <- E(gAdj)$weight  # edge weights
g <- graph.data.frame(scadaTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)], directed=FALSE)
gAdjMtx <- get.adjacency(g)  # adjacency mtx
gAdj <- graph.adjacency(gAdjMtx, mode="undirected", weighted=TRUE)
V(gAdj)$size <- degree(gAdj)  # node size according to degree of centrality
eW <- E(gAdj)$weight  # edge weights
eW
eW <- ceiling(eW/max(eW)*55)
eW
eW[eW>10] <- 10
eW
V(gAdj)$size
plot.igraph(gAdj, main="Graph of SCADA Network", edge.width=eW)
V(gAdj)$size <- degree(gAdj)*5  # node size according to degree of centrality
plot.igraph(gAdj, main="Graph of SCADA Network", edge.width=eW)
plot.igraph(gAdj, main="Graph of SCADA Network", edge.width=eW)
plot.igraph(gAdj, main="Graph of SCADA Network", edge.width=eW)
plot.igraph(gAdj, main="Graph of SCADA Network", edge.width=eW)
rm(g, gAdjMtx, gAdj, eW)
save.image()
