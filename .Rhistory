srcs  <- unique(sewModbusDT, by=c("ip.src"))[,.(ip.src)]
srcs
dst <- unique(sewModbusDT, by=.(ip.dst))[,.(ip.dst)]
unique(sewModbusDT, by=c("ip.dst"))[,.(ip.dst)]
dst <- unique(sewModbusDT, by=c("ip.dst"))[,.(ip.dst)]
dst
du <- unique(sewModbusDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[
ip.dst.unit_id = paste(ip.dst, mbtcp.modbus.unit_id, sep="/"),
ip.dst, mbtcp.modbus.unit_id]
du
srcs  <- unique(sewModbusDT, by=c("ip.src"))[,.(IP_SRC=ip.src)]
srcs
toJSON(srcs)
dst <- unique(sewModbusDT, by=c("ip.dst"))[,.(IP_DST=ip.dst)]
dst
du <- unique(sewModbusDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[
ip.dst.unit_id = paste(ip.dst, mbtcp.modbus.unit_id, sep="/"),
IP_ADDR=ip.dst, MODBUS_UNIT_ID=mbtcp.modbus.unit_id]
du
du <- unique(sewModbusDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[
IP_MODBUS_UNIT_ID = paste(ip.dst, mbtcp.modbus.unit_id, sep="/"),
IP_ADDR=ip.dst, MODBUS_UNIT_ID=mbtcp.modbus.unit_id]
du
du <- unique(sewModbusDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[IP_MODBUS_UNIT_ID = paste(ip.dst, mbtcp.modbus.unit_id, sep="/"),
IP_ADDR=ip.dst, MODBUS_UNIT_ID=mbtcp.modbus.unit_id]
du
du <- unique(sewModbusDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))
du
du <- unique(sewModbusDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[.(IP_MODBUS_UNIT_ID = paste(ip.dst, mbtcp.modbus.unit_id, sep="/"),
IP_ADDR=ip.dst, MODBUS_UNIT_ID=mbtcp.modbus.unit_id)]
du
du <- unique(sewModbusDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(IP_MODBUS_UNIT_ID = paste(ip.dst, mbtcp.modbus.unit_id, sep="/"),
IP_ADDR=ip.dst, MODBUS_UNIT_ID=mbtcp.modbus.unit_id)]
du
smac <- unique(sewModbusDT, by=c("ip.src", "eth.src"))[,.(IP_SRC=ip.src, MAC_ADDR=eth.src)]
smac
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)]
sfunc
du <- unique(sewModbusDT,
by=c("ip.dst",
"mbtcp.modbus.unit_id"))[,.(IP_MODBUS_UNIT_ID = paste(ip.dst, mbtcp.modbus.unit_id, sep="/"),
IP_ADDR=ip.dst, MODBUS_UNIT_ID=mbtcp.modbus.unit_id)]
du
du <- unique(sewModbusDT,
by=c("ip.dst",
"mbtcp.modbus.unit_id"))[
,.(IP_MODBUS_UNIT_ID = paste(ip.dst,
mbtcp.modbus.unit_id, sep="/"),
IP_ADDR=ip.dst, MODBUS_UNIT_ID=mbtcp.modbus.unit_id)]
du
smac <- unique(sewModbusDT,
by=c("ip.src", "eth.src"))[
,.(IP_SRC=ip.src,
MAC_ADDR=eth.src)]
smac
toJSON(smac)
toJSON(du)
toJSON(as.data.table(du)
)
toJSON(as.data.frame(du))
str(du)
du
sfunc
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
.(IP_SRC=ip.src,
MODBUS_FUNCTION=mbtcp.modbus.func_code)]
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_SRC=ip.src,
MODBUS_FUNCTION=mbtcp.modbus.func_code)]
sfunc
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_ADDR_MOD_FUNC, IP_SRC=ip.src,
MODBUS_FUNCTION=mbtcp.modbus.func_code)]
sfunc
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"),
IP_SRC=ip.src,
MODBUS_FUNCTION=mbtcp.modbus.func_code)
, by=.(ip.src, mbtcp.modbus.func_code)]
sfunc
sfunc <- sewModbusDT[,.SD(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"),
IP_SRC=ip.src,
MODBUS_FUNCTION=mbtcp.modbus.func_code)
, by=.(ip.src, mbtcp.modbus.func_code)]
sfunc <- sewModbusDT[,.SD[c(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"),
IP_SRC=ip.src,
MODBUS_FUNCTION=mbtcp.modbus.func_code)]
, by=.(ip.src, mbtcp.modbus.func_code)]
sewModbusDT[,.SD[c(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/")],
by=.(ip.src, mbtcp.modbus.func_code)]
sewModbusDT[,.SD[,c(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/")],
by=.(ip.src, mbtcp.modbus.func_code)]
sewModbusDT[,.SD[,c(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))],
by=.(ip.src, mbtcp.modbus.func_code)]
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_ADDR_MOD_FUNC, IP_SRC=ip.src,
MODBUS_FUNCTION=mbtcp.modbus.func_code)]
sfunc
txt_ <- sprintf('"IP_ADDR_MOD_FUNC" : [\n%s\n]',
paste0(
with(sfunc,
sprintf('    "%s" : {\n        "IP_SRC" : "%s",\n        "MODBUS_FUNCTION" : "%s "\n    }',
IP_ADDR_MOD_FUNC, IP_SRC, MODBUS_FUNCTION, MODBUS_FUNCTION)),
collapse = ",\n"))
txt_
?paste
sfuncRef
sfuncRef <- sewModbusDT[,.(IP_ADDR_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_ADDR_MOD_FUNC_REF,
IP_ADDR=ip.src,
MODBUS_FUNCTION=mbtcp.modbus.func_code,
MODBUS_REFERENCE=mbtcp.modbus.reference_num)]
sfuncRef
sfuncRef <- mergedSewDT[,.(IP_ADDR_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_ADDR_MOD_FUNC_REF,
IP_ADDR=ip.src,
MODBUS_FUNCTION=mbtcp.modbus.func_code,
MODBUS_REFERENCE=mbtcp.modbus.reference_num)]
sfuncRef
sfuncRef <- mergedSewDT[,.(IP_ADDR_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(order(IP_ADDR_MOD_FUNC_REF,
IP_ADDR=ip.src,
MODBUS_FUNCTION=mbtcp.modbus.func_code,
MODBUS_REFERENCE=mbtcp.modbus.reference_num))]
sfuncRef
sfuncRef <- mergedSewDT[,.(IP_ADDR_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_ADDR_MOD_FUNC_REF,
ip.src,
mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)]
sfuncRef
sfuncRef <- mergedSewDT[,.(IP_ADDR_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_ADDR_MOD_FUNC_REF,
ip.src,
mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)]
sfuncRef
txt_ <- sprintf('"IP_ADDR_MOD_FUNC_REF" : [\n%s\n]',
paste0(
with(sfuncRef,
sprintf('    "%s" : {\n        "IP_SRC" : "%s",\n        "MODBUS_FUNCTION" : "%s "\n    }',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)),
collapse = ",\n"))
txt_
txt_ <- sprintf('"IP_ADDR_MOD_FUNC_REF" : [\n%s\n]',
paste0(
with(sfuncRef,
sprintf('  "%s" : {\n    "IP_SRC" : "%s",\n    "MODBUS_FUNCTION" : "%s "\n    }',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)),
collapse = ",\n"))
txt_
txt_ <- sprintf('"IP_ADDR_MOD_FUNC_REF" : [\n%s\n]',
paste0(
with(sfuncRef,
sprintf('  "%s" : {\n    "IP_SRC" : "%s",\n    "MODBUS_FUNCTION" : "%s "\n}',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)),
collapse = ",\n"))
txt_
sfuncRef <- mergedSewDT[,.(IP_ADDR_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_ADDR_MOD_FUNC_REF,
ip.src,
mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)]
sfuncRef
txt_ <- sprintf('"IP_ADDR_MOD_FUNC_REF" : [\n%s\n]',
paste0(
with(sfuncRef,
sprintf('  "%s" : {\n    "IP_SRC" : "%s",\n    "MODBUS_FUNCTION" : "%s "\n}',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)),
collapse = ",\n"))
txt_
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_ADDR_MOD_FUNC, ip.src,
mbtcp.modbus.func_code)]
sfunc
txt_ <- sprintf('"IP_ADDR_MOD_FUNC" : [\n%s\n]',
paste0(
with(sfunc,
sprintf('    "%s" : {\n        "IP_ADDR" : "%s",\n        "MODBUS_FUNCTION" : "%s "\n    }',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code)),
collapse = ",\n"))
txt_
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_ADDR_MOD_FUNC, ip.src,
mbtcp.modbus.func_code)]
sfunc
txt_ <- sprintf('"IP_ADDR_MOD_FUNC" : [\n%s\n]',
paste0(
with(sfunc,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "MODBUS_FUNCTION" : "%s "\n}',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code)),
collapse = ",\n"))
txt_
write(txt_, file=test.txt
)
write(txt_, file="test.txt")
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_ADDR_MOD_FUNC, ip.src,
mbtcp.modbus.func_code)]
sfunc
txt_ <- sprintf('"IP_ADDR_MODBUS_FUNC" : [\n%s\n]',
paste0(
with(sfunc,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "MODBUS_FUNCTION" : "%s "\n}',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code)),
collapse = ",\n"))
txt1
write(txt_, file="test.txt")
# Source / Function Code
sfuncRef <- mergedSewDT[,.(IP_ADDR_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_ADDR_MOD_FUNC_REF,
ip.src,
mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)]
sfuncRef
txt2 <- sprintf('"IP_ADDR_MODBUS_FUNC_REF" : [\n%s\n]',
paste0(
with(sfuncRef,
sprintf('  "%s" : {\n    "IP_SRC" : "%s",\n    "MODBUS_FUNCTION" : "%s "\n}',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)),
collapse = ",\n"))
txt_
# Source / Function Code
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_ADDR_MOD_FUNC, ip.src,
mbtcp.modbus.func_code)]
sfunc
txt_ <- sprintf('"IP_ADDR_MODBUS_FUNC" : [\n%s\n]',
paste0(
with(sfunc,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "MODBUS_FUNCTION" : "%s "\n}',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code)),
collapse = ",\n"))
txt1
write(txt_, file="test.txt")
# Source / Function Code
sfuncRef <- mergedSewDT[,.(IP_ADDR_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_ADDR_MOD_FUNC_REF,
ip.src,
mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)]
sfuncRef
txt2 <- sprintf('"IP_ADDR_MODBUS_FUNC_REF" : [\n%s\n]',
paste0(
with(sfuncRef,
sprintf('  "%s" : {\n    "IP_SRC" : "%s",\n    "MODBUS_FUNCTION" : "%s "\n}',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)),
collapse = ",\n"))
txt_2
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_ADDR_MOD_FUNC, ip.src,
mbtcp.modbus.func_code)]
sfunc
txt1 <- sprintf('"IP_ADDR_MODBUS_FUNC" : [\n%s\n]',
paste0(
with(sfunc,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "MODBUS_FUNCTION" : "%s "\n}',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code)),
collapse = ",\n"))
txt1
write(txt_, file="test.txt")
# Source / Function Code
sfuncRef <- mergedSewDT[,.(IP_ADDR_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_ADDR_MOD_FUNC_REF,
ip.src,
mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)]
sfuncRef
txt2 <- sprintf('"IP_ADDR_MODBUS_FUNC_REF" : [\n%s\n]',
paste0(
with(sfuncRef,
sprintf('  "%s" : {\n    "IP_SRC" : "%s",\n    "MODBUS_FUNCTION" : "%s "\n}',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)),
collapse = ",\n"))
txt2
sfuncRef <- mergedSewDT[,.(IP_ADDR_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_ADDR_MOD_FUNC_REF,
ip.src,
mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)]
sfuncRef
txt2 <- sprintf('"IP_ADDR_MODBUS_FUNC_REF" : [\n%s\n]',
paste0(
with(sfuncRef,
sprintf('  "%s" : {\n    "IP_SRC" : "%s",\n    "MODBUS_FUNCTION" : "%s "\n}',
IP_ADDR_MOD_FUNC_REF, ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)),
collapse = ",\n"))
txt2
paste(txt1, txt2, sep="\n")
txt<-paste(txt1, txt2, sep="\n")
write(txt, txt.txt)
write(txt, file="txt.txt")
write(txt, file="textf.txt")
txt<-paste(txt1, txt2, sep="\n")
write(txt, file="textf.txt")
getwd()
txt
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_ADDR_MOD_FUNC, ip.src,
mbtcp.modbus.func_code)]
sfunc
txt1 <- sprintf('"IP_ADDR_MODBUS_FUNC" : [\n%s\n]',
paste0(
with(sfunc,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "MODBUS_FUNCTION" : "%s "\n    }',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code)),
collapse = ",\n"))
txt1
# Source / Function Code
sfuncRef <- mergedSewDT[,.(IP_ADDR_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_ADDR_MOD_FUNC_REF,
ip.src,
mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)]
sfuncRef
txt2 <- sprintf('"IP_ADDR_MODBUS_FUNC_REF" : [\n%s\n]',
paste0(
with(sfuncRef,
sprintf('  "%s" : {\n    "IP_SRC" : "%s",\n    "MODBUS_FUNCTION" : "%s "\n    }',
IP_ADDR_MOD_FUNC_REF, ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)),
collapse = ",\n"))
txt2
txt<-paste(txt1, txt2, sep="\n")
write(txt, file="textf.txt")
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_ADDR_MOD_FUNC, ip.src,
mbtcp.modbus.func_code)]
sfunc
txt1 <- sprintf('"IP_ADDR_MODBUS_FUNC" : [\n%s\n]',
paste0(
with(sfunc,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "MODBUS_FUNCTION" : "%s "\n   }',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code)),
collapse = ",\n"))
txt1
# Source / Function Code
sfuncRef <- mergedSewDT[,.(IP_ADDR_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_ADDR_MOD_FUNC_REF,
ip.src,
mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)]
sfuncRef
txt2 <- sprintf('"IP_ADDR_MODBUS_FUNC_REF" : [\n%s\n]',
paste0(
with(sfuncRef,
sprintf('  "%s" : {\n    "IP_SRC" : "%s",\n    "MODBUS_FUNCTION" : "%s "\n   }',
IP_ADDR_MOD_FUNC_REF, ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)),
collapse = ",\n"))
txt2
txt<-paste(txt1, txt2, sep="\n")
write(txt, file="textf.txt")
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_ADDR_MOD_FUNC, ip.src,
mbtcp.modbus.func_code)]
sfunc
txt1 <- sprintf('"IP_ADDR_MODBUS_FUNC" : [\n%s\n]',
paste0(
with(sfunc,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "MODBUS_FUNCTION" : "%s "\n  }',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code)),
collapse = ",\n"))
txt1
# Source / Function Code
sfuncRef <- mergedSewDT[,.(IP_ADDR_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_ADDR_MOD_FUNC_REF,
ip.src,
mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)]
sfuncRef
txt2 <- sprintf('"IP_ADDR_MODBUS_FUNC_REF" : [\n%s\n]',
paste0(
with(sfuncRef,
sprintf('  "%s" : {\n    "IP_SRC" : "%s",\n    "MODBUS_FUNCTION" : "%s "\n  }',
IP_ADDR_MOD_FUNC_REF, ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)),
collapse = ",\n"))
txt2
txt<-paste(txt1, txt2, sep="\n")
write(txt, file="textf.txt")
toJSON(smac)
spac
smpac
smac
src
dst
toJSON(dst)
smac <- unique(sewModbusDT,
by=c("ip.src", "eth.src"))[
,.(IP_ADDR_MAC_ADDR = paste(ip.src, eth.src, sep="/"),
ip.src,
eth.src)]
smac
smac <- unique(sewModbusDT,
by=c("ip.src", "eth.src"))[
,.(IP_ADDR_MAC_ADDR = paste(ip.src, eth.src, sep="/"),
ip.src,
eth.src)]
smac
txt1 <- sprintf('"IP_ADDR_MAC_ADDR" : [\n%s\n]',
paste0(
with(sfunc,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "MAC_ADDR" : "%s "\n  }',
IP_ADDR_MAC_ADDR, ip.src, eth.src)),
collapse = ",\n"))
smac <- unique(sewModbusDT,
by=c("ip.src", "eth.src"))[
,.(IP_ADDR_MAC_ADDR = paste(ip.src, eth.src, sep="/"),
ip.src,
eth.src)]
smac
txt1 <- sprintf('"IP_ADDR_MAC_ADDR" : [\n%s\n]',
paste0(
with(smac,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "MAC_ADDR" : "%s "\n  }',
IP_ADDR_MAC_ADDR, ip.src, eth.src)),
collapse = ",\n"))
txt1
du <- unique(sewModbusDT,
by=c("ip.dst",
"mbtcp.modbus.unit_id"))[
,.(IP_MODBUS_UNIT_ID = paste(ip.dst,
mbtcp.modbus.unit_id, sep="/"),
ip.dst,
mbtcp.modbus.unit_id)]
du
du <- unique(sewModbusDT,
by=c("ip.dst",
"mbtcp.modbus.unit_id"))[
,.(IP_MODBUS_UNIT_ID = paste(ip.dst,
mbtcp.modbus.unit_id, sep="/"),
ip.dst,
mbtcp.modbus.unit_id)]
du
txt1 <- sprintf('"IP_MODBUS_UNIT_ID" : [\n%s\n]',
paste0(
with(du,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "UNIT_ID" : "%s "\n  }',
IP_MODBUS_UNIT_ID, ip.src, mbtcp.modbus.unit_id)),
collapse = ",\n"))
txt1
du
txt1 <- sprintf('"IP_MODBUS_UNIT_ID" : [\n%s\n]',
paste0(
with(du,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "UNIT_ID" : "%s "\n  }',
IP_MODBUS_UNIT_ID, ip.src, mbtcp.modbus.unit_id)),
collapse = ",\n"))
txt1
du
du <- unique(sewModbusDT,
by=c("ip.dst",
"mbtcp.modbus.unit_id"))[
,.(IP_MODBUS_UNIT_ID = paste(ip.dst,
mbtcp.modbus.unit_id, sep="/"),
ip.dst,
mbtcp.modbus.unit_id)]
du
txt1 <- sprintf('"IP_MODBUS_UNIT_ID" : [\n%s\n]',
paste0(
with(du,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "UNIT_ID" : "%s "\n  }',
IP_MODBUS_UNIT_ID, ip.src, mbtcp.modbus.unit_id)),
collapse = ",\n"))
txt1
str(du)
smac
vars <- ls()
vars
vars <- vars[-25][-26][-27][-48][-53][-54][-51][-52]
vars
vars <- vars[-49]
vars
do.call(rm, as.list(vars))
ls()
rm(nrow,vars)
