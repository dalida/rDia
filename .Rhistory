by=c("ip.dst",
"mbtcp.modbus.unit_id"))[
,.(IP_MODBUS_UNIT_ID = paste(ip.dst,
mbtcp.modbus.unit_id, sep="/"),
ip.dst,
mbtcp.modbus.unit_id)]
du
txt3 <- sprintf('"IP_MODBUS_UNIT_ID" : [\n%s\n]',
paste0(
with(du,
sprintf('  "%s" : {\n   "IP_ADDR" : "%s",\n   "UNIT_ID" : "%s "\n  }',
IP_MODBUS_UNIT_ID, ip.dst, mbtcp.modbus.unit_id)),
collapse = ",\n"))
txt3
# Source / MAC Address
#smac <- sewModbusDT[,.(count=.N), by=.(ip.src, eth.src)]
smac <- unique(sewModbusDT,
by=c("ip.src", "eth.src"))[
,.(IP_ADDR_MAC_ADDR = paste(ip.src, eth.src, sep="/"),
ip.src,
eth.src)]
smac
txt4 <- sprintf('"IP_ADDR_MAC_ADDR" : [\n%s\n]',
paste0(
with(smac,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "MAC_ADDR" : "%s "\n  }',
IP_ADDR_MAC_ADDR, ip.src, eth.src)),
collapse = ",\n"))
txt4
# Source / Function Code
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_ADDR_MOD_FUNC, ip.src,
mbtcp.modbus.func_code)]
sfunc
txt5 <- sprintf('"IP_ADDR_MODBUS_FUNC" : [\n%s\n]',
paste0(
with(sfunc,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "MODBUS_FUNCTION" : "%s "\n  }',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code)),
collapse = ",\n"))
txt5
# Source / Function Code
sfuncRef <- mergedSewDT[,.(IP_ADDR_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_ADDR_MOD_FUNC_REF,
ip.src,
mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)][order(mbtcp.modbus.reference_num)]
sfuncRef
txt6 <- sprintf('"IP_ADDR_MODBUS_FUNC_REF" : [\n%s\n]',
paste0(
with(sfuncRef,
sprintf('  "%s" : {\n    "IP_SRC" : "%s",\n     "MODBUS_FUNCTION" : "%s ",\n    "MODBUS_REFERENCE" : "%s "\n  }',
IP_ADDR_MOD_FUNC_REF, ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)),
collapse = ",\n"))
txt6
whitelist <- sprintf('{\n%s\n}',
paste(txt1, txt2, txt3, txt4, txt5, txt6, sep=",\n")
)
write(whitelist, file="whitelist.db")
rm(txt1, txt2, txt3, txt4, txt5, txt6, srcs, dst, du, smac, sfunc, sfuncRef, whitelist)
# Packet Analysis
## STATS
### Average frequency of packets per second
avgPkt <- mergedSewDT[,.(frequency=.N),by=frame.second][,mean(frequency)]
avgPkt
### Frequency per second, per source/dest ip and function code
srcFuncFreq <- mergedSewDT[,.(frequency=.N),
by =.(ip.src, ip.dst, mbtcp.modbus.func_code,
frame.second)][
order(ip.src, ip.dst, mbtcp.modbus.func_code,
frame.second)][,.(avgFrequencySec=mean(frequency)),
by=.(ip.src, ip.dst, mbtcp.modbus.func_code)]
srcFuncFreq
txt1 <- sprintf('"SOURCE_DEST_FUNCTION_FREQUENCY" : [\n%s\n]',
paste0(
with(srcFuncFreq,
sprintf('  "%s" : {\n    "IP_SRC" : "%s",\n    "IP_DST" : "%s",\n    "MODBUS_FUNCTION" : "%s ",\n    "FREQUENCY" : "%f "\n  }',
paste(ip.src, ip.dst, mbtcp.modbus.func_code, sep="/"),
ip.src, ip.dst, mbtcp.modbus.func_code,
avgFrequencySec)),
collapse = ",\n"))
txt1
# Frequency per second, per source/dest ip, function code, and reference num
srcFuncRefFreq <- mergedSewDT[,.(frequency=.N),
by =.(ip.src, ip.dst, mbtcp.modbus.func_code, mbtcp.modbus.reference_num,
frame.second)][
order(ip.src, ip.dst, mbtcp.modbus.func_code, mbtcp.modbus.reference_num,
frame.second)][,.(avgFrequncySec=mean(frequency)),
by=.(ip.src, ip.dst, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)]
srcFuncRefFreq
txt2 <- sprintf('"SOURCE_DEST_FUNCTION_REFERENCE_FREQUENCY" : [\n%s\n]',
paste0(
with(srcFuncRefFreq,
sprintf('  "%s" : {\n    "IP_SRC" : "%s",\n    "IP_DST" : "%s",\n    "MODBUS_FUNCTION" : "%s ",\n    "MODBUS_REFERENCE" : "%s ",\n    "FREQUENCY" : "%f "\n  }',
paste(ip.src, ip.dst, mbtcp.modbus.func_code, mbtcp.modbus.reference_num, sep="/"),
ip.src, ip.dst, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num,
avgFrequncySec)),
collapse = ",\n"))
txt2
modbusStats <- mergedSewDT[,.(frequency=.N, d.min=min(d), d.mean=mean(d, na.rm=T),
d.sd=sd(d, na.rm=T), d.max=max(d)
), by =.(mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
order(mbtcp.modbus.func_code, mbtcp.modbus.reference_num)]
modbusStats
txt3 <- sprintf('"MODBUS_FUNCTION_REFERENCE_DATA_STATS" : [\n%s\n]',
paste0(
with(modbusStats,
sprintf('  "%s" : {\n    "MODBUS_FUNCTION" : "%s",\n    "MODBUS_REFERENCE" : "%s",\n    "D_MIN" : "%.2f ",\n    "D_MEAN" : "%.2f ",\n    "D_STD_DEV" : "%.2f ",\n    "D_MAX" : "%.2f "\n  }',
paste(mbtcp.modbus.func_code, mbtcp.modbus.reference_num, sep="/"),
mbtcp.modbus.func_code,
mbtcp.modbus.reference_num,
d.min, d.mean, d.sd, d.max)),
collapse = ",\n"))
txt3
stats <- sprintf('{\n%s\n}',
paste(txt1, txt2, txt3, sep=",\n")
)
write(stats, file="stats.db")
rm(txt1, txt2, txt3)
View(modbusStats)
source('~/rDia/createJSON.R')
source('~/rDia/createJSON.R')
View(modbusStats)
rm(txt1, txt2, txt3, txt4, txt5, txt6, srcs, dst, du, smac, sfunc, sfuncRef, srcFuncFreq, srcFuncRefFreq, whitelist)
rm(txt1, txt2, txt3,srcFuncFreq, srcFuncRefFreq, avgPkt, stats)
source('~/rDia/createJSON.R')
source('~/rDia/createJSON.R')
rm(modbusStats)
x<-sewModbusDT
rm(sewModbusDT)
sewModbusDT<-x
rm(sewModbusDT)
sewModbusDT<-mergedSewDT
#### GENERATE WHITE LIST ####
# Sources
# srcs <- sewModbusDT[,.(count=.N), by=.(ip.src)]
srcs  <- unique(sewModbusDT, by=c("ip.src"))[,.(ip.src)]
srcs
txt1 <- sprintf('"IP_SRC" : [%s]',
paste0(
with(srcs,
sprintf('"%s"',
ip.src)),
collapse = ","))
txt1
# Destinations
# dst <- sewModbusDT[,.(count=.N), by=.(ip.dst)]
dst <- unique(sewModbusDT, by=c("ip.dst"))[,.(ip.dst)]
dst
txt2 <- sprintf('"IP_DST" : [%s]',
paste0(
with(dst,
sprintf('"%s"',
ip.dst)),
collapse = ","))
txt2
# Destination / UnitID
# du <- sewModbusDT[,.(ip.dst.unit_id = paste(ip.dst, mbtcp.modbus.unit_id, sep="/")),
#                   by=.(ip.dst, mbtcp.modbus.unit_id)]
du <- unique(sewModbusDT,
by=c("ip.dst",
"mbtcp.modbus.unit_id"))[
,.(IP_MODBUS_UNIT_ID = paste(ip.dst,
mbtcp.modbus.unit_id, sep="/"),
ip.dst,
mbtcp.modbus.unit_id)]
du
txt3 <- sprintf('"IP_MODBUS_UNIT_ID" : [\n%s\n]',
paste0(
with(du,
sprintf('  "%s" : {\n   "IP_ADDR" : "%s",\n   "UNIT_ID" : "%s "\n  }',
IP_MODBUS_UNIT_ID, ip.dst, mbtcp.modbus.unit_id)),
collapse = ",\n"))
txt3
# Source / MAC Address
#smac <- sewModbusDT[,.(count=.N), by=.(ip.src, eth.src)]
smac <- unique(sewModbusDT,
by=c("ip.src", "eth.src"))[
,.(IP_ADDR_MAC_ADDR = paste(ip.src, eth.src, sep="/"),
ip.src,
eth.src)]
smac
txt4 <- sprintf('"IP_ADDR_MAC_ADDR" : [\n%s\n]',
paste0(
with(smac,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "MAC_ADDR" : "%s "\n  }',
IP_ADDR_MAC_ADDR, ip.src, eth.src)),
collapse = ",\n"))
txt4
# Source / Function Code
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_ADDR_MOD_FUNC, ip.src,
mbtcp.modbus.func_code)]
sfunc
txt5 <- sprintf('"IP_ADDR_MODBUS_FUNC" : [\n%s\n]',
paste0(
with(sfunc,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "MODBUS_FUNCTION" : "%s "\n  }',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code)),
collapse = ",\n"))
txt5
rm(txt1, txt2, txt3, txt4, txt5, txt6, srcs, dst, du, smac, sfunc, sfuncRef, whitelist)
rm(sewModbusDT)
datafile <- "~/scada/data/sew.imp"
mergedSewDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=T
))
View(mergedSewDT)
#### GENERATE WHITE LIST ####
# Sources
# srcs <- sewModbusDT[,.(count=.N), by=.(ip.src)]
srcs  <- unique(sewModbusDT, by=c("ip.src"))[,.(ip.src)]
srcs
txt1 <- sprintf('"IP_SRC" : [%s]',
paste0(
with(srcs,
sprintf('"%s"',
ip.src)),
collapse = ","))
txt1
# Destinations
# dst <- sewModbusDT[,.(count=.N), by=.(ip.dst)]
dst <- unique(sewModbusDT, by=c("ip.dst"))[,.(ip.dst)]
dst
txt2 <- sprintf('"IP_DST" : [%s]',
paste0(
with(dst,
sprintf('"%s"',
ip.dst)),
collapse = ","))
txt2
# Destination / UnitID
# du <- sewModbusDT[,.(ip.dst.unit_id = paste(ip.dst, mbtcp.modbus.unit_id, sep="/")),
#                   by=.(ip.dst, mbtcp.modbus.unit_id)]
du <- unique(sewModbusDT,
by=c("ip.dst",
"mbtcp.modbus.unit_id"))[
,.(IP_MODBUS_UNIT_ID = paste(ip.dst,
mbtcp.modbus.unit_id, sep="/"),
ip.dst,
mbtcp.modbus.unit_id)]
du
txt3 <- sprintf('"IP_MODBUS_UNIT_ID" : [\n%s\n]',
paste0(
with(du,
sprintf('  "%s" : {\n   "IP_ADDR" : "%s",\n   "UNIT_ID" : "%s "\n  }',
IP_MODBUS_UNIT_ID, ip.dst, mbtcp.modbus.unit_id)),
collapse = ",\n"))
txt3
# Source / MAC Address
#smac <- sewModbusDT[,.(count=.N), by=.(ip.src, eth.src)]
smac <- unique(sewModbusDT,
by=c("ip.src", "eth.src"))[
,.(IP_ADDR_MAC_ADDR = paste(ip.src, eth.src, sep="/"),
ip.src,
eth.src)]
smac
txt4 <- sprintf('"IP_ADDR_MAC_ADDR" : [\n%s\n]',
paste0(
with(smac,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "MAC_ADDR" : "%s "\n  }',
IP_ADDR_MAC_ADDR, ip.src, eth.src)),
collapse = ",\n"))
txt4
# Source / Function Code
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_ADDR_MOD_FUNC, ip.src,
mbtcp.modbus.func_code)]
sfunc
txt5 <- sprintf('"IP_ADDR_MODBUS_FUNC" : [\n%s\n]',
paste0(
with(sfunc,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "MODBUS_FUNCTION" : "%s "\n  }',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code)),
collapse = ",\n"))
txt5
datafile <- "~/scada/data/sew.dat"
sewModbusDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=T
))
#### GENERATE WHITE LIST ####
# Sources
# srcs <- sewModbusDT[,.(count=.N), by=.(ip.src)]
srcs  <- unique(sewModbusDT, by=c("ip.src"))[,.(ip.src)]
srcs
txt1 <- sprintf('"IP_SRC" : [%s]',
paste0(
with(srcs,
sprintf('"%s"',
ip.src)),
collapse = ","))
txt1
# Destinations
# dst <- sewModbusDT[,.(count=.N), by=.(ip.dst)]
dst <- unique(sewModbusDT, by=c("ip.dst"))[,.(ip.dst)]
dst
txt2 <- sprintf('"IP_DST" : [%s]',
paste0(
with(dst,
sprintf('"%s"',
ip.dst)),
collapse = ","))
txt2
# Destination / UnitID
# du <- sewModbusDT[,.(ip.dst.unit_id = paste(ip.dst, mbtcp.modbus.unit_id, sep="/")),
#                   by=.(ip.dst, mbtcp.modbus.unit_id)]
du <- unique(sewModbusDT,
by=c("ip.dst",
"mbtcp.modbus.unit_id"))[
,.(IP_MODBUS_UNIT_ID = paste(ip.dst,
mbtcp.modbus.unit_id, sep="/"),
ip.dst,
mbtcp.modbus.unit_id)]
du
txt3 <- sprintf('"IP_MODBUS_UNIT_ID" : [\n%s\n]',
paste0(
with(du,
sprintf('  "%s" : {\n   "IP_ADDR" : "%s",\n   "UNIT_ID" : "%s "\n  }',
IP_MODBUS_UNIT_ID, ip.dst, mbtcp.modbus.unit_id)),
collapse = ",\n"))
txt3
# Source / MAC Address
#smac <- sewModbusDT[,.(count=.N), by=.(ip.src, eth.src)]
smac <- unique(sewModbusDT,
by=c("ip.src", "eth.src"))[
,.(IP_ADDR_MAC_ADDR = paste(ip.src, eth.src, sep="/"),
ip.src,
eth.src)]
smac
txt4 <- sprintf('"IP_ADDR_MAC_ADDR" : [\n%s\n]',
paste0(
with(smac,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "MAC_ADDR" : "%s "\n  }',
IP_ADDR_MAC_ADDR, ip.src, eth.src)),
collapse = ",\n"))
txt4
# Source / Function Code
sfunc <- sewModbusDT[,.(IP_ADDR_MOD_FUNC = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)][
,.(IP_ADDR_MOD_FUNC, ip.src,
mbtcp.modbus.func_code)]
sfunc
txt5 <- sprintf('"IP_ADDR_MODBUS_FUNC" : [\n%s\n]',
paste0(
with(sfunc,
sprintf('  "%s" : {\n    "IP_ADDR" : "%s",\n   "MODBUS_FUNCTION" : "%s "\n  }',
IP_ADDR_MOD_FUNC, ip.src, mbtcp.modbus.func_code)),
collapse = ",\n"))
txt5
mergedfile <- "~/scada/data/sew.imp"
mergedSewDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=T
))
# Source / Function Code
sfuncRef <- mergedSewDT[,.(IP_ADDR_MOD_FUNC_REF = paste(ip.src, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)][
,.(IP_ADDR_MOD_FUNC_REF,
ip.src,
mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)][order(mbtcp.modbus.reference_num)]
sfuncRef
txt6 <- sprintf('"IP_ADDR_MODBUS_FUNC_REF" : [\n%s\n]',
paste0(
with(sfuncRef,
sprintf('  "%s" : {\n    "IP_SRC" : "%s",\n     "MODBUS_FUNCTION" : "%s ",\n    "MODBUS_REFERENCE" : "%s "\n  }',
IP_ADDR_MOD_FUNC_REF, ip.src, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)),
collapse = ",\n"))
txt6
whitelist <- sprintf('{\n%s\n}',
paste(txt1, txt2, txt3, txt4, txt5, txt6, sep=",\n")
)
rm(txt1, txt2, txt3, txt4, txt5, txt6, srcs, dst, du, smac, sfunc, sfuncRef, whitelist)
rm(modbusStats, datafile, mergedfile)
datafile <- "~/scada/data/sew.dat"
sewModbusDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=T
))
# import merged transactions
mergedfile <- "~/scada/data/sew.imp"
mergedSewDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=T
))
View(sewModbusDT)
View(mergedSewDT)
rm(mergedSewDT)
# import merged transactions
mergedfile <- "~/scada/data/sew.imp"
mergedSewDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=T
))
rm(sewModbusDT)
# import datafile
datafile <- "~/scada/data/sew.dat"
sewModbusDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=T
))
datafile <- "~/scada/data/sew.dat"
rm(sewModbusDT)
sewModbusDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=T
))
# import merged transactions
mergedfile <- "~/scada/data/sew.imp"
rm(mergedSewDT)
mergedSewDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=T
))
datafile <- "~/scada/data/sew.dat"
rm(sewModbusDT)
sewModbusDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=T
))
# import merged transactions
mergedfile <- "~/scada/data/sew.imp"
rm(mergedSewDT)
mergedSewDT <- as.data.table(
read.csv(mergedfile, header=TRUE,
stringsAsFactors=T
))
rm(x)
source('~/rDia/createJSON.R')
source('~/rDia/createJSON.R')
rm(modbusStats, datafile, mergedfile, sewModbusDT, mergedSewDT)
source('~/rDia/createJSON.R')
paste(mbtcp.modbus.func_code, mbtcp.modbus.reference_num, sep="/"),
source('~/rDia/createJSON.R')
source('~/rDia/createJSON.R')
source('~/rDia/createJSON.R')
View(sewDT)
rm(sewDT)
rm(vars)
library(tm)
library(wordcloud)
library(SnowballC)
paper<- Corpus(DirSource("wc"))
inspect(paper)
paper <- tm_map(paper, stripWhitespace)
paper <- tm_map(paper, content_transformer(tolower))
paper <- tm_map(paper, removeWords, stopwords("english"))
#paper <- tm_map(paper, stemDocument)
paper <- tm_map(paper, removeNumbers)
paper <- tm_map(paper, removePunctuation)
wordcloud(paper, scale=c(5,0.5), max.words=100, random.order=FALSE,
rot.per=0.35, use.r.layout=FALSE, colors=brewer.pal(8, "Dark2"))
setwd("~/rDia.bk")
library(tm)
library(wordcloud)
library(SnowballC)
paper<- Corpus(DirSource("wc"))
inspect(paper)
paper <- tm_map(paper, stripWhitespace)
paper <- tm_map(paper, content_transformer(tolower))
paper <- tm_map(paper, removeWords, stopwords("english"))
#paper <- tm_map(paper, stemDocument)
paper <- tm_map(paper, removeNumbers)
paper <- tm_map(paper, removePunctuation)
wordcloud(paper, scale=c(5,0.5), max.words=100, random.order=FALSE,
rot.per=0.35, use.r.layout=FALSE, colors=brewer.pal(8, "Dark2"))
setwd("~/rDia")
```{r, echo=FALSE, fig.width=4.5, fig.height=4.5, fig.align='center', fig.cap="TCP Header"}
setwd("~/rDia")
img <- readPNG("imgs/MJB-TCP-Header.png")
grid.raster(img)
``
```{r, echo=FALSE, fig.width=4.5, fig.height=4.5, fig.align='center', fig.cap="TCP Header"}
setwd("~/rDia")
img <- readPNG("imgs/MJB-TCP-Header.png")
grid.raster(img)
```
require(png)
require(grid)
setwd("~/rDia")
img <- readPNG("imgs/MJB-TCP-Header.png")
grid.raster(img)
getwd()
img<-readPNG("imgs/MJB-TCP-Header.png")
img<-readPNG("imgs/MJB-TCP-Header.png")
install.packages("dplyr")
library(dplyr)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("dplyr")
library(dplyr)
library(gridExtra)
ridExtra")
install.packages("r
install.packages("gridExtra")
install.packages("rjson")
library(gridExtra)
library(rjson)
setwd("~/rDia")
?camembert
require(TRSbook)
?camembert
