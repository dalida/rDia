save(scadaDT, scadaTCPConvDT, scadaEndPtsDT, modbusDT, moddataDT, file="report.Rda")
getwd()
?save
dir()
source.with.encoding('~/rDia/data/scadaCops/normal/sew.csv', encoding='UTF-8')
rm("frame.number",  "frame.time_relative",  "frame.time_delta_displayed"
,"frame.len",  "ip.src", "ip.dst", "tcp.srcport"
,"tcp.dstport", "mbtcp.prot_id",  "mbtcp.trans_id",  "mbtcp.len"
,"mbtcp.modbus.func_code", "mbtcp.modbus.word_cnt", "mbtcp.modbus.reference_num", "resp.fr.number"
,"resp.time.rel"  ,"resp.time.delta",  "resp.len", "resp.src"
,"resp.dest", "resp.srcport", "resp.dstport",  "resp.prot_id"
,"resp.trans_id", "resp.mbcp.len",  "resp.func.code", "resp.data" )
View(moddataDT)
xypl <- ggplot(mergedDT, aes(x=frame.time_relative, y=d, color=mbtcp.modbus.reference_num)) +
geom_point() + facet_grid(mbtcp.modbus.reference_num~resp.func.code) +
ggtitle("Modbus Data Values Over Time by Reference Number") +
theme(axis.text.x = element_text(angle=90), plot.title = element_text(size=10),
legend.position = "top", legend.title = element_text(size=6))
save(scadaDT, scadaTCPConvDT, scadaEndPtsDT, modbusDT, moddataDT, mergedDT, file="report.Rda")
?load
mergedDT <- read.csv("~/rDia/rData/mergedDT.dat")
View(mergedDT)
mergedDT$X<-NULL
mergedDT$X.1<-NULL
View(mergedDT)
save(scadaDT, scadaTCPConvDT, scadaEndPtsDT, modbusDT, moddataDT, mergedDT, file="report.Rda")
xypl <- ggplot(mergedDT, aes(x=frame.time_relative, y=d, color=resp.func.code)) +
geom_point() + facet_wrap(~mbtcp.modbus.reference_num) +
ggtitle("Modbus Data Values Over Time by Reference Number") +
theme(axis.text.x = element_text(angle=90), plot.title = element_text(size=10),
legend.position = "top", legend.title = element_text(size=7))
xypl <- ggplot(mergedDT, aes(x=frame.time_relative, y=d, color=resp.func.code)) +
geom_point() + facet_wrap(~mbtcp.modbus.reference_num) +
ggtitle("Modbus Data Values Over Time by Reference Number") +
theme(axis.text.x = element_text(angle=90), plot.title = element_text(size=10),
legend.position = "top", legend.title = element_text(size=7))
xypl
xyp <- ggplot(mergedDT[mbtcp.modbus.func_code=="4"], aes(resp.time.rel, d, color=mbtcp.modbus.reference_num)) +
geom_point() + ggtitle("Modbus Data Value Over Time For Function Code 4") +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle=90), legend.position = "top",
legend.title = element_text(size=8) )
xyp
xyp <- ggplot(mergedDT[mbtcp.modbus.func_code=="4"], aes(resp.time.rel, d, color=mbtcp.modbus.reference_num)) +
geom_point() + ggtitle("Modbus Data Value Over Time For Function Code 4") +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle=90), legend.position = "top",
legend.title = element_text(size=8) )
head(mergedDT[mbtcp.modbus.func_code])
str(mergedDT)
head(mergedDT[mbtcp.modbus.func_code])
head(mergedDT[mbtcp.modbus.func_code=="4"])
head(mergedDT)
head(mergedDT[mbtcp.modbus.func_code=="4"])
head(mergedDT[,mbtcp.modbus.func_code=="4"])
require(data.table)
head(mergedDT[mbtcp.modbus.func_code=="4"])
rm(xyp, xypl)
cloud(resp.time.rel ~ d + mbtcp.modbus.reference_num | resp.func.code, data = mergedDT[resp.func.code=="4"],
col.point = mergedDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "resp.time.rel",
main="3D Scatterplot \nReference Number, Data Value Over Time for Function Code 4",
key = list(points = list(pch = 19, col = seq_along(levels(mergedDT$mbtcp.modbus.reference_num))),
text = list(levels(mergedDT$mbtcp.modbus.reference_num)), space = 'top',
columns = nlevels(mergedDT$mbtcp.modbus.reference_num)))
mergedDT
head(mergedDT)
mergedDT[,.(resp.func.code=="4")]
head(mergedDT[,.(resp.func.code)])
str(mergedDT)
mergedDT<-as.data.table(mergedDT)
head(mergedDT[mbtcp.modbus.func_code=="4"])
cloud(resp.time.rel ~ d + mbtcp.modbus.reference_num | resp.func.code, data = mergedDT[resp.func.code=="4"],
col.point = mergedDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "resp.time.rel",
main="3D Scatterplot \nReference Number, Data Value Over Time for Function Code 4",
key = list(points = list(pch = 19, col = seq_along(levels(mergedDT$mbtcp.modbus.reference_num))),
text = list(levels(mergedDT$mbtcp.modbus.reference_num)), space = 'top',
columns = nlevels(mergedDT$mbtcp.modbus.reference_num)))
levels(mergedDT$mbtcp.modbus.reference_num)
mergedDT$ip.src <- factor(mergedDT$ip.src)
mergedDT$ip.dst <- factor(mergedDT$ip.dst)
mergedDT$tcp.srcport <- factor(mergedDT$tcp.srcport)
mergedDT$tcp.srcport <- factor(mergedDT$tcp.srcport)
mergedDT$mbtcp.modbus.func_code <- factor(mergedDT$mbtcp.modbus.func_code)
mergedDT$resp.src <- factor(mergedDT$resp.src)
mergedDT$resp.dest <- factor(mergedDT$resp.dest)
mergedDT$resp.srcport <- factor(mergedDT$resp.srcport)
mergedDT$resp.dstport <- factor(mergedDT$resp.dstport)
mergedDT$resp.prot_id <- factor(mergedDT$resp.prot_id)
mergedDT$resp.data <- factor(mergedDT$resp.data)
mergedDT$resp.func.code <- factor(mergedDT$resp.func.code)
mergedDT$mbtcp.modbus.reference_num <- factor(mergedDT$mbtcp.modbus.reference_num)
cloud(resp.time.rel ~ d + mbtcp.modbus.reference_num | resp.func.code, data = mergedDT[resp.func.code=="4"],
col.point = mergedDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "resp.time.rel",
main="3D Scatterplot \nReference Number, Data Value Over Time for Function Code 4",
key = list(points = list(pch = 19, col = seq_along(levels(mergedDT$mbtcp.modbus.reference_num))),
text = list(levels(mergedDT$mbtcp.modbus.reference_num)), space = 'top',
columns = nlevels(mergedDT$mbtcp.modbus.reference_num)))
save(scadaDT, scadaTCPConvDT, scadaEndPtsDT, modbusDT, moddataDT, mergedDT, file="report.Rda")
mergedDT$ip.src <- factor(mergedDT$ip.src)
mergedDT$ip.dst <- factor(mergedDT$ip.dst)
mergedDT$tcp.srcport <- factor(mergedDT$tcp.srcport)
mergedDT$tcp.dstport <- factor(mergedDT$dst.srcport)
mergedDT$mbtcp.prot_id<- factor(mergedDT$mbtcp.prot_id)
mergedDT$mbtcp.modbus.func_code <- factor(mergedDT$mbtcp.modbus.func_code)
mergedDT$resp.src <- factor(mergedDT$resp.src)
mergedDT$resp.dest <- factor(mergedDT$resp.dest)
mergedDT$resp.srcport <- factor(mergedDT$resp.srcport)
mergedDT$resp.dstport <- factor(mergedDT$resp.dstport)
mergedDT$resp.prot_id <- factor(mergedDT$resp.prot_id)
mergedDT$resp.data <- factor(mergedDT$resp.data)
mergedDT$resp.func.code <- factor(mergedDT$resp.func.code)
mergedDT$mbtcp.modbus.reference_num <- factor(mergedDT$mbtcp.modbus.reference_num)
View(mergedDT)
mergedDT$tcp.dstport <- factor(mergedDT$tcp.dstport)
save(scadaDT, scadaTCPConvDT, scadaEndPtsDT, modbusDT, moddataDT, mergedDT, file="report.Rda")
View(mergedSewDT)
View(sewModbusDT)
sewModbusDT[,.(count=.N), by=.(ip.src, ip.dst, mbtcp.modbus.unit_id)]
library(data.table)
library(tidyr)
library(lattice)
library(ggplot2)
library(gplots)
library(plyr)
library(dplyr)
library(reshape2)
library(RColorBrewer)
library(igraph)
library(png)
library(grid)
library(Matrix)
library(ROCR)
library(grid)
library(gridExtra)
sewModbusDT[,.(count=.N), by=.(ip.src, ip.dst, mbtcp.modbus.unit_id)]
ggplot(sewModbusDT[tcp.srcport=="502"],  aes(x=factor(0), y=frame.time.relative)) + geom_boxplot() +
xlab("") + scale_x_discrete(breaks = NULL) +
ggtitle("Boxplot of MODBUS/TCP Requests") +
theme(plot.title = element_text(face="bold"),
plot.margin = unit(c(0, 0, 2, 0), "cm"))
head(sewModbusDT[tcp.srcport=="502"])
sewModbusDT[,bwplot(~frame.time_relative, main="Boxplot of MODBUS/TCP Requests")]
p1 <- sewModbusDT[,bwplot(~frame.time_relative, main="Boxplot of MODBUS/TCP Requests")]
grid.arrange(p1, ncol=2)
?bwplot
p1 <- sewModbusDT[,bwplot(~frame.time_relative, main="Boxplot of MODBUS/TCP Requests")]
p2 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0), y=frame.time.relative)) +
geom_boxplot()
grid.arrange(p1, p2, ncol=2)
p1 <- sewModbusDT[,bwplot(~frame.time_relative, main="Boxplot of MODBUS/TCP Requests")]
p2 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0)+
geom_boxplot(aes(y=frame.time_relative, color="frame.time_relative"))+
grid.arrange(p1, p2, ncol=2)
p1 <- sewModbusDT[,bwplot(~frame.time_relative, main="Boxplot of MODBUS/TCP Requests")]
p2 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0)+
geom_boxplot(aes(y=frame.time_relative, color="frame.time_relative"))
grid.arrange(p1, p2, ncol=2)
p2 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0)+
geom_boxplot(aes(y=frame.time_relative, color="frame.time_relative"))
p2 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_relative, color="frame.time_relative"))
p2 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_relative, color="frame.time_relative"))
p2
p1 <- sewModbusDT[,bwplot(~frame.time_relative, main="Boxplot of MODBUS/TCP Requests")]
p2 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_relative))
#  geom_boxplot(aes(y=frame.time_relative, color="frame.time_relative"))
grid.arrange(p1, p2, ncol=2)
p1 <- sewModbusDT[,bwplot(~frame.time_relative, main="Boxplot of MODBUS/TCP Requests")]
p2 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_relative)) + xlab=""
#  geom_boxplot(aes(y=frame.time_relative, color="frame.time_relative"))
grid.arrange(p1, p2, ncol=2)
p1 <- sewModbusDT[,bwplot(~frame.time_relative, main="Boxplot of MODBUS/TCP Requests")]
p2 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_relative)) + xlab("")
#  geom_boxplot(aes(y=frame.time_relative, color="frame.time_relative"))
grid.arrange(p1, p2, ncol=2)
p1 <- sewModbusDT[,bwplot(~frame.time_relative, main="Boxplot of MODBUS/TCP Requests")]
p2 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_relative)) + xlab("") + scale_x_discrete(breaks = NULL)
#  geom_boxplot(aes(y=frame.time_relative, color="frame.time_relative"))
grid.arrange(p1, p2, ncol=2)
p1 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_relative)) + xlab("") + scale_x_discrete(breaks = NULL)
p2 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_delta_displayed)) + xlab("") + scale_x_discrete(breaks = NULL)
p3 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.len)) + xlab("") + scale_x_discrete(breaks = NULL)
grid.arrange(p1, p2, p3, ncol=3)
?grid.arrange
p1 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_relative)) + xlab("") + scale_x_discrete(breaks = NULL)
p2 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_delta_displayed)) + xlab("") + scale_x_discrete(breaks = NULL)
p3 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.len)) + xlab("") + scale_x_discrete(breaks = NULL)
p4 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=mbtcp.len)) + xlab("") + scale_x_discrete(breaks = NULL)
grid.arrange(p1, p2, p3, ncol=2, nrow=2)
p1 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_relative)) + xlab("") + scale_x_discrete(breaks = NULL)
p2 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_delta_displayed)) + xlab("") + scale_x_discrete(breaks = NULL)
p3 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.len)) + xlab("") + scale_x_discrete(breaks = NULL)
p4 <- ggplot(sewModbusDT[tcp.srcport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=mbtcp.len)) + xlab("") + scale_x_discrete(breaks = NULL)
grid.arrange(p1, p2, p3, p4, ncol=2, nrow=2)
p1 <- ggplot(sewModbusDT[tcp.dstport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_relative)) + xlab("") + scale_x_discrete(breaks = NULL)
p2 <- ggplot(sewModbusDT[tcp.dstport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_delta_displayed)) + xlab("") + scale_x_discrete(breaks = NULL)
p3 <- ggplot(sewModbusDT[tcp.dstport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.len)) + xlab("") + scale_x_discrete(breaks = NULL)
p4 <- ggplot(sewModbusDT[tcp.dstport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=mbtcp.len)) + xlab("") + scale_x_discrete(breaks = NULL)
grid.arrange(p1, p2, p3, p4, ncol=2, nrow=2)
ggplot(mergedSewDT, aes(x = mbtcp.modbus.reference_num, y = d)) +
geom_boxplot(fill="lightpink4") +
ggtitle("Boxplot of Modbus Data Values by Reference Number")
ggplot(mergedSewDT, aes(x = mbtcp.modbus.reference_num, y = d)) +
geom_boxplot(fill="lightpink4") +
facet_grid(~mbtcp.modbus.func_code) +
ggtitle("Boxplot of Modbus Data Values by Reference Number")
ggplot(mergedSewDT, aes(x = factor(0), y = d)) +
geom_boxplot(fill="lightpink4") +
facet_grid(~mbtcp.modbus.func_code,mbtcp.modbus.reference_num) +
ggtitle("Boxplot of Modbus Data Values by Reference Number")
ggplot(mergedSewDT, aes(x = factor(0), y = d)) +
geom_boxplot(fill="lightpink4") +
facet_grid(~mbtcp.modbus.reference_num) +
ggtitle("Boxplot of Modbus Data Values by Reference Number")
ggplot(mergedSewDT, aes(x = factor(0), y = d)) +
geom_boxplot(fill="lightpink4") +
facet_grid(~mbtcp.modbus.func_code+mbtcp.modbus.reference_num) +
ggtitle("Boxplot of Modbus Data Values by Reference Number")
ggplot(mergedSewDT, aes(x = factor(0), y = d)) +
geom_boxplot(fill="lightpink4") +
facet_grid(~mbtcp.modbus.func_code+mbtcp.modbus.reference_num) +
xlab("") + scale_x_discrete(break=NULL)
ggtitle("Boxplot of Modbus Data Values by Function/Reference Number")
ggplot(mergedSewDT, aes(x = factor(0), y = d)) +
geom_boxplot(fill="lightpink4") +
facet_grid(~mbtcp.modbus.func_code+mbtcp.modbus.reference_num) +
xlab("") + scale_x_discrete(break=NULL) +
ggtitle("Boxplot of Modbus Data Values by Function/Reference Number")
ggplot(mergedSewDT, aes(x = factor(0), y = d)) +
geom_boxplot(fill="lightpink4") +
facet_grid(~mbtcp.modbus.func_code+mbtcp.modbus.reference_num) +
xlab("") #+ scale_x_discrete(break=NULL) +
ggtitle("Boxplot of Modbus Data Values by Function/Reference Number")
ggplot(mergedSewDT, aes(x = factor(0), y = d)) +
geom_boxplot(fill="lightpink4") +
facet_grid(~mbtcp.modbus.func_code+mbtcp.modbus.reference_num) +
xlab("") + # scale_x_discrete(break=NULL) +
ggtitle("Boxplot of Modbus Data Values by Function/Reference Number")
ggplot(mergedSewDT, aes(x = factor(0), y = d)) +
geom_boxplot(fill="lightpink4") +
facet_grid(~mbtcp.modbus.func_code+mbtcp.modbus.reference_num) +
xlab("") + scale_x_discrete(breaks = NULL) +
ggtitle("Boxplot of Modbus Data Values by Function/Reference Number")
ggplot(mergedSewDT, aes(x = factor(0), y = d)) +
geom_boxplot(fill="lightpink4") +
facet_grid(mbtcp.modbus.func_code~mbtcp.modbus.reference_num) +
xlab("") + scale_x_discrete(breaks = NULL) +
ggtitle("Boxplot of Modbus Data Values by Function/Reference Number")
requests<-sewModbusDT[tcp.dstport=="502"]
p1 <- ggplot(requests, aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_relative)) + xlab("") + scale_x_discrete(breaks = NULL)
p2 <- ggplot(sewModbusDT[tcp.dstport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_delta_displayed)) + xlab("") + scale_x_discrete(breaks = NULL)
p3 <- ggplot(sewModbusDT[tcp.dstport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=frame.len)) + xlab("") + scale_x_discrete(breaks = NULL)
p4 <- ggplot(sewModbusDT[tcp.dstport=="502"], aes(x=factor(0))) +
geom_boxplot(aes(y=mbtcp.len)) + xlab("") + scale_x_discrete(breaks = NULL)
grid.arrange(p1, p2, p3, p4, ncol=2, nrow=2)
p1 <- ggplot(requests, aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_relative)) + xlab("") + scale_x_discrete(breaks = NULL)
p2 <- ggplot(requests, aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_delta_displayed)) + xlab("") + scale_x_discrete(breaks = NULL)
p3 <- ggplot(requests, aes(x=factor(0))) +
geom_boxplot(aes(y=frame.len)) + xlab("") + scale_x_discrete(breaks = NULL)
p4 <- ggplot(requests, aes(x=factor(0))) +
geom_boxplot(aes(y=mbtcp.len)) + xlab("") + scale_x_discrete(breaks = NULL)
grid.arrange(p1, p2, p3, p4, ncol=2, nrow=2)
p1 <- ggplot(responses, aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_relative)) + xlab("") + scale_x_discrete(breaks = NULL)
p2 <- ggplot(responses, aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_delta_displayed)) + xlab("") + scale_x_discrete(breaks = NULL)
p3 <- ggplot(responses, aes(x=factor(0))) +
geom_boxplot(aes(y=frame.len)) + xlab("") + scale_x_discrete(breaks = NULL)
p4 <- ggplot(responses, aes(x=factor(0))) +
geom_boxplot(aes(y=mbtcp.len)) + xlab("") + scale_x_discrete(breaks = NULL)
grid.arrange(p1, p2, p3, p4, ncol=2, nrow=2)
sewModbusDT[, .(Count=.N), by=Protocol][order(-Count)]
protocol <- sewModbusDT$Protoco
sewModbusDT[, .(Count=.N), by=ip.proto][order(-Count)]
protocol <- sewModbusDT$ip.proto
camembert(protocol)
rm(protocol)
require(TRSbook)
camembert(protocol)
rm(protocol)
sewModbusDT[, .(Count=.N), by=ip.proto][order(-Count)]
protocol <- sewModbusDT$ip.proto
camembert(protocol)
sewEndPtsDT <- as.data.table(read.csv("~/rDia/data/scadaCops/normal/sewTCPEndpoints.csv"))
sewTCPConvDT <- as.data.table(read.csv("~/rDia/data/scadaCops/normal/sewTCPConv.csv"))
g <- graph.data.frame(sewTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)], directed=FALSE)
gAdjMtx <- get.adjacency(g)  # adjacency mtx
gAdj <- graph.adjacency(gAdjMtx, mode="undirected", weighted=TRUE)
V(gAdj)$size <- degree(gAdj)*5  # node size according to degree of centrality
eW <- E(gAdj)$weight  # edge weights
eW <- ceiling(eW/max(eW)*55)
eW[eW>10] <- 10
plot.igraph(gAdj, main="Graph of SCADA Network", edge.width=eW)
rm(g, gAdjMtx, gAdj, eW)
g <- graph.data.frame(scadaTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)], directed=FALSE)
gAdjMtx <- get.adjacency(g)  # adjacency mtx
gAdj <- graph.adjacency(gAdjMtx, mode="undirected", weighted=TRUE)
#V(gAdj)$size <- degree(gAdj)*5  # node size according to degree of centrality
eW <- E(gAdj)$weight  # edge weights
eW <- ceiling(eW/max(eW)*55)
eW[eW>10] <- 10
plot.igraph(gAdj, main="Graph of SCADA Network", edge.width=eW)
rm(g, gAdjMtx, gAdj, eW)
g <- graph.data.frame(sewTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)], directed=FALSE)
gAdjMtx <- get.adjacency(g)  # adjacency mtx
gAdj <- graph.adjacency(gAdjMtx, mode="undirected", weighted=TRUE)
#V(gAdj)$size <- degree(gAdj)*5  # node size according to degree of centrality
eW <- E(gAdj)$weight  # edge weights
eW <- ceiling(eW/max(eW)*55)
eW[eW>10] <- 10
plot.igraph(gAdj, main="Graph of SCADA Network", edge.width=eW)
rm(g, gAdjMtx, gAdj, eW)
g <- graph.data.frame(sewTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)], directed=FALSE)
gAdjMtx <- get.adjacency(g)  # adjacency mtx
gAdj <- graph.adjacency(gAdjMtx, mode="undirected", weighted=TRUE)
V(gAdj)$size <- degree(gAdj)*50  # node size according to degree of centrality
eW <- E(gAdj)$weight  # edge weights
eW <- ceiling(eW/max(eW)*55)
eW[eW>10] <- 10
plot.igraph(gAdj, main="Graph of SCADA Network", edge.width=eW)
save(sewTCPConvDT, sewTCPEndpointsDT, file="sewConvEnd.Rda")
save(sewTCPConvDT, sewEndpointsDT, file="sewConvEnd.Rda")
save(sewTCPConvDT, sewEndptsDT, file="sewConvEnd.Rda")
save(sewTCPConvDT, sewEndPtsDT, file="sewConvEnd.Rda")
sewTCPConvDT[,bwplot(~Bytes/1e6, main="Boxplot of Source and Packet Size",
xlab="MBytes", col="red", layout=c(3,3),
scales = list(y=list(relation="free")
))]
grid.arrange()
ggplot(sewTCPConvDT, aes(x = factor(0), y = Bytes/1e6)) +
geom_boxplot() + xlab("") + scale_x_discrete(breaks = NULL)
ggplot(sewTCPConvDT, aes(x = factor(0), y = Bytes/1e6)) +
geom_boxplot() + xlab("") + scale_x_discrete(breaks = NULL) +
ylab("MBytes")
ggplot(sewTCPConvDT, aes(x = Rel.Start, y=Port.B))+
geom_point(shape=1, colour="blue", alpha=0.5)
ggplot(sewTCPConvDT, aes(x = Rel.Start, y=Address.B))+
geom_point(shape=1, colour="blue", alpha=0.5)
View(sewTCPConvDT)
sewTCPConvDT[,bwplot(~Bytes/1e6, main="Boxplot of Source and Packet Size",
xlab="MBytes", col="red", layout=c(3,3),
scales = list(y=list(relation="free")
))]
ggplot(sewTCPConvDT, aes(x = factor(0), y = Bytes/1e6)) +
geom_boxplot() + xlab("") + scale_x_discrete(breaks = NULL) +
ylab("MBytes")
ggplot(sewTCPConvDT, aes(x = factor(0), y = Bytes/1e6)) +
geom_boxplot() + xlab("") + scale_x_discrete(breaks = NULL) +
ggtitle("Boxplot of Source and Packet Size") +
ylab("MBytes")
ggplot(sewModbusDT, aes(x = frame.time.relative, y=ip.sc))+
geom_point(shape=1, colour="blue", alpha=0.5)
ggplot(sewModbusDT, aes(x = frame_time.relative, y=ip.sc))+
geom_point(shape=1, colour="blue", alpha=0.5)
ggplot(sewModbusDT, aes(x = frame.time_relative, y=ip.sc))+
geom_point(shape=1, colour="blue", alpha=0.5)
ggplot(sewModbusDT, aes(x = frame.time_relative, y=ip.src))+
geom_point(shape=1, colour="blue", alpha=0.5)
ggplot(sewModbusDT, aes(y = frame.time_relative, x=ip.src))+
geom_point(shape=1, colour="blue", alpha=0.5)
ggplot(sewTCPConvDT, aes(x = factor(0), y = Bytes/1e6)) +
geom_boxplot() + xlab("") + scale_x_discrete(breaks = NULL) +
ggtitle("Boxplot of Source and Packet Size") +
ylab("MBytes")
ggplot(sewTCPConvDT, aes(x = factor(0), y = Bytes/1e6)) +
geom_boxplot() + xlab("") + scale_x_discrete(breaks = NULL) +
facet_grid(Address.A) +
ggtitle("Boxplot of Source and Packet Size") +
ylab("MBytes")
ggplot(sewTCPConvDT, aes(x = factor(0), y = Bytes/1e6)) +
geom_boxplot() + xlab("") + scale_x_discrete(breaks = NULL) +
facet_grid(~Address.A) +
ggtitle("Boxplot of Source and Packet Size") +
ylab("MBytes")
ggplot(sewTCPConvDT, aes(x = factor(0), y = Bytes/1e6)) +
geom_boxplot(fill="darkkhaki") + xlab("") + scale_x_discrete(breaks = NULL) +
facet_grid(~Address.A) +
ggtitle("Boxplot of Packet Size by Source") +
ylab("MBytes")
ggplot(sewTCPConvDT, aes(x = factor(0), y = Bytes/1e6)) +
geom_boxplot(fill="darkorchid3") + xlab("") + scale_x_discrete(breaks = NULL) +
facet_grid(~Address.A) +
ggtitle("Boxplot of Packet Size by Source") +
ylab("MBytes")
p1 <- ggplot(requests, aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_relative)) + xlab("") + scale_x_discrete(breaks = NULL)
p2 <- ggplot(requests, aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_delta_displayed)) + xlab("") + scale_x_discrete(breaks = NULL)
p3 <- ggplot(requests, aes(x=factor(0))) +
geom_boxplot(aes(y=frame.len)) + xlab("") + scale_x_discrete(breaks = NULL)
p4 <- ggplot(requests, aes(x=factor(0))) +
geom_boxplot(aes(y=mbtcp.len)) + xlab("") + scale_x_discrete(breaks = NULL)
grid.arrange(p1, p2, p3, p4, ncol=2, nrow=2)
ggplot(requests, aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_relative), color="aquamarine4") + xlab("") + scale_x_discrete(breaks = NULL)
ggplot(requests, aes(x=factor(0))) +
geom_boxplot(aes(y=frame.time_relative), fill="aquamarine4") + xlab("") + scale_x_discrete(breaks = NULL)
load("sewConvEnd.Rda")
load("/home/lisa/rDia/sew.Rda")
sewModbusDT[, .(Count=.N), by=ip.proto][order(-Count)]
protocol <- sewModbusDT$ip.proto
camembert(protocol)
rm(protocol)
invisible(dev.off())
g <- graph.data.frame(sewTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)], directed=FALSE)
gAdjMtx <- get.adjacency(g)  # adjacency mtx
gAdj <- graph.adjacency(gAdjMtx, mode="undirected", weighted=TRUE)
V(gAdj)$size <- degree(gAdj)*50  # node size according to degree of centrality
eW <- E(gAdj)$weight  # edge weights
eW <- ceiling(eW/max(eW)*55)
eW[eW>10] <- 10
plot.igraph(gAdj, main="Graph of SCADA Network", edge.width=eW)
rm(g, gAdjMtx, gAdj, eW)
invisible(dev.off())
?camembert
ggplot(sewModbusDT, aes(x=mbtcp.modbus.reference_num, fill=mbtcp.modbus.reference_num)) +
geom_bar(stat="bin") +
facet_grid(~mbtcp.modbus.func_code) +
ggtitle("Bar Chart of Reference Numbers by Function Code") +
#ylab("Reference Number") +
scale_fill_brewer(palette="Set1")
mergedSewDT[,d]
mergedSewDT[,.(count=.N, d.min=min(d), d.mean=mean(d, na.rm=T), d.max=max(d),
d.sd=sd(d, na.rm=T), min.resp.time.rel=min(resp.time.rel),
min.resp.time.rel= max(resp.time.rel)),
by =.(resp.func.code, mbtcp.modbus.reference_num)][
order(resp.func.code, mbtcp.modbus.reference_num)]
nmmaps <- read.csv("~/tutorials/chicago-nmmaps.csv")
View(nmmaps)
nmmaps[,(death, temp, dewpoint, pm10, o3)
nmmaps[,(death, temp, dewpoint, pm10, o3)]
nmmaps[,.(death, temp, dewpoint, pm10, o3)]
nmmaps[,sort(c("death", "temp", "dewpoint", "pm10", "o3"))]
head(nmmaps[,sort(c("death", "temp", "dewpoint", "pm10", "o3"))])
melt(data=mergedSewDT, id.vars="mbtcp.modbus.reference_num")
modDataStats <- mergedSewDT[,.(count=.N, d.min=min(d), d.mean=mean(d, na.rm=T), d.max=max(d),
d.sd=sd(d, na.rm=T), min.resp.time.rel=min(resp.time.rel),min.resp.time.rel= max(resp.time.rel)),
by=.(resp.func.code, mbtcp.modbus.reference_num)][order(resp.func.code, mbtcp.modbus.reference_num)]
View(modDataStats)
?merge
modDataStats[mbtcp.modbus.reference_num, d.mean]
modDataStats[,.(mbtcp.modbus.reference_num, d.mean)]
?cast
cast(modDataStats[,.(mbtcp.modbus.reference_num, d.mean)], d.mean ~ mbtcp.modbus.reference_num)
require(reshape)
require(reshape2)
cast(modDataStats[,.(mbtcp.modbus.reference_num, d.mean)], d.mean ~ mbtcp.modbus.reference_num)
dcast(modDataStats[,.(mbtcp.modbus.reference_num, d.mean)], d.mean ~ mbtcp.modbus.reference_num)
dcast(modDataStats[,.(resp.func.code, mbtcp.modbus.reference_num, d.mean)], d.mean ~ mbtcp.modbus.reference_num)
dcast(modDataStats[,.(resp.func.code, mbtcp.modbus.reference_num, d.mean)], resp.func.code ~ mbtcp.modbus.reference_num)
c <- dcast(modDataStats[,.(resp.func.code, mbtcp.modbus.reference_num, d.mean)], resp.func.code ~ mbtcp.modbus.reference_num)
c
head(nmmaps[,sort(c("death", "temp", "dewpoint", "pm10", "o3"))])
?cor
rm(c)
casted <- dcast(modDataStats[,.(resp.func.code, mbtcp.modbus.reference_num, d.mean)], resp.func.code ~ mbtcp.modbus.reference_num)
thecor <- cor(casted[,sort(c("0", "1", "2", "3"))], method="spearman", use="pairwise.complete.obs", 2)
thecor
thecor <- cor(casted, method="spearman", use="pairwise.complete.obs", 2)
thecor <- cor(casted, method="spearman", use="pairwise.complete.obs")
casted[2:4]
casted[2:5]
thecor <- cor(casted[2:5], method="spearman", use="pairwise.complete.obs")
thecor
thecor <- cor(casted[2:5], method="spearman", use="complete.obs")
thecor
invisible(dev.off())
g1 <- graph.data.frame(sewTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)], directed=FALSE)
gAdjMtx <- get.adjacency(g1)  # adjacency mtx
gAdj <- graph.adjacency(gAdjMtx, mode="undirected", weighted=TRUE)
V(gAdj)$size <- degree(gAdj)*40  # node size according to degree of centrality
eW <- E(gAdj)$weight  # edge weights
eW <- ceiling(eW/max(eW)*55)
eW[eW>10] <- 10
plot.igraph(gAdj, main="Graph of SCADA Network", edge.width=eW)
invisible(dev.off())
save(scadaDT, file="scada.Rda")
save(scadaTCPConvDT, scadaEndPtsDT, file="scadaConvEnd.Rda")
save(modbusDT, moddataDT, mergedDT, file="modData.Rda")
View(scadaDT)
rm(casted, mbtcp.modbus.unit_id, numrows, mergedDT, casted)
rm(modDataStats, modbusDT, mergedSewDT, sewTCPConvDT, sewModbusDT)
rm(sewEndPtsDT)
rm(thecor)
