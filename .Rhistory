mbtcp.modbus.reference_num)]
setkey(attackSrcs, ip.src)
badSrcs <- attackSrcs[!srcs]
badSrcs
setkey(attackSrcs, ip.src)
badDsts <- attackDst[!dst]
setkey(attackDst, ip.dst)
badDsts <- attackDst[!dst]
badDsts
setkey(attackDu, ip.dst, mbtcp.modbus.unit_id)
badDus <- attackDu[!du]
badDu
badDus
du
attackDu
setkey(attackDu, IP_DST_MODBUS_UNIT_ID)
badDus <- attackDu[!du]
badDus
setkey(attackSfunc, IP_SRC_MOD_FUNC)
badSmac <- attackSmac[!smac]
setkey(attackSmac, IP_SRC_MAC_ADDR)
badSmac <- attackSmac[!smac]
setkey(attackSfunc, IP_SRC_MOD_FUNC)
badSfunc <- attackSfunc[!sfunc]
badSfunc
badSfunc
sfunc
attackSfunc
setkey(attackSfuncRef, IP_SRC_MOD_FUNC_REF)
badSfuncRef <- attackSfuncRef[!sfuncRef]
badSfuncRef
attackSfuncRef
attackSfuncRef
attackAvgPkt <- attackModbusDT[,.(frequency=.N),by=frame.second][,mean(frequency)]
avgPkt
attackAvgPkt
avgPkt - attackAvgPkt
srcFuncFreq
srcFuncFreq
attackSrcFuncFreq
setkey(attackSrcFuncFreq, ip.src, ip.dst, mbtcp.modbus.func_code)
badSrcFuncFreq[!attackSrcFuncFreq]
badSrcFuncFreq <- attackSrcFuncFreq[!srcFuncFreq]]
badSrcFuncFreq <- attackSrcFuncFreq[!srcFuncFreq]
badSrcFuncFreq
?merge
attackSrcFuncFreq
srcFuncFreq
d1 <- data.table(a=rep(1:2,each=3), b=1:6, key="a,b")
d2 <- data.table(a=0:1, bb=10:11, key="a")
d3 <- data.table(a=0:1, key="a")
d4 <- data.table(a=0:1, b=0:1, key="a,b")
merge(d1, d4, by="a", suffixes=c(".d1", ".d4"))
d1
d2
d4
clear
d1
d4
merge(srcFuncFreq,attackSrcFuncFreq, by=.(ip.src,ip.dst,mbtcp.modbus.func_code,suffixes=c(".n", ".a")))
merge(srcFuncFreq,attackSrcFuncFreq, by=.(ip.src,ip.dst,mbtcp.modbus.func_code),suffixes=c(".n", ".a")))
merge(srcFuncFreq,attackSrcFuncFreq, by=.("ip.src,ip.dst","mbtcp.modbus.func_code"),suffixes=c(".n", ".a")))
merge(srcFuncFreq,attackSrcFuncFreq, by=.("ip.src,ip.dst","mbtcp.modbus.func_code"),suffixes=c(".n", ".a"))
merge(srcFuncFreq,attackSrcFuncFreq, by=c("ip.src,ip.dst","mbtcp.modbus.func_code"),suffixes=c(".n", ".a"))
merge(srcFuncFreq,attackSrcFuncFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code"),suffixes=c(".n", ".a"))
merge(srcFuncFreq,attackSrcFuncFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code"),suffixes=c(".n", ".a"))[avgFrequencySec.n-avgFrequencySec.a]
mergedSrcFuncFreq <- merge(srcFuncFreq,attackSrcFuncFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code"),suffixes=c(".n", ".a"))
mergedSrcFuncFreq
mergedSrcFuncFreq[avgFrequencySec.n - avgFrequencySec.a]
mergedSrcFuncFreq[avgFrequencySec.n - avgFrequencySec.a]
mergedSrcFuncFreq
mergedSrcFuncFreq[avgFrequencySec.n - avgFrequencySec.a,]
mergedSrcFuncFreq$avgFrequencySec.n - mergedSrcFuncFreq$avgFrequencySec.a
mergedSrcFuncFreq$avgFrequencySec.n - mergedSrcFuncFreq$avgFrequencySec.a
srcFuncRefFreq
attackSrcFuncRefFreq
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code"),suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq,
by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq[avgFrequencySec.n - avgFrequencySec.a,]
mergedSrcFuncRefFreq
mergedSrcFuncRefFreq[avgFrequencySec.n - avgFrequencySec.a,]
mergedSrcFuncRefFreq
mergedSrcFuncRefFreq$avgFrequncySec.n
srcFuncFreq
attackSrcFuncFreq
mergedSrcFuncRefFreq$avgFrequencySec.n - mergedSrcFuncFreq$avgFrequencySec.a
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq[avgFrequencySec.n - avgFrequencySec.a,]
mergedSrcFuncRefFreq
mergedSrcFuncRefFreq[avgFrequncySec.n - avgFrequncySec.a,]
mergedSrcFuncRefFreq$avgFrequencySec.n - mergedSrcFuncFreq$avgFrequencySec.a
mergedSrcFuncRefFreq$avgFrequencySec.n - mergedSrcFuncFreq$avgFrequencySec.a
mergedSrcFuncFreq[avgFrequencySec.n - avgFrequencySec.a,]
require(knitr)
require(data.table)
#install.packages("xtable")
require(xtable)
srcFuncRefFreq <- reqs[,.(frequency=.N),
by =.(ip.src, ip.dst, mbtcp.modbus.func_code, mbtcp.modbus.reference_num,
frame.second)][
order(ip.src, ip.dst, mbtcp.modbus.func_code, mbtcp.modbus.reference_num,
frame.second)][,.(avgFrequncySec=mean(frequency)),
by=.(ip.src, ip.dst, mbtcp.modbus.func_code,
mbtcp.modbus.reference_num)]
load("attack.Rda")
attackModbusDT$frame.second <- floor(attackModbusDT$frame.time_relative)
attackSrcFuncRefFreq
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq[avgFrequencySec.n - avgFrequencySec.a,]
attackSrcFuncRefFreq
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq[avgFrequencySec.n - avgFrequencySec.a,]
mergedSrcFuncRefFreq
mergedSrcFuncRefFreq[avgFrequncySec.n - avgFrequncySec.a,]
?print
tab <- xtable(attackSrcs[!srcs])
print(tab)
mergedSrcFuncRefFreq
mergedSrcFuncRefFreq$avgFrequncySec.n - mergedSrcFuncRefFreq$avgFrequncySec.a
?kable
kable(attackSrcs[!srcs], caption='Detected Sources')
setkey(attackSfuncRef, IP_SRC_MOD_FUNC_REF)
attackSfuncRef[!sfuncRef]
mergedSrcFuncRefFreq$avgFrequncySec.n - mergedSrcFuncRefFreq$avgFrequncySec.a
mergedSrcFuncRefFreq$avgFrequncySec.n - mergedSrcFuncRefFreq$avgFrequncySec.a
mergedSrcFuncRefFreq[avgFrequncySec,]
mergedSrcFuncRefFreq[avgFrequncySec.n,]
mergedSrcFuncRefFreq
mergedSrcFuncRefFreq[avgFrequncySec.n]
mergedSrcFuncRefFreq[avgFrequncySec.n,]
str(mergedSrcFuncRefFreq)
mergedSrcFuncRefFreq
kable(attackSfuncRef[!sfuncRef], caption='Anomalous Source / MODBUS Function Code / Reference Number')
kable(attackSfunc[!sfunc], caption='Anomalous Source / MODBUS Function Code Pairs')
smac
attackSmac
mergedSrcFuncFreq[avgFrequencySec.n - avgFrequencySec.a,]
kable(mergedSrcFuncFreq[avgFrequencySec.n - avgFrequencySec.a,])
attackSfuncRef[!sfuncRef]
kable(attackSfunc[!sfunc], caption='Anomalous Source / MODBUS Function Code Pairs')
kable(avgPkt - attackAvgPkt, caption='Difference in Packet Averages')
setkey(attackSrcs, ip.src)
kable(attackSrcs[!srcs], caption='Anomalous Sources', format='latex')
?print
?xtable
print(summary(reqs), floating.env="sidewaystable", comment=FALSE)
print(xtable(summary(reqs)), floating.env="sidewaystable", comment=FALSE)
str(reqs)
reqs[,1:11]
reqs[1:11]
reqs[1:11,]
reqs[,1]
reqs[,.(1)]
reqs[,.(frame.number)]
summary(reqs)[,.(frame.number)]
summary(reqs)
str(summary(reqs))
?table
as.data.table(summary(reqs))
as.data.table(summary(reqs))[,.(V1)]
as.data.table(summary(reqs))[,.(V2)]
as.data.table(summary(reqs))[,.(V2,V3)]
str(summary(reqs))
reqs
summary(reqs)
rdt<-as.data.table(summary(reqs))
rdt
rdf<-as.data.frame(summary(reqs))
rdf
summary(reqs)
str(summary(reqs))
?table
summary(reqs)[c(,1:10)]
summary(reqs)[c(1,1:10)]
summary(reqs)[c(1:,1:10)]
summary(reqs)[c(1:10,1:10)]
summary(reqs)[c(1:nrow(reqs),1:10)]
nrow(summary(reqs))
summary(reqs)
summary(reqs)[c(1:7,1:10)]
summary(reqs)[c(0:7,1:10)]
summary(reqs)
tab<-summary(reqs)[c(1:7,1:10)]
xtable(tab)
tab<-as.table(summary(reqs)[c(1:7,1:10)])
tab<-as.matrix(summary(reqs)[c(1:7,1:10)])
tab
?as.matrix
tab<-as.matrix(summary(reqs)[c(1:7,1:10)], nrow=7, ncol=10)
tab
print(xtable(tab))
summary(reqs)
reqs
reqs[,1:10]
reqs[,.(frame.number)]
reqs[,.(frame.number, frame.time_relative, frame.time_delta, frame.len,ip.proto)]
reqs[,.(frame.number, frame.time_relative, frame.time_delta, frame.len,ip.proto, ip.version,ip.src,etch.src,ip.dst,eth.dst)]
reqs[,.(frame.number, frame.time_relative, frame.time_delta, frame.len,ip.proto, ip.version,ip.src,eth.src,ip.dst,eth.dst)]
summary(reqs[,.(frame.number, frame.time_relative, frame.time_delta, frame.len,ip.proto, ip.version,ip.src,eth.src,ip.dst,eth.dst)])
?kable
View(requests)
requests<-sewModbusDT[tcp.dstport=="502"]
View(requests)
summary(responses)
responses
responses<-sewModbusDT[tcp.srcport=="502"]
requests<-sewModbusDT[tcp.dstport=="502"]
req5<-summary(requests[,.(mbtcp.modbus.data, frame.second)])
rep5<-summary(responses[,.(mbtcp.modbus.data, frame.second)])
req5<-summary(requests[,.(mbtcp.modbus.data, frame.second)])
req5
req5<-summary(requests[,.(mbtcp.modbus.data, frame.second)])
req5
save(attackModbusDT, file="attack.Rda")
View(sewModbusDT)
save(sewModbusDT, file="sew.Rda")
mergedSewDT
load("/home/lisa/rDia/sewMerged.Rda")
summary(mergedSewDT)
rep1<-summary(mergedSewDT[,.(frame.number, frame.time_relative, frame.time_delta, frame.len)])
rep1
rep2<-summary(mergedSewDT[,.(ip.src, eth.src, ip.dst, eth.dst)])
rep3<-summary(mergedSewDT[,.(mbtcp.modbus.unit_id, tcp.srcport, tcp.dstport)])
rep4<-summary(mergedSewDT[,.(mbtcp.prot_id, mbtcp.trans_id, mbtcp.len, mbtcp.modbus.func_code, )])
rep5<-summary(mergedSewDT[,.(mbtcp.modbus.word_cnt, frame.second, mbtcp.modbus.reference_num)])
normalModbusDT
save(normalModbusDT, file="normal.Rda")
attackModbusD
attackModbusDT
save(attackModbusDT, file="attack.Rda")
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),suffixes=c(".n", ".a"))
kable(mergedSrcFuncRefFreq$avgFrequncySec.n - mergedSrcFuncRefFreq$avgFrequncySec.a, caption='Differences in Frequency \nof Source/Function Code/Reference Number')
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq, by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq
mergedSrcFuncRefFreq$avgFrequencySec.diff <- mergedSrcFuncRefFreq$avgFrequncySec.n - mergedSrcFuncRefFreq$avgFrequncySec.a
kable(mergedSrcFuncRefFreq, caption='Differences in Frequency \nof Source/Function Code/Reference Number')
mergedSrcFuncFreq <- merge(srcFuncFreq,attackSrcFuncFreq,
by=c("ip.src","ip.dst","mbtcp.modbus.func_code"),
suffixes=c(".n", ".a"))
mergedSrcFuncFreq
mergedSrcFuncFreq$avgFrequencySec.diff <- mergedSrcFuncFreq$avgFrequncySec.n - mergedSrcFuncFreq$avgFrequncySec.a
mergedSrcFuncFreq$avgFrequencySec.n - mergedSrcFuncFreq$avgFrequencySec.a
mergedSrcFuncFreq$avgFrequencySec.diff <- mergedSrcFuncFreq$avgFrequencySec.n - mergedSrcFuncFreq$avgFrequencySec.a
kable(mergedSrcFuncFreq, caption='Differences in Frequency \nof Source/Function Code')
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq,
by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),
suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq$avgFrequencySec.diff <- mergedSrcFuncRefFreq$avgFrequncySec.n - mergedSrcFuncRefFreq$avgFrequncySec.a
kable(mergedSrcFuncRefFreq, caption='Differences in Frequency \nof Source/Function Code/Reference Number')
m1 <- mergedSrcFuncRefFreq[,.(ip.src, ip.dst, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)]
mergedSrcFuncRefFreq
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq,
by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),
suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq,
by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),
suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq <- merge(srcFuncRefFreq,attackSrcFuncRefFreq,
by=c("ip.src","ip.dst","mbtcp.modbus.func_code","mbtcp.modbus.reference_num"),
suffixes=c(".n", ".a"))
mergedSrcFuncRefFreq$avgFrequencySec.diff <- mergedSrcFuncRefFreq$avgFrequncySec.n - mergedSrcFuncRefFreq$avgFrequncySec.a
mergeSrcFuncRefFreq
mergedSrcFuncRefFreq
m3 <- mergedSrcFuncRefFreq[,.(ip.src, ip.dst, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)]
kable(m3, caption='Differences in Frequency \nof Source/Function Code/Reference Number')
m4 <- mergedSrcFuncRefFreq[,.(avgFrequencySec.n, avgFrequencySec.a, avgFrequencySec.diff)]
m4 <- mergedSrcFuncRefFreq[,.(avgFrequncySec.n avgFrequncySec.a avgFrequencySec.diff)]
m4 <- mergedSrcFuncRefFreq[,.(avgFrequncySec.n, avgFrequncySec.a, avgFrequencySec.diff)]
kable(m4, caption=NULL)
mergedSrcFuncFreq <- merge(srcFuncFreq,attackSrcFuncFreq,
load(paste(homeDir, "sewConvEnd.Rda", sep=''))
homeDir <- "/home/lisa/rDia/"
load(paste(homeDir, "sewConvEnd.Rda", sep=''))
View(sewTCPConvDT)
View(sewEndPtsDT)
View(sewTCPConvDT)
load("~/rDia/normal.Rda")
View(normalModbusDT)
load(paste(homeDir, "normal.Rda", sep=''))
normalEndPtsDT <- as.data.table(read.csv("/home/lisa/Bureau/data/scadaCops/normalEndPts.csv"))
setkey(normalEndPtsDT, Address, Port)
str(scadaEndPtsDT)
normalEndPtsDT <- as.data.table(read.csv("/home/lisa/Bureau/data/scadaCops/normalEndPts.csv"))
setkey(normalEndPtsDT, Address, Port)
str(normalEndPtsDT)
normalEndPtsDT <- as.data.table(read.csv("/home/lisa/Bureau/data/scadaCops/normalEndPts.csv"))
library(data.table)
normalEndPtsDT <- as.data.table(read.csv("/home/lisa/Bureau/data/scadaCops/normalEndPts.csv"))
normalEndPtsDT <- as.data.table(read.csv("/home/lisa/Bureau/data/scadaCops/normal/normalEndPts.csv"))
setkey(normalEndPtsDT, Address, Port)
str(normalEndPtsDT)
normalTCPConvDT <- as.data.table(read.csv("/home/lisa/Bureau/data/scadaCops/normal/normalTCPConv.csv", header=TRUE,
na.strings="NA", quote="\"", dec=",", colClass=c(Port.A="factor", Port.B="factor")))
str(normalTCPConvDT)
View(normalEndPtsDT)
View(normalTCPConvDT)
View(sewEndPtsDT)
View(sewTCPConvDT)
save(normalTCPConvDT, normalEndPtsDT, file="normalConvEnd.Rda")
View(normalTCPConvDT)
g <- graph.data.frame(normalTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)], directed=FALSE)
?graph.data.frame
require(igraph)
?graph.data.frame
g <- graph.data.frame(normalTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)], directed=FALSE)
gAdjMtx <- get.adjacency(g)  # adjacency mtx
gAdj <- graph.adjacency(gAdjMtx, mode="undirected", weighted=TRUE)
V(gAdj)$size <- degree(gAdj)*40  # node size according to degree of centrality
eW <- E(gAdj)$weight  # edge weights
eW <- ceiling(eW/max(eW)*55)
eW[eW>10] <- 10
plot.igraph(gAdj, edge.width=eW)
rm(g, gAdjMtx, gAdj, eW)
load(paste(homeDir, "normalConvEnd.Rda", sep=''))
homeDir <- "/home/lisa/rDia/"
load(paste(homeDir, "normalConvEnd.Rda", sep=''))
g <- graph.data.frame(normalTCPConvDT[,.(Address.A, Address.B, Packets, Bytes, Duration)], directed=FALSE)
gAdjMtx <- get.adjacency(g)  # adjacency mtx
gAdj <- graph.adjacency(gAdjMtx, mode="undirected", weighted=TRUE)
V(gAdj)$size <- degree(gAdj)*40  # node size according to degree of centrality
eW <- E(gAdj)$weight  # edge weights
eW <- ceiling(eW/max(eW)*55)
eW[eW>10] <- 10
plot.igraph(gAdj, edge.width=eW)
rm(g, gAdjMtx, gAdj, eW)
?plot.igraph
load(paste(homeDir, "normal.Rda", sep=''))
View(normalModbusDT)
save(normalModbusDT file="normal.Rda")
load(paste(homeDir, "normal.Rda", sep=''))
View(normalModbusDT)
View(normalModbusDT)
save(normalModbusDT, file="normal.Rda")
normalModbusDT
View(normalModbusDT)
datafile <- "~/scada/data/normal.imp"
sewModbusDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=T
))
load(paste(homeDir, "sewMerged.Rda", sep=''))
datafile <- "~/scada/data/normal.imp"
normalModbusDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=T
))
# Load data from save(normalModbusDT file="normal.Rda")
load(paste(homeDir, "normal.Rda", sep=''))
datafile <- "~/scada/data/normal.imp"
normalMergedDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=T
))
View(normalMergedDT)
View(mergedSewDT)
save(normalMergedDT, file="normalMerged.Rda")
load(paste(homeDir, "normlMerged.Rda", sep=''))
homeDir <- "/home/lisa/rDia/"
load(paste(homeDir, "normlMerged.Rda", sep=''))
datafile <- "~/scada/data/normal.imp"
normalMergedDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=T
))
View(normalMergedDT)
rm(normalMergedDT)
load(paste(homeDir, "normlMerged.Rda", sep=''))
datafile <- "~/scada/data/normal.imp"
normalMergedDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=T
))
save(normalMergedDT, file="normalMerged.Rda")
getwd()
ls
rm(normalMergedDT)
load(paste(homeDir, "normlMerged.Rda", sep=''))
load(paste(homeDir, "normalMerged.Rda", sep=''))
ggplot(mergedNormalDT, aes(x=frame.time_relative, y=d, color=mbtcp.modbus.reference_num)) +
geom_point() + facet_grid(mbtcp.modbus.reference_num~respFuncCode) +
#  ggtitle("MODBUS Data Values \nOver Time by Reference Number") +
scale_fill_brewer(palette="Spectral") +
theme(#plot.title = element_text(face="bold"),
plot.margin = unit(c(0, 0, 2, 0), "cm"),
legend.position = "top", legend.title = element_text(size=10))
ggplot(normalMergedDT, aes(resp.time.rel, d, color=mbtcp.modbus.reference_num)) +
geom_point() + facet_grid(~respFuncCode) +
scale_fill_brewer(palette="Set1")
require(ggplot2)
ggplot(normalMergedDT, aes(resp.time.rel, d, color=mbtcp.modbus.reference_num)) +
geom_point() + facet_grid(~respFuncCode) +
scale_fill_brewer(palette="Set1")
ggplot(normalMergedDT, aes(respTimeRel, d, color=mbtcp.modbus.reference_num)) +
geom_point() + facet_grid(~respFuncCode) +
scale_fill_brewer(palette="Set1")
invisible(dev.off())
ggplot(normalMergedDT, aes(respTimeRel, d, color=mbtcp.modbus.reference_num)) +
geom_point() + facet_grid(~respFuncCode) +
scale_fill_brewer(palette="Set1") +
##  ggtitle("MODBUS Data Value Over Time by Function Code") +
theme(#plot.title = element_text(face="bold"),
plot.margin = unit(c(0, 0, 2, 0), "cm"),
legend.position = "top", legend.title = element_text(size=10))
invisible(dev.off())
ggplot(normalMergedDT, aes(respTimeRel, d, color=mbtcp.modbus.reference_num)) +
geom_point() + facet_grid(~respFuncCode) +
scale_fill_brewer(palette="Set1") +
##  ggtitle("MODBUS Data Value Over Time by Function Code") +
theme(#plot.title = element_text(face="bold"),
plot.margin = unit(c(0, 0, 2, 0), "cm"),
legend.position = "top", legend.title = element_text(size=10))
?unit
require(grid)
ggplot(normalMergedDT, aes(respTimeRel, d, color=mbtcp.modbus.reference_num)) +
geom_point() + facet_grid(~respFuncCode) +
scale_fill_brewer(palette="Set1") +
##  ggtitle("MODBUS Data Value Over Time by Function Code") +
theme(#plot.title = element_text(face="bold"),
plot.margin = unit(c(0, 0, 2, 0), "cm"),
legend.position = "top", legend.title = element_text(size=10))
normalMergedT[,.(count=.N, d.min=min(d), d.mean=mean(d, na.rm=T), d.max=max(d),
d.sd=sd(d, na.rm=T), min.resp.time.rel=min(respTimeRel),
min.resp.time.rel= max(respTimeRel)),
by =.(respFuncCode, mbtcp.modbus.reference_num)][
order(respFuncCode, mbtcp.modbus.reference_num)]
normalMergedDT[,.(count=.N, d.min=min(d), d.mean=mean(d, na.rm=T), d.max=max(d),
d.sd=sd(d, na.rm=T), min.resp.time.rel=min(respTimeRel),
min.resp.time.rel= max(respTimeRel)),
by =.(respFuncCode, mbtcp.modbus.reference_num)][
order(respFuncCode, mbtcp.modbus.reference_num)]
ggplot(normalMergedDT, aes(x = factor(0), y = d)) +
geom_boxplot(fill="lightpink4") +
facet_grid(mbtcp.modbus.func_code~mbtcp.modbus.reference_num) +
xlab("") + scale_x_discrete(breaks = NULL) +
theme( plot.title = element_text(size=10))
pairs(normalMergedDT[,.(mbtcp.len, mbtcp.modbus.func_code=as.numeric(mbtcp.modbus.func_code),
mbtcp.modbus.reference_num=as.numeric(mbtcp.modbus.reference_num) , d)])
cloud(resp.time.rel ~ d + mbtcp.modbus.reference_num | resp.func.code, data = normalMergedDT[resp.func.code=="4"],
col.point = normalMergedDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "resp.time.rel",
panel.aspect = 0.7,
#      main="3D Scatterplot \nReference Number, Data Value Over Time for Function Code 4",
key = list(points = list(pch = 19, col = seq_along(levels(normalMergedDT$mbtcp.modbus.reference_num))),
text = list(levels(normalMergedDT$mbtcp.modbus.reference_num)), space = 'top',
columns = nlevels(normalMergedDT$mbtcp.modbus.reference_num)))
?cloud
cloud(resp.time.rel ~ d + mbtcp.modbus.reference_num | resp.func.code, data = normalMergedDT[resp.func.code=="4"],
col.point = normalMergedDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "resp.time.rel",
panel.aspect = 0.7,
#      main="3D Scatterplot \nReference Number, Data Value Over Time for Function Code 4",
key = list(points = list(pch = 19, col = seq_along(levels(normalMergedDT$mbtcp.modbus.reference_num))),
text = list(levels(normalMergedDT$mbtcp.modbus.reference_num)), space = 'top',
columns = nlevels(normalMergedDT$mbtcp.modbus.reference_num)))
require(lattice)
cloud(resp.time.rel ~ d + mbtcp.modbus.reference_num | resp.func.code, data = normalMergedDT[resp.func.code=="4"],
col.point = normalMergedDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "resp.time.rel",
panel.aspect = 0.7,
#      main="3D Scatterplot \nReference Number, Data Value Over Time for Function Code 4",
key = list(points = list(pch = 19, col = seq_along(levels(normalMergedDT$mbtcp.modbus.reference_num))),
text = list(levels(normalMergedDT$mbtcp.modbus.reference_num)), space = 'top',
columns = nlevels(normalMergedDT$mbtcp.modbus.reference_num)))
cloud(resp.time.rel ~ d + mbtcp.modbus.reference_num | resp.func.code, data = normalMergedDT[respFuncCode=="4"],
col.point = normalMergedDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "resp.time.rel",
panel.aspect = 0.7,
#      main="3D Scatterplot \nReference Number, Data Value Over Time for Function Code 4",
key = list(points = list(pch = 19, col = seq_along(levels(normalMergedDT$mbtcp.modbus.reference_num))),
text = list(levels(normalMergedDT$mbtcp.modbus.reference_num)), space = 'top',
columns = nlevels(normalMergedDT$mbtcp.modbus.reference_num)))
cloud(resp.time.rel ~ d + mbtcp.modbus.reference_num | respFuncCode, data = normalMergedDT[respFuncCode=="4"],
col.point = normalMergedDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "resp.time.rel",
panel.aspect = 0.7,
#      main="3D Scatterplot \nReference Number, Data Value Over Time for Function Code 4",
key = list(points = list(pch = 19, col = seq_along(levels(normalMergedDT$mbtcp.modbus.reference_num))),
text = list(levels(normalMergedDT$mbtcp.modbus.reference_num)), space = 'top',
columns = nlevels(normalMergedDT$mbtcp.modbus.reference_num)))
cloud(respTimeRel ~ d + mbtcp.modbus.reference_num | respFuncCode, data = normalMergedDT[respFuncCode=="4"],
col.point = normalMergedDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "resp.time.rel",
panel.aspect = 0.7,
#      main="3D Scatterplot \nReference Number, Data Value Over Time for Function Code 4",
key = list(points = list(pch = 19, col = seq_along(levels(normalMergedDT$mbtcp.modbus.reference_num))),
text = list(levels(normalMergedDT$mbtcp.modbus.reference_num)), space = 'top',
columns = nlevels(normalMergedDT$mbtcp.modbus.reference_num)))
View(normalMergedDT)
cloud(respTimeRel ~ d + mbtcp.modbus.reference_num | respFuncCode, data = normalMergedDT[respFuncCode=="4"],
col.point = normalMergedDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "resp.time.rel",
panel.aspect = 0.7,
#      main="3D Scatterplot \nReference Number, Data Value Over Time for Function Code 4",
key = list(points = list(pch = 19, col = seq_along(levels(normalMergedDT$mbtcp.modbus.reference_num))),
text = list(levels(normalMergedDT$mbtcp.modbus.reference_num)), space = 'top',
columns = nlevels(normalMergedDT$mbtcp.modbus.reference_num)))
cloud(respTimeRel ~ d + mbtcp.modbus.reference_num | respFuncCode, data = normalMergedDT[respFuncCode=="4"],
col.point = normalMergedDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "respTimeRel",
panel.aspect = 0.7,
#      main="3D Scatterplot \nReference Number, Data Value Over Time for Function Code 4",
key = list(points = list(pch = 19, col = seq_along(levels(normalMergedDT$mbtcp.modbus.reference_num))),
text = list(levels(normalMergedDT$mbtcp.modbus.reference_num)), space = 'top',
columns = nlevels(normalMergedDT$mbtcp.modbus.reference_num)))
cloud(respTimeRel ~ d + mbtcp.modbus.reference_num | respFuncCode, data = normalMergedDT[respFuncCode=="4"],
col.point = normalMergedDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "respTimeRel",
panel.aspect = 0.7
)
nlevels(normalMergedDT$mbtcp.modbus.reference_num)
list(levels(normalMergedDT$mbtcp.modbus.reference_num))
