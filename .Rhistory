xData
Data
sewModbusDT
?nrow
nrow(sewModbusDT %.% group_by(frame.number~ip.src))
aggregate(frame.number~ip.src, data=sewMergedDT, FUN=function(x){NROW(x)})
require(data.table)
aggregate(frame.number~ip.src, data=sewMergedDT, FUN=function(x){NROW(x)})
load("/home/lisa/rDia/sew.Rda")
aggregate(frame.number~ip.src, data=sewMergedDT, FUN=function(x){NROW(x)})
head(sewMergedDT)
aggregate(frame.number~ip.src, data=sewModbusDT, FUN=function(x){NROW(x)})
load("/home/lisa/rDia/sew.Rda")
h<-hash()
h[[colnames(src)]]<-src$ip.src
h[[colnames(dst)]]<-dst$ip.dst
confJS <- toJSON(h)
library(data.table)
library(tidyr)
library(lattice)
library(ggplot2)
library(gplots)
library(plyr)
library(dplyr)
library(reshape2)
library(RColorBrewer)
library(igraph)
library(png)
library(grid)
library(Matrix)
library(ROCR)
library(grid)
library(gridExtra)
library(rjson)
library(hash)
library(xts)
confJS <- toJSON(h)
confJS
rmconfJS
rm(confJS)
h<-hash()
h[[colnames(src)]]<-src$ip.src
h[[colnames(dst)]]<-dst$ip.dst
confJS <- toJSON(h)
confJS
h
dstJS
dst
toJSON(dst)
h
toJSON(dst)
toJSON(h)
install.packages("hash")
install.packages("hash")
install.packages("hash")
install.packages("hash")
install.packages("hash")
install.packages("hash")
install.packages("hash")
install.packages("hash")
install.packages("jsonlite")
library(jsonlite)
require(jsonlite)
?jsonlite
View(mergedSewDT)
confJS<- toJSON(list(src, dst))
require(data.table)
require(rjson)
require(plyr)
require(jsonlite)
confJS<- toJSON(list(src, dst))
confJS
?toJSON
require(rjson)
confJS<- toJSON(list(src, dst))
confJS
install.packages("rjson")
install.packages("rjson")
install.packages("rjson")
confJS<- toJSON(list(src, dst))
confJS
require(rjson)
confJS<- toJSON(list(src, dst))
confJS
dstU <- sewModbusDT[,.(ip.dst.unit_id = paste(ip.dst, mbtcp.modbus.unit_id, sep="/")),
dstU <- sewModbusDT[,.(ip.dst.unit_id = paste(ip.dst, mbtcp.modbus.unit_id, sep="/")),
by=.(ip.dst, mbtcp.modbus.unit_id)]
dstU
dstUJS <- toJSON(dstU[,.(ip.dst.unit_id=ip.dst.unit_id)])
dstUJS
dstU
dict<-list(ip.dst.unit_id = list("192.168.12.252/1"=list(ip="192.168.12.252", unitID="1"),
"192.168.12.53/1"=list(ip="192.168.12.53", unitID="1"))
)
toJSON(dict)
View(srcFunc)
View(srcFunc)
?unique
unique(srcFunc)
unique(mergedSewDT, by=c("ip.src","ip.dst","mbtcp.modbus.unit_id"))
unique(mergedSewDT$ip.src)
unique(mergedSewDT$ip.src, mergedSewDT$ip.dst)
unique(mergedSewDT, by=c("ip.src","ip.dst","mbtcp.modbus.unit_id"))
unique(mergedSewDT, by=c("ip.src","ip.dst","mbtcp.modbus.unit_id"))[,ip.src]
unique(mergedSewDT, by=c("ip.src","ip.dst","mbtcp.modbus.unit_id"))[,.(ip.src)]
unique(mergedSewDT, by=c("ip.src","ip.dst","mbtcp.modbus.unit_id"))[,.(ip.src, ip.dst)]
unique(mergedSewDT, by=c("ip.src","ip.dst","mbtcp.modbus.unit_id"))[,.(ip.src, ip.dst, mbtcp.modbus.unit_id)]
toJSON(unique(mergedSewDT, by=c("ip.src","ip.dst","mbtcp.modbus.unit_id"))[,.(ip.src, ip.dst, mbtcp.modbus.unit_id)])
toJSON(list(unique(mergedSewDT, by=c("ip.src","ip.dst","mbtcp.modbus.unit_id"))[,.(ip.src, ip.dst, mbtcp.modbus.unit_id)]))
remove.packages(rjson)
remove.packages("rjson")
?toJSON
?toJSON
toJSON(list(unique(mergedSewDT, by=c("ip.src","ip.dst","mbtcp.modbus.unit_id"))[,.(ip.src, ip.dst, mbtcp.modbus.unit_id)]))
remove.packages("jsonlite")
install.packages("rjson")
install.packages("rjson")
library(rjson)
toJSON(list(unique(mergedSewDT, by=c("ip.src","ip.dst","mbtcp.modbus.unit_id"))[,.(ip.src, ip.dst, mbtcp.modbus.unit_id)]))
remove.packages("rjson")
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
toJSON(list(unique(mergedSewDT, by=c("ip.src","ip.dst","mbtcp.modbus.unit_id"))[,.(ip.src, ip.dst, mbtcp.modbus.unit_id)]))
unique(mergedSewDT, by=c("ip.dst"))[,.(ip.dst)]
unique(mergedSewDT, by=c("ip.src"))[,.(ip.dst,mbtcp.modbus.unit_id)]
unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id)]
srcFunc <- sewModbusDT[,.(src.func = paste(ip.src, mbtcp.modbus.func_code, sep="/"))
, by=.(ip.src, mbtcp.modbus.func_code)]
srcFunc
sewModbusDT[,.(paste(ip.src, mbtcp.modbus.func_code, sep="/")=ip.src)
, by=.(ip.src, mbtcp.modbus.func_code)]
sewModbusDT[,.(paste(ip.src, mbtcp.modbus.func_code, sep="/")=ip.src), by=.(ip.src, mbtcp.modbus.func_code)]
sewModbusDT[,paste(ip.src, mbtcp.modbus.func_code, sep="/")]
sewModbusDT[,.(paste(ip.src, mbtcp.modbus.func_code, sep="/")), by=.(ip.src, mbtcp.modbus.func_code)]
sewModbusDT[,.(paste(ip.src, mbtcp.modbus.func_code, sep="/") = paste(ip.src, mbtcp.modbus.func_code, sep="/")), by=.(ip.src, mbtcp.modbus.func_code)]
sewModbusDT[,.(hi = paste(ip.src, mbtcp.modbus.func_code, sep="/")), by=.(ip.src, mbtcp.modbus.func_code)]
unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id)]
list(unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id)])
list(dstU=list(unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id)]))
toJSON(list(dstU=list(unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id)])))
?list
al<-new.env()
al$a<-10
al$b<-20
as.list(al)
toJSON(as.list(al))
list(unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id)])
toJSON(list(unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id)]))
toJSON(unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id)])
toJSON(list(dstU=unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id)]))
toJSON(list(IP_MOD_UNIT_ID=unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id)]))
unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id)]
unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id, paste(ip.dst,mbtcp.modbus.unit_id))]
unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id, ip_modbus_unit_id=paste(ip.dst,mbtcp.modbus.unit_id))]
unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id, ip_modbus_unit_id=paste(ip.dst,mbtcp.modbus.unit_id, sep="/"))]
unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id, ip_modbus_unit_id=paste(ip.dst,mbtcp.modbus.unit_id, sep="/"))]
f<-function(a,b) {
list(paste(a,b,sep="/")=list(ip=a, unitID=b))
}
f<-function(a,b) {
list((paste(a,b,sep="/"))=list(ip=a, unitID=b))
}
f<-function(a,b) {
list(a=list(ip=a, unitID=b))
}
ab
ab<-unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id, ip_modbus_unit_id=paste(ip.dst,mbtcp.modbus.unit_id, sep="/"))]
ab
?lapply
?apply
?unique
getIPUnit <- function(ip, unit) {
ipUnit<-paste(ip,unit,sep="/")
list(ipUnit=list(ip_addr=ip, modbus_unit_id=unit))
}
getIPUnit <- function(ip, unit) {
ipUnit<-paste(ip,unit,sep="/")
return(list(ipUnit=list(ip_addr=ip, modbus_unit_id=unit)))
}
getIPUnit <- function(dt) {
ipUnit<-paste(dt$ip.dst,dt$modbus.mbtcp.unit_id,sep="/")
return(list(ipUnit=list(ip_addr=dt$ip.dst, modbus_unit_id=dt$modbus.mbtcp.unit_id)))
}
ab
unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id)]
ab<-lapply(unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id)])
ab<-unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id)]
lapply(ab, getIPUnit(dt=ab)
)
getIPUnit <- function(dt) {
ipUnit<-paste(dt$ip.dst,dt$modbus.mbtcp.unit_id,sep="/")
return(list(ipUnit=list(ip_addr=dt$ip.dst, modbus_unit_id=dt$modbus.mbtcp.unit_id)))
}
lapply(ab, getIPUnit(dt=ab))
lapply(ab, getIPUnit(ab))
lapply(ab, getIPUnit(dt))
paste0
?paste0
e<- parse(text = paste("paste(",v1,",",v2,",sep=\"/\")"))
v1<-ip.dst
v2<-mbtcp.modbus.unit_id
e<- parse(text = paste("paste(",v1,",",v2,",sep=\"/\")"))
v1<-"ip.dst"
v2<-"mbtcp.modbus.unit_id"
e<- parse(text = paste("paste(",v1,",",v2,",sep=\"/\")"))
e
rDT<- ab[, e]
rDT
rDT<- ab[, eval(e)]
rDT
e<- parse(text = paste("paste(ip.dst,mbtcp.modbus.unit_id,sep=\"/\")"))
rDT<- ab[, eval(e)]
rDT
e<- parse(text = paste("paste(ip.dst,mbtcp.modbus.unit_id,sep=\"/\")"))
rDT<- ab[, eval(e)]
rDT
rDT<- ab[, .(eval(e)) ]
rDT
rDT<- ab[, .(eval(e), ip.dst, mbtcp.modbus.unit_id) ]
rDT
unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id)]
unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id, ip_modbus_unit_id=paste(ip.dst,mbtcp.modbus.unit_id, sep="/"))]
getIPUnit <- function(ipUnit, ip, unitID) {
return(list(ipUnit=list( ipUnit=list(ip_addr=ip, modbus_unit_id=unitID))))
}
getIPUnit <- function(ip, ipUnit, unitID) {
return(list(ipUnit=list( ipUnit=list(ip_addr=ip, modbus_unit_id=unitID))))
}
getIPUnit <- function(ip, ip.dst, unitID) {
return(list(ipUnit=list( ipUnit=list(ip_addr=ip, modbus_unit_id=unitID))))
}
getIPUnit <- function(unitID, ip, ip.dst) {
return(list(ipUnit=list( ipUnit=list(ip_addr=ip, modbus_unit_id=unitID))))
}
e<- parse(text="getIPUnit(ip_modbus_unit_id, ip, ip.dst)")
ab
unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id,
ip_modbus_unit_id=paste(ip.dst,mbtcp.modbus.unit_id, sep="/"))]
ab[,.(eval(e))]
e<- parse(text="getIPUnit(ip_modbus_unit_id, ip.dst, mbtcp.modbus.unit_id)")
ab[,.(eval(e))]
getIPUnit <- function(unitID, ip, ip.dst) {
return(list(ipUnit=list( ipUnit=list(ip_addr=ip, modbus_unit_id=unitID))))
}
e<- parse(text="getIPUnit(ip_modbus_unit_id, ip.dst, mbtcp.modbus.unit_id)")
ab[,.(eval(e))]
e<- parse(text="getIPUnit(ip_modbus_unit_id, ip.dst, mbtcp.modbus.unit_id)")
getIPUnit("192.168.12.252/1","192.168.12.252","1")
toJSON(getIPUnit("192.168.12.252/1","192.168.12.252","1"))
getIPUnit <- function(unitID, ip, ip.dst) {
return(list(ipUnit=list(list(ip_addr=ip, modbus_unit_id=unitID))))
}
getIPUnit("192.168.12.252/1","192.168.12.252","1")
getIPUnit("192.168.12.252/1","192.168.12.252","1")
toJSON(getIPUnit("192.168.12.252/1","192.168.12.252","1"))
?hash
h<-hash()
getIPUnit <- function(unitID, ip, ip.dst) {
h<-hash()
h(ip_addr=ip)
h(modbus_unit_id=unitID)
return(list(ipUnit=list(h)))
}
getIPUnit("192.168.12.252/1","192.168.12.252","1")
h
h<-(ip_addr<-"102.278.3")
h
h<-(ip_addr="102.278.3")
h
h<-("ip_addr"="102.278.3")
h
as.list(h)
h<-hash()
h<-("ip_addr"="102.278.3")
h[["ip_addr"]]
h[['ip_addr']]
h<-hash()
h[[colnames(src)]]<-src$ip.src
h[[colnames(dst)]]<-dst$ip.dst
h
getIPUnit <- function(unitID, ip, unit) {
h<-hash()
h[[unitID]]<-list("ip_addr"=ip, "modbus_unit"=unit)
return(h)
}
getIPUnit("192.168.12.252/1","192.168.12.252","1")
toJSON(getIPUnit("192.168.12.252/1","192.168.12.252","1"))
h<-hash()
h[[colnames(src)]]<-src$ip.src
h[[colnames(dst)]]<-dst$ip.dst
## convert to JSON
confJS <- toJSON(h)
h<-hash()
h[[colnames(src)]]<-src$ip.src
h[[colnames(dst)]]<-dst$ip.dst
h
?toJSON
remove.package(jsonlite)
remove.packages(jsonlite)
?toJSON
require(rjson)
library.packages("rjson")
install.packages("rjson")
install.packages("rjson")
require(rjson)
h<-hash()
h[[colnames(src)]]<-src$ip.src
h[[colnames(dst)]]<-dst$ip.dst
confJS <- toJSON(h)
library(hash)
confJS <- toJSON(h)
h<-hash()
h[[colnames(src)]]<-src$ip.src
h[[colnames(dst)]]<-dst$ip.dst
## convert to JSON
confJS <- toJSON(h)
require(data.table)
require(rjson)
require(plyr)
h<-hash()
h[[colnames(src)]]<-src$ip.src
h[[colnames(dst)]]<-dst$ip.dst
## convert to JSON
confJS <- toJSON(h)
require(jsonlite)
h<-hash()
h[[colnames(src)]]<-src$ip.src
h[[colnames(dst)]]<-dst$ip.dst
## convert to JSON
confJS <- toJSON(h)
h
require(rjson)
h
h<-hash()
h[[colnames(src)]]<-src$ip.src
h[[colnames(dst)]]<-dst$ip.dst
## convert to JSON
confJS <- toJSON(h)
remove.packages(jsonlite)
require(rjson)
h<-hash()
h[[colnames(src)]]<-src$ip.src
h[[colnames(dst)]]<-dst$ip.dst
## convert to JSON
confJS <- toJSON(h)
remove.packages(rjson)
require(rjson)
h<-hash()
h[[colnames(src)]]<-src$ip.src
h[[colnames(dst)]]<-dst$ip.dst
## convert to JSON
confJS <- toJSON(h)
getIPUnit <- function(unitID, ip, unit) {
return(list("modUnit"=list(unitID= list("ip_addr"=ip, "modbus_unit"=unit) )))
}
toJSON(getIPUnit("192.168.12.252/1","192.168.12.252","1"))
getIPUnit <- function(unitID, ip, unit) {
return(list("modUnit"=hash[[unitID]]<-list("ip_addr"=ip, "modbus_unit"=unit) ))
}
toJSON(getIPUnit("192.168.12.252/1","192.168.12.252","1"))
getIPUnit(unitID="192.168.12.252/1",ip="192.168.12.252",unit="1")
getIPUnit <- function(unitID, ip, unit) {
return(list("modUnit"=list(unitID= list("ip_addr"=ip, "modbus_unit"=unit) )))
}
getIPUnit <- function(unitID, ip, unit) {
return(list("modUnit"=list(unitID= list("ip_addr"=ip, "modbus_unit"=unit) )))
}
toJSON(getIPUnit(unitID="192.168.12.252/1",ip="192.168.12.252",unit="1"))
toJSON(getIPUnit(eval(unitID)="192.168.12.252/1",ip="192.168.12.252",unit="1"))
e<-parse(text="unitID")
toJSON(getIPUnit(eval(e)="192.168.12.252/1",ip="192.168.12.252",unit="1"))
ab
ab<-unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id,
ip_modbus_unit_id=paste(ip.dst,mbtcp.modbus.unit_id, sep="/"))]
ab
e<-parse(text = paste("list(\"modUnit\"=list(",ip_modbus_unit_ID,"=list(\"ip_addr\"="ip.dst", \"modbus_unit\"=", unit,")))")
e<-parse(text = paste("list(\"modUnit\"="))
e<-parse(text = paste("list(\"modUnit\"=","ip_modbus_unit_ID"))
e<-parse(text = paste("list(\"modUnit\"=","ip_modbus_unit_ID)"))
e
e<-parse(text = paste("list(\"modUnit\"=ip_modbus_unit_ID)"))
e
e<-parse(text = paste("list(\"modUnit\"=list(ip_modbus_unit_ID=list(\"ip_addr\"=ip.st)))"))
e
e<-parse(text = paste("list(\"modUnit\"=list(ip_modbus_unit_ID=list(\"ip_addr\"=ip.dst,\"\modbus_unit\"=unit)))"))
e<-parse(text = paste("list(\"modUnit\"=list(ip_modbus_unit_ID=list(\"ip_addr\"=ip.dst,\"modbus_unit\"=unit)))"))
e
e<-parse(text = paste("list(\"modUnit\"=list(ip_modbus_unit_ID=list(\"ip_addr\"=ip.dst,\"modbus_unit\"=unit)))"))
e
rDT<-ab[,eval(e)]
e<-parse(text = paste("list(\"modUnit\"=list(ip_modbus_unit_ID=list(\"ip_addr\"=ip.dst,\"modbus_unit\"=mbtcp.modbus.unit_id)))"))
rDT<-ab[,eval(e)]
rDT
e<-parse(text = paste("list(ip_modbus_unit_ID=list(\"ip_addr\"=ip.dst,\"modbus_unit\"=mbtcp.modbus.unit_id))"))
e
e
e<-parse(text = paste("list(ip_modbus_unit_ID=list(\"ip_addr\"=ip.dst,\"modbus_unit\"=mbtcp.modbus.unit_id))"))
e
ab[,eval(e)]
rDT<-ab[,eval(e)]
rDT
h<-hash(h)
h<-hash()
h[[ip_modbus]]<-list(ip="192.285.3",unit="1")
list(ip="192.285.3",unit="1")
h[["ip_modbus"]]<-list(ip="192.285.3",unit="1")
h
h[ip_modbus]
h[[ip_modbus]]
h$ip_modbus
toJSON(h)
?toJSON
as.environment("package:rjson")
?toJSON
toJSON(h)
remove.package("jsonlite")
remove.packages("jsonlite")
toJSON(h)
save()
save.image()
toJSON(h)
install.packages("rjson")
install.packages("rjson")
toJSON(h)
e<-parse(text = paste("list(ip_modbus_unit_ID=c(\"ip_addr\"=ip.dst,\"modbus_unit\"=mbtcp.modbus.unit_id))"))
rDT<-ab[,eval(e)]
rDT
e
e<-parse(text = paste("list(ip_modbus_unit_ID=I(list(\"ip_addr\"=ip.dst,\"modbus_unit\"=mbtcp.modbus.unit_id)))"))
e
rDT<-ab[,eval(e)]
rDT
toJSON(rDT)
require(jsonlite)
install.packages("jsonlite")
require(jsonlite)
e<-parse(text = paste("list(ip_modbus_unit_ID=I(list(\"ip_addr\"=ip.dst,\"modbus_unit\"=mbtcp.modbus.unit_id)))"))
rDT<-ab[,eval(e)]
ab<-unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id,
ab<-unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id,
ip_modbus_unit_id=paste(ip.dst,mbtcp.modbus.unit_id, sep="/"))]
ab<-unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id,
ip_modbus_unit_id=paste(ip.dst,mbtcp.modbus.unit_id, sep="/"))]
ab<-unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id,
ip_modbus_unit_id=paste(ip.dst,mbtcp.modbus.unit_id, sep="/"))]
require(data.table)
ab<-unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id,
ip_modbus_unit_id=paste(ip.dst,mbtcp.modbus.unit_id, sep="/"))]
e<-parse(text = paste("list(ip_modbus_unit_ID=I(list(\"ip_addr\"=ip.dst,\"modbus_unit\"=mbtcp.modbus.unit_id)))"))
rDT<-ab[,eval(e)]
rDT
toJSON(rDT)
e<-parse(text = paste("list(ip_modbus_unit_ID=list(\"ip_addr\"=ip.dst,\"modbus_unit\"=mbtcp.modbus.unit_id))"))
e
rDT<-ab[,eval(e)]
rDT
rDT$ip_modbus_unit_ID
getIPUnit <- function(unitID, ip, unit) {
return(list("modUnit"=list(unitID= list("ip_addr"=ip, "modbus_unit"=unit) )))
}
e=parse(text="list(\"ipMOD\"=list(ip_modbus_unit_ID=list(\"ip\"=ip.dst)))")
e
rDT<-ab[,eval(e)]
rDT
toJSON(ipMOD)
toJSON(rDT)
e=parse(text="list(\"ipMOD\"=list(ip_modbus_unit_ID))")
rDT<-ab[,eval(e)]
ab<-unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id,
ip_modbus_unit_id=paste(ip.dst,mbtcp.modbus.unit_id, sep="/"))]
ab
e=parse(text="list(\"ipMOD\"=ip_modbus_unit_ID)")
rDT<-ab[,eval(e)]
ab
ab[,.(eval(e))]
e
ab<-unique(mergedSewDT, by=c("ip.dst", "mbtcp.modbus.unit_id"))[,.(ip.dst,mbtcp.modbus.unit_id,
ip_modbus_unit_id=paste(ip.dst,mbtcp.modbus.unit_id, sep="/"))]
ab
e=parse(text="list(\"ipMOD\"=ip_modbus_unit_ID)")
e
rDT<-ab[,eval(e)]
e=parse(text="list(\"ipMOD\"=ip_modbus_unit_id)")
rDT<-ab[,eval(e)]
rDT
e=parse(text="list(\"ipMOD\"=list(ip_modbus_unit_id=list(\"ip\"=ip.dst)))")
rDT<-ab[,eval(e)]
rDT
toJSON(rDT)
e=parse(text="list(\"ipMOD\"=list(ip_modbus_unit_id=list(\"ip\"=ip.dst,\"unit\"=mbtcp.modbus.unit_id)))")
rDT<-ab[,eval(e)]
toJSON(rDT)
?eval
e=parse(text="list(\"ipMOD\"=list(eval(parse(text=\"ip_modbus_unit_id\"))=list(\"ip\"=ip.dst,\"unit\"=mbtcp.modbus.unit_id)))")
f=parse(text="ip_modbus_unit_id")
eval(parse(text="ip_modbus_unit_id"))
ab[,eval(parse(text="ip_modbus_unit_id"))]
e=parse(text="list(\"ipMOD\"=list(eval(parse(text=\"ip_modbus_unit_id\")) =list(\"ip\"=ip.dst,\"unit\"=mbtcp.modbus.unit_id)))")
eval(parse(text="ip_modbus_unit_id"))
ab[,eval(parse(text="ip_modbus_unit_id"))]
h<-hash()
h[["ipmodunit"]]<-1
h
toJSON(h)
?toJSON
install.packages("rjson")
require(rjson)
h<-hash()
h[["ipmodunit"]]<-1
h
toJSON(h)
