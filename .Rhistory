d.sd=sd(d, na.rm=T), min.resp.time.rel=min(resp.time.rel),
min.resp.time.rel= max(resp.time.rel)),
by =.(resp.func.code, mbtcp.modbus.reference_num)][
order(resp.func.code, mbtcp.modbus.reference_num)]
Frequency of Reference Numbers by Function Code
ggplot(sewModbusDT, aes(x=mbtcp.modbus.reference_num, fill=mbtcp.modbus.reference_num)) +
geom_bar(stat="bin") +
facet_grid(~mbtcp.modbus.func_code) +
ggtitle("Bar Chart of Reference Numbers by Function Code") +
ylab("Reference Number") +
scale_fill_brewer(palette="Set1")
cloud(resp.time.rel ~ d + mbtcp.modbus.reference_num | resp.func.code, data = mergedSewDT[resp.func.code=="4"],
col.point = mergedSewDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "resp.time.rel",
panel.aspect = 0.7,
main="3D Scatterplot \nReference Number, Data Value Over Time for Function Code 4",
key = list(points = list(pch = 19, col = seq_along(levels(mergedDT$mbtcp.modbus.reference_num))),
text = list(levels(mergedDT$mbtcp.modbus.reference_num)), space = 'top',
columns = nlevels(mergedDT$mbtcp.modbus.reference_num)))
cloud(resp.time.rel ~ d + mbtcp.modbus.reference_num | resp.func.code, data = mergedSewDT[resp.func.code=="4"],
col.point = mergedSewDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "resp.time.rel",
panel.aspect = 0.7,
main="3D Scatterplot \nReference Number, Data Value Over Time for Function Code 4",
key = list(points = list(pch = 19, col = seq_along(levels(mergedDT$mbtcp.modbus.reference_num))),
text = list(levels(mergedSewDT$mbtcp.modbus.reference_num)), space = 'top',
columns = nlevels(mergedSewDT$mbtcp.modbus.reference_num)))
cloud(resp.time.rel ~ d + mbtcp.modbus.reference_num | resp.func.code, data = mergedSewDT[resp.func.code=="4"],
col.point = mergedSewDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "resp.time.rel",
panel.aspect = 0.7,
main="3D Scatterplot \nReference Number, Data Value Over Time for Function Code 4",
key = list(points = list(pch = 19, col = seq_along(levels(mergedSewDT$mbtcp.modbus.reference_num))),
text = list(levels(mergedSewDT$mbtcp.modbus.reference_num)), space = 'top',
columns = nlevels(mergedSewDT$mbtcp.modbus.reference_num)))
pairs(mergedSewDT(,.(mbtcp.len, d)))
pairs(mergedSewDT[,.(mbtcp.len, d)]
pairs(mergedSewDT(,.(mbtcp.len, d))))
pairs(mergedSewDT[,.(mbtcp.len, d)])
pairs(mergedSewDT[,.(mbtcp.len, , as.numeric(mbtcp.modbus.func_code, d)])
pairs(mergedSewDT[,.(mbtcp.len, as.numeric(mbtcp.modbus.func_code), d)])
pairs(mergedSewDT[,.(mbtcp.len, mbtcp.modbus.func_code=as.numeric(mbtcp.modbus.func_code),
mbtcp.modbus.func_code=as.numeric(mbtcp.modbus.func_code) , d)])
pairs(mergedSewDT[,.(mbtcp.len, mbtcp.modbus.func_code=as.numeric(mbtcp.modbus.func_code),
mbtcp.modbus.reference_num=as.numeric(mbtcp.modbus.reference_num) , d)])
pairs(mergedSewDT[,.(mbtcp.len, mbtcp.modbus.func_code=as.numeric(mbtcp.modbus.func_code),
mbtcp.modbus.reference_num=as.numeric(mbtcp.modbus.reference_num), d)])
View(mergedSewDT)
View(sewModbusDT)
sewModbusDT <- sewModbusDT[!(is.na(mbtcp.mbtcp.modbus.unit_id))]
sewModbusDT <- sewModbusDT[!(is.na(mbtcp.modbus.unit_id))]
View(sewModbusDT)
sewModbusDT <- sewModbusDT[!(is.na(mbtcp.modbus.unit_id))]
View(sewModbusDT)
sewModbusDT[is.na(mbtcp.modbus.unit_id)]
sewModbusDT[,is.na(mbtcp.modbus.unit_id)]
sewModbusDT[,is.na(frame.number)]
sewModbusDT <- sewModbusDT[,!(is.na(frame.number))]
sewModbusDT <- sewModbusDT[,!(is.na(frame.number))]
datafile <- "~/rDia/data/scadaCops/normal/sew.data"
sewModbusDT <- as.data.table(
read.csv(datafile, header=TRUE,
colClass=c(ip.proto="factor", ip.version="factor", ip.src="factor",
ip.dst="factor", mbtcp.modbus.unit_id="factor",
tcp.srcport="factor", tcp.dstport="factor",
mbtcp.modbus.func_code="factor",
mbtcp.modbus.reference_num="factor",
mbtcp.prot_id="factor")))
rm(datafile)
sewModbusDT[is.na(frame.number)]
sewModbusDT[is.na(mbtcp.modbus.unit_id)]
head sewModbusDT
head(sewModbusDT)
sewModbusDT[is.na(mbtcp.modbus.unit_id)]
sewModbusDT[,is.na(mbtcp.modbus.unit_id)]
head(sewModbusDT[,is.na(mbtcp.modbus.unit_id)])
head(sewModbusDT[,is.na(mbtcp.modbus.unit_id),20])
head(sewModbusDT[,is.na(mbtcp.modbus.unit_id)],20)
head(sewModbusDT[,is.na(mbtcp.modbus.unit_id)],50)
head(sewModbusDT)
?read.csv
datafile <- "~/rDia/data/scadaCops/normal/sew.data"
sewModbusDT <- as.data.table(
read.csv(datafile, header=TRUE,
na.strings = "NA",
colClass=c(ip.proto="factor", ip.version="factor", ip.src="factor",
ip.dst="factor", mbtcp.modbus.unit_id="factor",
tcp.srcport="factor", tcp.dstport="factor",
mbtcp.modbus.func_code="factor",
mbtcp.modbus.reference_num="factor",
mbtcp.prot_id="factor")))
rm(datafile)
head(sewModbusDT)
head(sewModbusDT,50)
datafile <- "~/rDia/data/scadaCops/normal/sew.data"
sewModbusDT <- as.data.table(
read.csv(datafile, header=TRUE,
as.is =!stringAsFactors,
colClass=c(ip.proto="factor", ip.version="factor", ip.src="factor",
ip.dst="factor", mbtcp.modbus.unit_id="factor",
tcp.srcport="factor", tcp.dstport="factor",
mbtcp.modbus.func_code="factor",
mbtcp.modbus.reference_num="factor",
mbtcp.prot_id="factor")))
rm(datafile)
datafile <- "~/rDia/data/scadaCops/normal/sew.data"
sewModbusDT <- as.data.table(
read.csv(datafile, header=TRUE,
as.is =!stringsAsFactors,
colClass=c(ip.proto="factor", ip.version="factor", ip.src="factor",
ip.dst="factor", mbtcp.modbus.unit_id="factor",
tcp.srcport="factor", tcp.dstport="factor",
mbtcp.modbus.func_code="factor",
mbtcp.modbus.reference_num="factor",
mbtcp.prot_id="factor")))
rm(datafile)
datafile <- "~/rDia/data/scadaCops/normal/sew.data"
sewModbusDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=F,
colClass=c(ip.proto="factor", ip.version="factor", ip.src="factor",
ip.dst="factor", mbtcp.modbus.unit_id="factor",
tcp.srcport="factor", tcp.dstport="factor",
mbtcp.modbus.func_code="factor",
mbtcp.modbus.reference_num="factor",
mbtcp.prot_id="factor")))
rm(datafile)
sewModbusDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=F,
colClass=c(ip.proto="factor", ip.version="factor", ip.src="factor",
ip.dst="factor",
tcp.srcport="factor", tcp.dstport="factor",
mbtcp.modbus.func_code="factor",
mbtcp.modbus.reference_num="factor",
mbtcp.prot_id="factor")))
rm(datafile)
datafile <- "~/rDia/data/scadaCops/normal/sew.data"
sewModbusDT <- as.data.table(
read.csv(datafile, header=TRUE,
stringsAsFactors=F,
colClass=c(ip.proto="factor", ip.version="factor", ip.src="factor",
ip.dst="factor",
tcp.srcport="factor", tcp.dstport="factor",
mbtcp.modbus.func_code="factor",
mbtcp.modbus.reference_num="factor",
mbtcp.prot_id="factor")))
rm(datafile)
sewModbusDT <- sewModbusDT[!(is.na(mbtcp.modbus.unit_id))]
head(sewModbusDT)
sewModbusDT <- sewModbusDT[!(is.na(frame.number))]
sewModbusDT <- sewModbusDT[!(is.na(mbtcp.modbus.unit_id))]
sewModbusDT <- sewModbusDT[!(is.na(mbtcp.trans_id))]
sewModbusDT <- sewModbusDT[!(is.na(mbtcp.modbus.reference_num))]
numrows <- (nrow(sewModbusDT)/2)
frame.number<-numeric(numrows)
frame.time_relative<-numeric(numrows)
frame.time_delta_displayed<-numeric(numrows)
frame.len<-numeric(numrows)
ip.src <- character(numrows)
ip.dst <- character(numrows)
mbtcp.modbus.unit_id <- character(numrows)
tcp.srcport <- character(numrows)
tcp.dstport <- character(numrows)
mbtcp.prot_id <- character(numrows)
mbtcp.trans_id <- numeric(numrows)
mbtcp.len <- numeric(numrows)
mbtcp.modbus.func_code <- character(numrows)
mbtcp.modbus.word_cnt <- numeric(numrows)
mbtcp.modbus.reference_num <- character(numrows)
resp.fr.number <- numeric(numrows)
resp.time.rel <- numeric(numrows)
resp.time.delta <- numeric(numrows)
resp.len <- numeric(numrows)
resp.src <- character(numrows)
resp.dest <- character(numrows)
resp.srcport <- character(numrows)
resp.dstport<- character(numrows)
resp.prot_id <- character(numrows)
resp.trans_id <- numeric(numrows)
resp.mbcp.len <- numeric(numrows)
resp.func.code <- character(numrows)
resp.data <- character(numrows)
mergedSewDT<- data.table(frame.number, frame.time_relative, frame.time_delta_displayed, frame.len,
ip.src, ip.dst, mbtcp.modbus.unit_id, tcp.srcport, tcp.dstport,
mbtcp.prot_id, mbtcp.trans_id, mbtcp.len, mbtcp.modbus.func_code,
mbtcp.modbus.word_cnt, mbtcp.modbus.reference_num, resp.fr.number,
resp.time.rel, resp.time.delta, resp.len, resp.src, resp.dest,
resp.srcport, resp.dstport, resp.prot_id, resp.trans_id,
resp.mbcp.len, resp.func.code, resp.data
)
idx <- 1
system.time(
for (i in 1:nrow(sewModbusDT)) {
pkt <- sewModbusDT[i,]
#   print(paste("pkt :", i))
#   print(pkt)
# TODO: need to check transactionID are the same
#   if request (assumption is that we're starting with a request)
if (pkt$tcp.dstport=="502") {
mergedSewRow <- pkt[,.(frame.number, frame.time_relative, frame.time_delta_displayed,
frame.len, ip.src, ip.dst, mbtcp.modbus.unit_id, tcp.srcport,
tcp.dstport, mbtcp.prot_id, mbtcp.trans_id, mbtcp.len,
mbtcp.modbus.func_code, mbtcp.modbus.word_cnt,
mbtcp.modbus.reference_num)]
setkey(mergedSewRow, mbtcp.trans_id)
#     print(paste("mergedSewRow: ", i))
#     print(mergedSewRow)
} # end if request
# get next row, should be response
if (pkt$tcp.srcport=="502") {
# set response fields in mergedSewRow
addCols <- pkt[,.(resp.fr.number=frame.number, resp.time.rel=frame.time_relative,
resp.time.delta=frame.time_delta_displayed,
resp.len=frame.len, resp.src=ip.src, resp.dest=ip.dst,
resp.srcport=tcp.srcport, resp.dstport=tcp.dstport,
resp.prot_id=mbtcp.prot_id, resp.trans_id=mbtcp.trans_id,
resp.mbcp.len=mbtcp.len, resp.func.code=mbtcp.modbus.func_code,
resp.data=mbtcp.modbus.data)]
setkey(addCols, resp.trans_id)
#     print(paste("addCols: ", i))
#     print(addCols)
# create new row
mergedSewRow <- mergedSewRow[addCols]
#     print("mergedSewrow+addCols: ")
#     print(mergedSewRow)
mergedSewDT[idx, `:=`("frame.number"=mergedSewRow$frame.number,
"frame.time_relative"=mergedSewRow$frame.time_relative,
"frame.time_delta_displayed"=mergedSewRow$frame.time_delta_displayed,
"frame.len"=mergedSewRow$frame.len, "ip.src"=mergedSewRow$ip.src,
"ip.dst"=mergedSewRow$ip.dst, "mbtcp.modbus.unit_id"=mergedSewRow$mbtcp.modbus.unit_id,
"tcp.srcport"=mergedSewRow$tcp.srcport, "tcp.dstport"=mergedSewRow$tcp.dstport,
"mbtcp.prot_id"=mergedSewRow$mbtcp.prot_id,
"mbtcp.trans_id"=mergedSewRow$mbtcp.trans_id, "mbtcp.len"=mergedSewRow$mbtcp.len,
"mbtcp.modbus.func_code"=mergedSewRow$mbtcp.modbus.func_code,
"mbtcp.modbus.word_cnt"=mergedSewRow$mbtcp.modbus.word_cnt,
"mbtcp.modbus.reference_num"=mergedSewRow$mbtcp.modbus.reference_num,
"resp.fr.number"=mergedSewRow$resp.fr.number, "resp.time.rel"=mergedSewRow$resp.time.rel,
"resp.time.delta"=mergedSewRow$resp.time.delta, "resp.len"=mergedSewRow$resp.len,
"resp.src"=mergedSewRow$resp.src, "resp.dest"=mergedSewRow$resp.dest,
"resp.srcport"=mergedSewRow$resp.srcport, "resp.dstport"=mergedSewRow$resp.dstport,
"resp.prot_id"=mergedSewRow$resp.prot_id, "resp.trans_id"=mergedSewRow$mbtcp.trans_id,
"resp.mbcp.len"=mergedSewRow$resp.mbcp.len, "resp.func.code"=mergedSewRow$resp.func.code,
"resp.data"=mergedSewRow$resp.data)
]
idx <- idx+1
}
} # end for i in sewModbusDT
) # end system.time
rm(pkt, mergedSewRow, addCols, i, idx)
mergedSewDT[, d:=as.integer(paste("0x", gsub(":", "", resp.data), sep=""))]
# factorize
mergedSewDT$ip.src <- factor(mergedSewDT$ip.src)
mergedSewDT$ip.dst <- factor(mergedSewDT$ip.dst)
mergedSewDT$mbtcp.modbus.unit_id <- factor(mergedSewDT$mbtcp.modbus.unit_id)
mergedSewDT$tcp.srcport <- factor(mergedSewDT$tcp.srcport)
mergedSewDT$tcp.dstport <- factor(mergedSewDT$tcp.dstport)
mergedSewDT$mbtcp.prot_id <- factor(mergedSewDT$mbtcp.prot_id)
mergedSewDT$mbtcp.modbus.func_code<- factor(mergedSewDT$mbtcp.modbus.func_code)
mergedSewDT$resp.src <- factor(mergedSewDT$resp.src)
mergedSewDT$resp.dest <- factor(mergedSewDT$resp.dest)
mergedSewDT$resp.srcport <- factor(mergedSewDT$resp.srcport)
mergedSewDT$resp.dstport <- factor(mergedSewDT$resp.dstport)
mergedSewDT$resp.prot_id <- factor(mergedSewDT$resp.prot_id)
mergedSewDT$resp.data <- factor(mergedSewDT$resp.data)
mergedSewDT$resp.func.code <- factor(mergedSewDT$resp.func.code)
mergedSewDT$mbtcp.modbus.reference_num <- factor(mergedSewDT$mbtcp.modbus.reference_num)
View(mergedSewDT)
View(sewModbusDT)
ggplot(mergedSewDT, aes(x = mbtcp.modbus.reference_num, y = d)) +
geom_boxplot(fill="lightpink4")
ggplot(mergedSewDT, aes(x = mbtcp.modbus.reference_num, y = d)) +
geom_boxplot(fill="lightpink4") +
ggtitle("Boxplot of Modbus Data Values by Reference Number")
write.csv(sewModbusDT, "sewModbusDT.Rda")
write.csv(mergedSewDT, "mergedSewDT.Rda")
load("/home/lisa/rDia/sewModbusDT.Rda")
?write.csv
head(sewModbusDT)
write.csv(sewModbusDT, "sewModbusDT.Rda")
head(mergedSewDT)
write.csv(mergedSewDT, "mergedSewDT.Rda")
getwd()
load("/home/lisa/rDia/mergedSewDT.Rda")
load("/home/lisa/rDia/sewModbusDT.Rda")
?load
load("sewModbusDT.Rda")
save(mergedSewDT, "mergedSewDT.Rda")
?save
save(sewModbusDT, mergedSewDT, "sew.Rda")
save(sewModbusDT, mergedSewDT, file="sew.Rda")
load("/home/lisa/rDia/sew.Rda")
aes(x = mbtcp.modbus.reference_num, y = d)) +
#   geom_boxplot(fill="lightpink4") +
#   facet_grid(~mbtcp.modbus.func_code) +
#   ggtitle("Boxplot of Modbus Data Values by Reference Number")
# invisible(dev.off()
ggplot(mergedSewDT, aes(x = mbtcp.modbus.reference_num, y = d)) +
geom_boxplot(fill="lightpink4") +
facet_grid(~mbtcp.modbus.func_code) +
ggtitle("Boxplot of Modbus Data Values by Reference Number")
table(sewModbusDT[,mbtcp.modbus.func_code, mbtcp.modbus.reference_num])
table(sewModbusDT[mbtcp.modbus.func_code, mbtcp.modbus.reference_num])
table(sewModbusDT[,.(mbtcp.modbus.func_code, mbtcp.modbus.reference_num)])
mergedSewDT[,.(count=.N, d.min=min(d), d.mean=mean(d, na.rm=T), d.max=max(d),
d.sd=sd(d, na.rm=T), min.resp.time.rel=min(resp.time.rel),
min.resp.time.rel= max(resp.time.rel)),
by =.(resp.func.code, mbtcp.modbus.reference_num)][
order(resp.func.code, mbtcp.modbus.reference_num)]
xypl <- ggplot(mergedSewDT, aes(x=frame.time_relative, y=d, color=resp.func.code)) +
geom_point() + facet_wrap(~mbtcp.modbus.reference_num) +
ggtitle("Modbus Data Values \nOver Time by Reference Number") +
theme(axis.text.x = element_text(angle=90),
plot.title = element_text(face="bold"),
plot.margin = unit(c(0, 0, 2, 0), "cm"),
legend.position = "top", legend.title = element_text(size=9))
xypl
ggplot(mergedSewDT, aes(x=frame.time_relative, y=d, color=mbtcp.modbus.reference_num)) +
geom_point() + facet_grid(mbtcp.modbus.reference_num~resp.func.code) +
ggtitle("MODBUS Data Values \nOver Time by Reference Number") +
scale_fill_brewer(palette="Spectral") +
theme(plot.title = element_text(face="bold"),
plot.margin = unit(c(0, 0, 2, 0), "cm"),
legend.position = "top", legend.title = element_text(size=10)
)
load("~/rDia/rpt/edaReport.Rmd")
?raster
?grid.raster
?readPNG
?readPNG
scadaDT <- as.data.table(read.csv("~/rDia/data/scadaCops/SCADA_20150429_csv", stringsAsFactors=TRUE))
install.packages("data.table")
install.packages("lattice.extra")
install.packages("plyr")
install.packages("dplyr")
install.packages("TRSbook")
install.packages("igraph")
install.packages("tcltk")
install.packages("rgl")
install.packages("ape")
library(data.table)
library(lattice)
library(latticeExtra)
library(plyr)
library(dplyr)
library(reshape2)
library(RColorBrewer)
library(TRSbook)
library(igraph)
library(tcltk)
library(tgl)
library(ape)
#### Read in data - entire pcap file ####
scadaDT <- as.data.table(read.csv("~/rDia/data/scadaCops/SCADA_20150429_csv", stringsAsFactors=TRUE))
install.packages("plyr")
install.packages("plyr")
scadaEndPtsDT <- as.data.table(read.csv("~/rDia/data/scadaCops/SCADA_Security_042915_TCP_Endpoints.csv"))
library(data.table)
library(tidyr)
library(lattice)
library(ggplot2)
library(gplots)
library(plyr)
library(dplyr)
library(reshape2)
library(RColorBrewer)
library(igraph)
library(png)
library(grid)
library(Matrix)
library(ROCR)
library(grid)
library(gridExtra)
?readPNG
scadaEndPtsDT <- as.data.table(read.csv("~/rDia/data/scadaCops/SCADA_Security_042915_TCP_Endpoints.csv"))
scadaTCPConvDT <- as.data.table(read.csv("~/Bureau/data/scadaCops/SCADA_Security_042915_TCP_Conversations.csv", header=TRUE,
na.strings="NA", quote="\"", dec=",", colClass=c(Port.A="factor", Port.B="factor")))
modbusDT <- as.data.table(read.csv("~/Bureau/data/scadaCops/modbus/modbus_transform.data", header=FALSE,
col.names=c("protocolID", "transID", "length","functionCode","refType","wordCnt","data"),
colClass=c(protocolID="factor", functionCode="factor", refType="factor")))
moddataDT <- as.data.table(read.csv("~/Bureau/data/scadaCops/modbus/modbus.data", header=TRUE,
colClass=c(ip.proto="factor", ip.version="factor",
mbtcp.modbus.func_code="factor", tcp.srcport="factor",
tcp.dstport="factor", mbtcp.modbus.reference_num="factor",
mbtcp.prot_id="factor")))
moddataDT <- as.data.table(read.csv("~/rDia/data/scadaCops/modbus/modbus.data", header=TRUE,
colClass=c(ip.proto="factor", ip.version="factor",
mbtcp.modbus.func_code="factor", tcp.srcport="factor",
tcp.dstport="factor", mbtcp.modbus.reference_num="factor",
mbtcp.prot_id="factor")))
save(scadaDT, scadaTCPConvDT, scadaEndPtsDT, modbusDT, moddataDT, file="report.Rda")
getwd()
save(scadaDT, scadaTCPConvDT, scadaEndPtsDT, modbusDT, moddataDT, file="report.Rda")
getwd()
?save
dir()
source.with.encoding('~/rDia/data/scadaCops/normal/sew.csv', encoding='UTF-8')
rm("frame.number",  "frame.time_relative",  "frame.time_delta_displayed"
,"frame.len",  "ip.src", "ip.dst", "tcp.srcport"
,"tcp.dstport", "mbtcp.prot_id",  "mbtcp.trans_id",  "mbtcp.len"
,"mbtcp.modbus.func_code", "mbtcp.modbus.word_cnt", "mbtcp.modbus.reference_num", "resp.fr.number"
,"resp.time.rel"  ,"resp.time.delta",  "resp.len", "resp.src"
,"resp.dest", "resp.srcport", "resp.dstport",  "resp.prot_id"
,"resp.trans_id", "resp.mbcp.len",  "resp.func.code", "resp.data" )
View(moddataDT)
xypl <- ggplot(mergedDT, aes(x=frame.time_relative, y=d, color=mbtcp.modbus.reference_num)) +
geom_point() + facet_grid(mbtcp.modbus.reference_num~resp.func.code) +
ggtitle("Modbus Data Values Over Time by Reference Number") +
theme(axis.text.x = element_text(angle=90), plot.title = element_text(size=10),
legend.position = "top", legend.title = element_text(size=6))
save(scadaDT, scadaTCPConvDT, scadaEndPtsDT, modbusDT, moddataDT, mergedDT, file="report.Rda")
?load
mergedDT <- read.csv("~/rDia/rData/mergedDT.dat")
View(mergedDT)
mergedDT$X<-NULL
mergedDT$X.1<-NULL
View(mergedDT)
save(scadaDT, scadaTCPConvDT, scadaEndPtsDT, modbusDT, moddataDT, mergedDT, file="report.Rda")
xypl <- ggplot(mergedDT, aes(x=frame.time_relative, y=d, color=resp.func.code)) +
geom_point() + facet_wrap(~mbtcp.modbus.reference_num) +
ggtitle("Modbus Data Values Over Time by Reference Number") +
theme(axis.text.x = element_text(angle=90), plot.title = element_text(size=10),
legend.position = "top", legend.title = element_text(size=7))
xypl <- ggplot(mergedDT, aes(x=frame.time_relative, y=d, color=resp.func.code)) +
geom_point() + facet_wrap(~mbtcp.modbus.reference_num) +
ggtitle("Modbus Data Values Over Time by Reference Number") +
theme(axis.text.x = element_text(angle=90), plot.title = element_text(size=10),
legend.position = "top", legend.title = element_text(size=7))
xypl
xyp <- ggplot(mergedDT[mbtcp.modbus.func_code=="4"], aes(resp.time.rel, d, color=mbtcp.modbus.reference_num)) +
geom_point() + ggtitle("Modbus Data Value Over Time For Function Code 4") +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle=90), legend.position = "top",
legend.title = element_text(size=8) )
xyp
xyp <- ggplot(mergedDT[mbtcp.modbus.func_code=="4"], aes(resp.time.rel, d, color=mbtcp.modbus.reference_num)) +
geom_point() + ggtitle("Modbus Data Value Over Time For Function Code 4") +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle=90), legend.position = "top",
legend.title = element_text(size=8) )
head(mergedDT[mbtcp.modbus.func_code])
str(mergedDT)
head(mergedDT[mbtcp.modbus.func_code])
head(mergedDT[mbtcp.modbus.func_code=="4"])
head(mergedDT)
head(mergedDT[mbtcp.modbus.func_code=="4"])
head(mergedDT[,mbtcp.modbus.func_code=="4"])
require(data.table)
head(mergedDT[mbtcp.modbus.func_code=="4"])
rm(xyp, xypl)
cloud(resp.time.rel ~ d + mbtcp.modbus.reference_num | resp.func.code, data = mergedDT[resp.func.code=="4"],
col.point = mergedDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "resp.time.rel",
main="3D Scatterplot \nReference Number, Data Value Over Time for Function Code 4",
key = list(points = list(pch = 19, col = seq_along(levels(mergedDT$mbtcp.modbus.reference_num))),
text = list(levels(mergedDT$mbtcp.modbus.reference_num)), space = 'top',
columns = nlevels(mergedDT$mbtcp.modbus.reference_num)))
mergedDT
head(mergedDT)
mergedDT[,.(resp.func.code=="4")]
head(mergedDT[,.(resp.func.code)])
str(mergedDT)
mergedDT<-as.data.table(mergedDT)
head(mergedDT[mbtcp.modbus.func_code=="4"])
cloud(resp.time.rel ~ d + mbtcp.modbus.reference_num | resp.func.code, data = mergedDT[resp.func.code=="4"],
col.point = mergedDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "resp.time.rel",
main="3D Scatterplot \nReference Number, Data Value Over Time for Function Code 4",
key = list(points = list(pch = 19, col = seq_along(levels(mergedDT$mbtcp.modbus.reference_num))),
text = list(levels(mergedDT$mbtcp.modbus.reference_num)), space = 'top',
columns = nlevels(mergedDT$mbtcp.modbus.reference_num)))
levels(mergedDT$mbtcp.modbus.reference_num)
mergedDT$ip.src <- factor(mergedDT$ip.src)
mergedDT$ip.dst <- factor(mergedDT$ip.dst)
mergedDT$tcp.srcport <- factor(mergedDT$tcp.srcport)
mergedDT$tcp.srcport <- factor(mergedDT$tcp.srcport)
mergedDT$mbtcp.modbus.func_code <- factor(mergedDT$mbtcp.modbus.func_code)
mergedDT$resp.src <- factor(mergedDT$resp.src)
mergedDT$resp.dest <- factor(mergedDT$resp.dest)
mergedDT$resp.srcport <- factor(mergedDT$resp.srcport)
mergedDT$resp.dstport <- factor(mergedDT$resp.dstport)
mergedDT$resp.prot_id <- factor(mergedDT$resp.prot_id)
mergedDT$resp.data <- factor(mergedDT$resp.data)
mergedDT$resp.func.code <- factor(mergedDT$resp.func.code)
mergedDT$mbtcp.modbus.reference_num <- factor(mergedDT$mbtcp.modbus.reference_num)
cloud(resp.time.rel ~ d + mbtcp.modbus.reference_num | resp.func.code, data = mergedDT[resp.func.code=="4"],
col.point = mergedDT$mbtcp.modbus.reference_num, pch= 19,
xlab = "d", ylab = "refNum", zlab = "resp.time.rel",
main="3D Scatterplot \nReference Number, Data Value Over Time for Function Code 4",
key = list(points = list(pch = 19, col = seq_along(levels(mergedDT$mbtcp.modbus.reference_num))),
text = list(levels(mergedDT$mbtcp.modbus.reference_num)), space = 'top',
columns = nlevels(mergedDT$mbtcp.modbus.reference_num)))
save(scadaDT, scadaTCPConvDT, scadaEndPtsDT, modbusDT, moddataDT, mergedDT, file="report.Rda")
mergedDT$ip.src <- factor(mergedDT$ip.src)
mergedDT$ip.dst <- factor(mergedDT$ip.dst)
mergedDT$tcp.srcport <- factor(mergedDT$tcp.srcport)
mergedDT$tcp.dstport <- factor(mergedDT$dst.srcport)
mergedDT$mbtcp.prot_id<- factor(mergedDT$mbtcp.prot_id)
mergedDT$mbtcp.modbus.func_code <- factor(mergedDT$mbtcp.modbus.func_code)
mergedDT$resp.src <- factor(mergedDT$resp.src)
mergedDT$resp.dest <- factor(mergedDT$resp.dest)
mergedDT$resp.srcport <- factor(mergedDT$resp.srcport)
mergedDT$resp.dstport <- factor(mergedDT$resp.dstport)
mergedDT$resp.prot_id <- factor(mergedDT$resp.prot_id)
mergedDT$resp.data <- factor(mergedDT$resp.data)
mergedDT$resp.func.code <- factor(mergedDT$resp.func.code)
mergedDT$mbtcp.modbus.reference_num <- factor(mergedDT$mbtcp.modbus.reference_num)
View(mergedDT)
mergedDT$tcp.dstport <- factor(mergedDT$tcp.dstport)
save(scadaDT, scadaTCPConvDT, scadaEndPtsDT, modbusDT, moddataDT, mergedDT, file="report.Rda")
View(mergedSewDT)
View(sewModbusDT)
