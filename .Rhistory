m10kDT[idx, `:=`("frame.number"=m10kRow$frame.number, "frame.time_relative"=m10kRow$frame.time_relative,
"frame.time_delta_displayed"=m10kRow$frame.time_delta_displayed, "frame.len"=m10kRow$frame.len,
"ip.src"=m10kRow$ip.src, "ip.dst"=m10kRow$ip.dst, "tcp.srcport"=m10kRow$tcp.srcport,
"tcp.dstport"=m10kRow$tcp.dstport, "mbtcp.prot_id"=m10kRow$mbtcp.prot_id,
"mbtcp.trans_id"=m10kRow$mbtcp.trans_id, "mbtcp.len"=m10kRow$mbtcp.len,
"mbtcp.modbus.func_code"=m10kRow$mbtcp.modbus.func_code,
"mbtcp.modbus.word_cnt"=m10kRow$mbtcp.modbus.word_cnt,
"mbtcp.modbus.reference_num"=m10kRow$mbtcp.modbus.reference_num,
"resp.fr.number"=m10kRow$resp.fr.number, "resp.time.rel"=m10kRow$resp.time.rel,
"resp.time.delta"=m10kRow$resp.time.delta, "resp.len"=m10kRow$resp.len,
"resp.src"=m10kRow$resp.src, "resp.dest"=m10kRow$resp.dest,
"resp.srcport"=m10kRow$resp.srcport, "resp.dstport"=m10kRow$resp.dstport,
"resp.prot_id"=m10kRow$resp.prot_id, "resp.trans_id"=m10kRow$mbtcp.trans_id,
"resp.mbcp.len"=m10kRow$resp.mbcp.len, "resp.func.code"=m10kRow$resp.func.code,
"resp.data"=m10kRow$resp.data)
]
idx <- idx+1
}
} # end for i in m10kDT
totT <- Sys.time() - strt
totT
strt <- Sys.time()
#   for (i in 1:nrow(d10kDT)) {
foreach (i= 1:nrow(d10kDT)) %dopar% {
pkt <- d10kDT[i,]
#       print(paste("pkt :", i))
#       print(pkt)
#   if request (assumption is that we're starting with a request)
if (pkt$tcp.dstport=="502") {
m10kRow <- pkt[,.(frame.number, frame.time_relative, frame.time_delta_displayed, frame.len,
ip.src, ip.dst, tcp.srcport, tcp.dstport, mbtcp.prot_id,
mbtcp.trans_id, mbtcp.len, mbtcp.modbus.func_code, mbtcp.modbus.word_cnt,
mbtcp.modbus.reference_num)]
setkey(m10kRow, mbtcp.trans_id)
#     print(paste("mergedRow: ", i))
#     print(mergedRow)
} # end if request
# get next row, should be response
#     if (pkt$tcp.srcport=="502") {
#       # set response fields in mergedRow
#       addCols <- pkt[,.(resp.fr.number=frame.number, resp.time.rel=frame.time_relative,
#                         resp.time.delta=frame.time_delta_displayed,
#                         resp.len=frame.len, resp.src=ip.src, resp.dest=ip.dst, resp.srcport=tcp.srcport,
#                         resp.dstport=tcp.dstport, resp.prot_id=mbtcp.prot_id, resp.trans_id=mbtcp.trans_id,
#                         resp.mbcp.len=mbtcp.len, resp.func.code=mbtcp.modbus.func_code,
#                         resp.data=mbtcp.modbus.data)]
#       setkey(addCols, resp.trans_id)
#       #     print(paste("addCols: ", i))
#       #     print(addCols)
#
#       m10kRow <- m10kRow[addCols]
#       #     print("mergedrow+addCols: ")
#       #     print(mergedRow)
#
#       # create new row
#       m10kDT[idx, `:=`("frame.number"=m10kRow$frame.number, "frame.time_relative"=m10kRow$frame.time_relative,
#                          "frame.time_delta_displayed"=m10kRow$frame.time_delta_displayed, "frame.len"=m10kRow$frame.len,
#                          "ip.src"=m10kRow$ip.src, "ip.dst"=m10kRow$ip.dst, "tcp.srcport"=m10kRow$tcp.srcport,
#                          "tcp.dstport"=m10kRow$tcp.dstport, "mbtcp.prot_id"=m10kRow$mbtcp.prot_id,
#                          "mbtcp.trans_id"=m10kRow$mbtcp.trans_id, "mbtcp.len"=m10kRow$mbtcp.len,
#                          "mbtcp.modbus.func_code"=m10kRow$mbtcp.modbus.func_code,
#                          "mbtcp.modbus.word_cnt"=m10kRow$mbtcp.modbus.word_cnt,
#                          "mbtcp.modbus.reference_num"=m10kRow$mbtcp.modbus.reference_num,
#                          "resp.fr.number"=m10kRow$resp.fr.number, "resp.time.rel"=m10kRow$resp.time.rel,
#                          "resp.time.delta"=m10kRow$resp.time.delta, "resp.len"=m10kRow$resp.len,
#                          "resp.src"=m10kRow$resp.src, "resp.dest"=m10kRow$resp.dest,
#                          "resp.srcport"=m10kRow$resp.srcport, "resp.dstport"=m10kRow$resp.dstport,
#                          "resp.prot_id"=m10kRow$resp.prot_id, "resp.trans_id"=m10kRow$mbtcp.trans_id,
#                          "resp.mbcp.len"=m10kRow$resp.mbcp.len, "resp.func.code"=m10kRow$resp.func.code,
#                          "resp.data"=m10kRow$resp.data)
#                ]
#
#       idx <- idx+1
#     }
} # end for i in m10kDT
totT <- Sys.time() - strt
totT
strt <- Sys.time()
#   for (i in 1:nrow(d10kDT)) {
foreach (i= 1:nrow(d10kDT)) %dopar% {
pkt <- d10kDT[i,]
#       print(paste("pkt :", i))
#       print(pkt)
#   if request (assumption is that we're starting with a request)
#   if (pkt$tcp.dstport=="502") {
#       m10kRow <- pkt[,.(frame.number, frame.time_relative, frame.time_delta_displayed, frame.len,
#                           ip.src, ip.dst, tcp.srcport, tcp.dstport, mbtcp.prot_id,
#                           mbtcp.trans_id, mbtcp.len, mbtcp.modbus.func_code, mbtcp.modbus.word_cnt,
#                           mbtcp.modbus.reference_num)]
#       setkey(m10kRow, mbtcp.trans_id)
#       #     print(paste("mergedRow: ", i))
#       #     print(mergedRow)
#   } # end if request
# get next row, should be response
#     if (pkt$tcp.srcport=="502") {
#       # set response fields in mergedRow
#       addCols <- pkt[,.(resp.fr.number=frame.number, resp.time.rel=frame.time_relative,
#                         resp.time.delta=frame.time_delta_displayed,
#                         resp.len=frame.len, resp.src=ip.src, resp.dest=ip.dst, resp.srcport=tcp.srcport,
#                         resp.dstport=tcp.dstport, resp.prot_id=mbtcp.prot_id, resp.trans_id=mbtcp.trans_id,
#                         resp.mbcp.len=mbtcp.len, resp.func.code=mbtcp.modbus.func_code,
#                         resp.data=mbtcp.modbus.data)]
#       setkey(addCols, resp.trans_id)
#       #     print(paste("addCols: ", i))
#       #     print(addCols)
#
#       m10kRow <- m10kRow[addCols]
#       #     print("mergedrow+addCols: ")
#       #     print(mergedRow)
#
#       # create new row
#       m10kDT[idx, `:=`("frame.number"=m10kRow$frame.number, "frame.time_relative"=m10kRow$frame.time_relative,
#                          "frame.time_delta_displayed"=m10kRow$frame.time_delta_displayed, "frame.len"=m10kRow$frame.len,
#                          "ip.src"=m10kRow$ip.src, "ip.dst"=m10kRow$ip.dst, "tcp.srcport"=m10kRow$tcp.srcport,
#                          "tcp.dstport"=m10kRow$tcp.dstport, "mbtcp.prot_id"=m10kRow$mbtcp.prot_id,
#                          "mbtcp.trans_id"=m10kRow$mbtcp.trans_id, "mbtcp.len"=m10kRow$mbtcp.len,
#                          "mbtcp.modbus.func_code"=m10kRow$mbtcp.modbus.func_code,
#                          "mbtcp.modbus.word_cnt"=m10kRow$mbtcp.modbus.word_cnt,
#                          "mbtcp.modbus.reference_num"=m10kRow$mbtcp.modbus.reference_num,
#                          "resp.fr.number"=m10kRow$resp.fr.number, "resp.time.rel"=m10kRow$resp.time.rel,
#                          "resp.time.delta"=m10kRow$resp.time.delta, "resp.len"=m10kRow$resp.len,
#                          "resp.src"=m10kRow$resp.src, "resp.dest"=m10kRow$resp.dest,
#                          "resp.srcport"=m10kRow$resp.srcport, "resp.dstport"=m10kRow$resp.dstport,
#                          "resp.prot_id"=m10kRow$resp.prot_id, "resp.trans_id"=m10kRow$mbtcp.trans_id,
#                          "resp.mbcp.len"=m10kRow$resp.mbcp.len, "resp.func.code"=m10kRow$resp.func.code,
#                          "resp.data"=m10kRow$resp.data)
#                ]
#
#       idx <- idx+1
#     }
} # end for i in m10kDT
totT <- Sys.time() - strt
totT
pkt
strt <- Sys.time()
#   for (i in 1:nrow(d10kDT)) {
foreach (i= 1:nrow(d10kDT)) %dopar% {
pkt <- i
#   pkt <- d10kDT[i,]
#       print(paste("pkt :", i))
#       print(pkt)
#   if request (assumption is that we're starting with a request)
if (pkt$tcp.dstport=="502") {
m10kRow <- pkt[,.(frame.number, frame.time_relative, frame.time_delta_displayed, frame.len,
ip.src, ip.dst, tcp.srcport, tcp.dstport, mbtcp.prot_id,
mbtcp.trans_id, mbtcp.len, mbtcp.modbus.func_code, mbtcp.modbus.word_cnt,
mbtcp.modbus.reference_num)]
setkey(m10kRow, mbtcp.trans_id)
#     print(paste("mergedRow: ", i))
#     print(mergedRow)
} # end if request
# get next row, should be response
#     if (pkt$tcp.srcport=="502") {
#       # set response fields in mergedRow
#       addCols <- pkt[,.(resp.fr.number=frame.number, resp.time.rel=frame.time_relative,
#                         resp.time.delta=frame.time_delta_displayed,
#                         resp.len=frame.len, resp.src=ip.src, resp.dest=ip.dst, resp.srcport=tcp.srcport,
#                         resp.dstport=tcp.dstport, resp.prot_id=mbtcp.prot_id, resp.trans_id=mbtcp.trans_id,
#                         resp.mbcp.len=mbtcp.len, resp.func.code=mbtcp.modbus.func_code,
#                         resp.data=mbtcp.modbus.data)]
#       setkey(addCols, resp.trans_id)
#       #     print(paste("addCols: ", i))
#       #     print(addCols)
#
#       m10kRow <- m10kRow[addCols]
#       #     print("mergedrow+addCols: ")
#       #     print(mergedRow)
#
#       # create new row
#       m10kDT[idx, `:=`("frame.number"=m10kRow$frame.number, "frame.time_relative"=m10kRow$frame.time_relative,
#                          "frame.time_delta_displayed"=m10kRow$frame.time_delta_displayed, "frame.len"=m10kRow$frame.len,
#                          "ip.src"=m10kRow$ip.src, "ip.dst"=m10kRow$ip.dst, "tcp.srcport"=m10kRow$tcp.srcport,
#                          "tcp.dstport"=m10kRow$tcp.dstport, "mbtcp.prot_id"=m10kRow$mbtcp.prot_id,
#                          "mbtcp.trans_id"=m10kRow$mbtcp.trans_id, "mbtcp.len"=m10kRow$mbtcp.len,
#                          "mbtcp.modbus.func_code"=m10kRow$mbtcp.modbus.func_code,
#                          "mbtcp.modbus.word_cnt"=m10kRow$mbtcp.modbus.word_cnt,
#                          "mbtcp.modbus.reference_num"=m10kRow$mbtcp.modbus.reference_num,
#                          "resp.fr.number"=m10kRow$resp.fr.number, "resp.time.rel"=m10kRow$resp.time.rel,
#                          "resp.time.delta"=m10kRow$resp.time.delta, "resp.len"=m10kRow$resp.len,
#                          "resp.src"=m10kRow$resp.src, "resp.dest"=m10kRow$resp.dest,
#                          "resp.srcport"=m10kRow$resp.srcport, "resp.dstport"=m10kRow$resp.dstport,
#                          "resp.prot_id"=m10kRow$resp.prot_id, "resp.trans_id"=m10kRow$mbtcp.trans_id,
#                          "resp.mbcp.len"=m10kRow$resp.mbcp.len, "resp.func.code"=m10kRow$resp.func.code,
#                          "resp.data"=m10kRow$resp.data)
#                ]
#
#       idx <- idx+1
#     }
} # end for i in m10kDT
totT <- Sys.time() - strt
totT
foreach (i= 1:nrow(d10kDT)) %dopar% {
pkt <- i
#   pkt <- d10kDT[i,]
#       print(paste("pkt :", i))
print(pkt)
}
foreach (i= 1:nrow(d10kDT)) %dopar% {
pkt <- i
#   pkt <- d10kDT[i,]
#       print(paste("pkt :", i))
print(i)
print(pkt)
}
i
#   for (i in 1:nrow(d10kDT)) {
foreach (i = 1:nrow(d10kDT)) %dopar% {
pkt <- d10kDT[i,]
print(paste("pkt ::: ", pkt))
#       print(paste("pkt :", i))
#         print(pkt)
}
1:nrow(d10kDT)) {
foreach (i = 1:nrow(d10kDT)) %dopar% {
pkt <- d10kDT[i,]
print(pkt)
#       print(paste("pkt :", i))
#         print(pkt)
}
foreach (i = 1:nrow(d10kDT)) %dopar% {
print(paste("iteration ::", i))
}
foreach (i = 1:nrow(d10kDT)) %dopar% {
c <- i
print(paste("iteration ::", c))
}
% {
#   c <- i
#   print(paste("iteration ::", c))
}
foreach (i = 1:nrow(d10kDT)) %dopar% {
}
foreach (i = 1:nrow(d10kDT)) %dopar% {
i
}
foreach (i = 1:nrow(d10kDT)) %dopar% {
d10kDT[i,]
}
foreach (i = 1:nrow(d10kDT)) %dopar% {
pkt<-d10kDT[i,]
}
pkt
foreach (i = 1:nrow(d10kDT)) %dopar% {
pkt = d10kDT[i,]
}
pkt
?foreach
pkt<-NULL
#   for (i in 1:nrow(d10kDT)) {
foreach (i = 1:nrow(d10kDT)) %dopar% {
pkt <- d10kDT[i,]
}
pkt
foreach (i = 1:nrow(d10kDT)) %dopar% {
pkt <- d10kDT[i,]
if (pkt$tcp.dstport=="502") {
print("dest port 502")
}
}
foreach (i = 1:nrow(d10kDT)) %dopar% {
pkt <- d10kDT[i,]
if (pkt$tcp.dstport=="502") {
print(paste("pkt$tcp.dstport ::", pkt$tcp.dstport) )
print("dest port 502")
}
}
foreach (i = 1:nrow(d10kDT)) %dopar% {
pkt <- d10kDT[i,]
if (pkt$tcp.dstport=="502") {
print(paste("pkt$tcp.dstport ::", pkt) )
print("dest port 502")
}
}
foreach (i = 1:nrow(d10kDT)) %dopar% {
pkt <- d10kDT[i,]
if (pkt$tcp.dstport=="502") {
print(paste("pkt$tcp.dstport ::", pkt) )
d10kDT[i,.(frame.number, frame.time_relative, frame.time_delta_displayed, frame.len,
ip.src, ip.dst, tcp.srcport, tcp.dstport, mbtcp.prot_id,
mbtcp.trans_id, mbtcp.len, mbtcp.modbus.func_code, mbtcp.modbus.word_cnt,
mbtcp.modbus.reference_num)]
print("dest port 502")
}
}
View(moddataDT)
mergedDT
summary(mergedDT)
mergedDT$resp.func.code <- factor(mergedDT$resp.func.code)
mergedDT$mbtcp.modbus.reference_num <- factor(mergedDT$mbtcp.modbus.reference_num)
mergedDT$resp.srcport <- factor(mergedDT$resp.srcport)
mergedDT$resp.dstport <- factor(mergedDT$resp.dstport)
mergedDT$resp.prot_id <- factor(mergedDT$resp.prot_id)
summary(mergedDT)
setkey(mergedDT, resp.func.code, mbtcp.modbus.reference_num)
summary(mergedDT)
scadaDT <- as.data.table(read.csv("~/Bureau/data/scadaCops/SCADA_20150429_csv", stringsAsFactors=TRUE))
scadaEndPtsDT <- as.data.table(read.csv("~/Bureau/data/scadaCops/SCADA_Security_042915_TCP_Endpoints.csv"))
scadaTCPConvDT <- as.data.table(read.csv("~/Bureau/data/scadaCops/SCADA_Security_042915_TCP_Conversations.csv", header=TRUE,
na.strings="NA", quote="\"", dec=",", colClass=c(Port.A="factor", Port.B="factor")))
modbusDT <- as.data.table(read.csv("~/Bureau/data/scadaCops/modbus/modbus_transform.data", header=FALSE,
col.names=c("protocolID", "transID", "length","functionCode","refType","wordCnt","data"),
colClass=c(protocolID="factor", functionCode="factor", refType="factor")))
moddataDT <- as.data.table(read.csv("~/Bureau/data/scadaCops/modbus/modbus.data", header=TRUE,
colClass=c(ip.proto="factor", ip.version="factor",
mbtcp.modbus.func_code="factor", tcp.srcport="factor",
tcp.dstport="factor", mbtcp.modbus.reference_num="factor",
mbtcp.prot_id="factor")))
save.image()
View(mergedDT)
mergedDT <- as.data.table(read.csv("mergedAll.dat", header=TRUE,
colClass=c(mbtcp.prot_id="factor",
mbtcp.modbus.func_code="factor", tcp.srcport="factor",
tcp.dstport="factor", mbtcp.modbus.reference_num="factor",
resp.func.code="factor")))
View(mergedDT)
View(mergedDT)
mergedDT
str(mergedDT)
mergedDT <- as.data.table(read.csv("mergedAll.dat", header=TRUE,
colClass=c(mbtcp.prot_id="factor",
mbtcp.modbus.func_code="factor", tcp.srcport="factor",
tcp.dstport="factor", mbtcp.modbus.reference_num="factor",
resp.func.code="factor", resp.srcport="factor",
resp.dstport="factor"
resp.prot_id="factor")))
mergedDT <- as.data.table(read.csv("mergedAll.dat", header=TRUE,
colClass=c(mbtcp.prot_id="factor",
mbtcp.modbus.func_code="factor", tcp.srcport="factor",
tcp.dstport="factor", mbtcp.modbus.reference_num="factor",
resp.func.code="factor", resp.srcport="factor",
resp.dstport="factor", resp.prot_id="factor")))
mergedDT(summary)
summary(mergedDT)
?scale_fill_brewer
View(mergedDT)
mergedDT
mergedDT[, min.resp.time.rel=min(resp.time.rel) , by=.(resp.func.code,mbtcp.modbus.reference_num)]
mergedDT[, .(min.resp.time.rel=min(resp.time.rel)) , by=.(resp.func.code,mbtcp.modbus.reference_num)]
mergedDT
setkey(mergedDT, frame.number, mbtcp.trans_id, mbtcp.modbus.func_code, mbtcp.modbus.reference_num)
mergedDT
head(mergedDT)
mergedDT <- as.data.table(read.csv("mergedAll.dat", header=TRUE,
colClass=c(mbtcp.prot_id="factor",
mbtcp.modbus.func_code="factor", tcp.srcport="factor",
tcp.dstport="factor", mbtcp.modbus.reference_num="factor",
resp.func.code="factor", resp.srcport="factor",
resp.dstport="factor", resp.prot_id="factor")))
head(mergedDT)
modDataStats <- mergedDT[,.(count=.N, d.min=min(d), d.mean=mean(d, na.rm=T), d.max=max(d),
d.sd=sd(d, na.rm=T), min.resp.time.rel=min(resp.time.rel),min.resp.time.rel= max(resp.time.rel)),
by=.(resp.func.code, mbtcp.modbus.reference_num)]
mergedDT[, d:=as.integer(paste("0x", gsub(":", "", resp.data), sep=""))]
View(mergedDT)
rm(cl,mergedDewDT,sewModbusDT,modsewDataStats,it,pkt,totT,strt)
rm(mergedSewDT)
View(mergedDT)
modDataStats <- mergedDT[,.(count=.N, d.min=min(d), d.mean=mean(d, na.rm=T), d.max=max(d),
d.sd=sd(d, na.rm=T), min.resp.time.rel=min(resp.time.rel),min.resp.time.rel= max(resp.time.rel)),
by=.(resp.func.code, mbtcp.modbus.reference_num)]
write.csv(mergedDT, "mergedAll.dat")
?setkey
library(data.table)
library(tidyr)
library(lattice)
library(ggplot2)
library(gplots)
library(plyr)
library(dplyr)
library(reshape2)
library(RColorBrewer)
library(igraph)
library(png)
library(grid)
library(Matrix)
modDataStats <- mergedDT[,.(count=.N, d.min=min(d), d.mean=mean(d, na.rm=T), d.max=max(d),
d.sd=sd(d, na.rm=T), min.resp.time.rel=min(resp.time.rel),min.resp.time.rel= max(resp.time.rel)),
by=.(resp.func.code, mbtcp.modbus.reference_num)]
modDataStats
modDataStats <- mergedDT[,.(count=.N, d.min=min(d), d.mean=mean(d, na.rm=T), d.max=max(d),
d.sd=sd(d, na.rm=T), min.resp.time.rel=min(resp.time.rel),min.resp.time.rel= max(resp.time.rel)),
by=.(resp.func.code, mbtcp.modbus.reference_num)][order(resp.func.code, mbtcp.modbus.reference_num)]
modDataStats
modDataStats <- mergedDT[,.(count=.N, d.min=min(d), d.mean=mean(d, na.rm=T), d.max=max(d),
d.sd=sd(d, na.rm=T), min.resp.time.rel=min(resp.time.rel),min.resp.time.rel= max(resp.time.rel)),
by=.(resp.func.code, mbtcp.modbus.reference_num)][order(resp.func.code, mbtcp.modbus.reference_num)]
modDataStats
alist <- as.list(resp.mbcp.len,resp.func.code,resp.data)
aslist
alist
alist <- (resp.mbcp.len,resp.func.code,resp.data)
alist <- {resp.mbcp.len,resp.func.code,resp.data}
alist <- list(resp.mbcp.len,resp.func.code,resp.data)
alist
str(alist)
adt <- data.table(alist)
library(data.table)
library(tidyr)
library(lattice)
library(ggplot2)
library(gplots)
library(plyr)
library(dplyr)
library(reshape2)
library(RColorBrewer)
library(igraph)
library(png)
library(grid)
library(Matrix)
library(ROCR)
adt <- data.table(alist)
adt
alist
adt <- cbind(alist)
adt
alist <- cbind(resp.mbcp.len,resp.func.code,resp.data)
alist
adt <- data.table(alist)
adt
mergedDT[1:50,]
names(mergedDT)
rm(names(mergedDT))
paste(names(mergedDT))
apply(paste, names(mergedDT))
?apply
names(mergedDT)
?paste
paste(names(mergedDT))
p<-paste(names(mergedDT))
p
p<-paste(names(mergedDT), sep=", ")
p
p<-paste(names(mergedDT), collapse=", ")
p
alist <- paste(names(mergedDT), collapse="", "")
alist
alist <- paste(names(mergedDT), collapse=", ")
alist
rm(alist)
ls
ls()
names(mergedDT)
rm("frame.number",  "frame.time_relative",  "frame.time_delta_displayed"
,"frame.len",  "ip.src", "ip.dst", "tcp.srcport"
,"tcp.dstport", "mbtcp.prot_id",  "mbtcp.trans_id",  "mbtcp.len"
,"mbtcp.modbus.func_code", "mbtcp.modbus.word_cnt", "mbtcp.modbus.reference_num", "resp.fr.number"
,"resp.time.rel"  ,"resp.time.delta",  "resp.len" "resp.src"
,"resp.dest"                  "resp.srcport"               "resp.dstport",  "resp.prot_id"
,"resp.trans_id", "resp.mbcp.len",  "resp.func.code", "resp.data" )
rm("frame.number",  "frame.time_relative",  "frame.time_delta_displayed"
,"frame.len",  "ip.src", "ip.dst", "tcp.srcport"
,"tcp.dstport", "mbtcp.prot_id",  "mbtcp.trans_id",  "mbtcp.len"
,"mbtcp.modbus.func_code", "mbtcp.modbus.word_cnt", "mbtcp.modbus.reference_num", "resp.fr.number"
,"resp.time.rel"  ,"resp.time.delta",  "resp.len" "resp.src"
,"resp.dest", "resp.srcport", "resp.dstport",  "resp.prot_id"
,"resp.trans_id", "resp.mbcp.len",  "resp.func.code", "resp.data" )
rm("frame.number",  "frame.time_relative",  "frame.time_delta_displayed"
,"frame.len",  "ip.src", "ip.dst", "tcp.srcport"
,"tcp.dstport", "mbtcp.prot_id",  "mbtcp.trans_id",  "mbtcp.len"
,"mbtcp.modbus.func_code", "mbtcp.modbus.word_cnt", "mbtcp.modbus.reference_num", "resp.fr.number"
,"resp.time.rel"  ,"resp.time.delta",  "resp.len", "resp.src"
,"resp.dest", "resp.srcport", "resp.dstport",  "resp.prot_id"
,"resp.trans_id", "resp.mbcp.len",  "resp.func.code", "resp.data" )
rm(numcols,names,numrows,p,numrows,frame.time.relative,frame._delta_displ,adt)
ls()
rm(frame.time._delta_displayed,d10kDT,idx)
rm(pkt, mergedRow, addCols, i, idx)
ls()
rm(m10kDT)
View(scadaEndPtsDT)
View(scadaTCPConvDT)
View(scadaDT)
View(moddataDT)
View(modbusDT)
rm(modbusDT)
moddataDT[,plot(frame.time_relative, frame.number)]
moddataDT[,plot(mbtcp.len, frame.number)]
moddataDT[,(plot(frame.time_relative, frame.number)]
moddataDT[,(plot(frame.number, frame.time_relative)]
moddataDT[,(plot(frame.number, mbtcp.len))]
moddataDT[,(plot(frame.number, frame.time_relative))]
par(mrow=c(1,2))
par(mfrow=c(1,2))
moddataDT[,(plot(frame.number, frame.time_relative, main="Frame # / Time"))]
moddataDT[,(plot(frame.number, mbtcp.len, main="Frame # / Length"))]
par(mfrow=c(1,2))
xyp <- ggplot(moddataDT, aes(x=frame.number, y=frame.time_relative)) +
geom_point(shape=1, col="red", alpha=0.5) + ggtitle("Frame # / Time")
xyp
xyp <- ggplot(moddataDT, aes(x=frame.number, y=mbtcp.len)) +
geom_point(shape=1, col="red", alpha=0.5) + ggtitle("Frame # / Length"
xyp
xyp <- ggplot(moddataDT, aes(x=frame.number, y=mbtcp.len)) +
geom_point(shape=1, col="red", alpha=0.5) + ggtitle("Frame # / Length")
xyp
install.packages("grid")
library(grid)
library(gridExtra)
install.packages("grid")
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
xyp1 <- ggplot(moddataDT, aes(x=frame.number, y=frame.time_relative)) +
geom_point(shape=1, col="firebrick", alpha=0.5) + ggtitle("Frame # / Time")
xyp2 <- ggplot(moddataDT, aes(x=frame.number, y=mbtcp.len)) +
geom_point(shape=1, col="olivedrab", alpha=0.5) + ggtitle("Frame # / Length")
grid.arrange(xyp1, xyp2,ncol=2)
load("~/rDia/edaReport.Rmd")
View(moddataDT)
library(grid)
library(gridExtra)
table(moddataDT[,mbtcp.modbus.func_code])
